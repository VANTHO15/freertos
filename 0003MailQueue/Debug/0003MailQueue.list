
0003MailQueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b90  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003ca0  08003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d70  08003d70  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003d70  08003d70  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d70  08003d70  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001098  20000074  08003dec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000110c  08003dec  0002110c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012071  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298c  00000000  00000000  0003210e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00034aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00035938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a59  00000000  00000000  000366b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f576  00000000  00000000  0004f111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8f8  00000000  00000000  0005e687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edf7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee8  00000000  00000000  000edfd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c88 	.word	0x08003c88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003c88 	.word	0x08003c88

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b08e      	sub	sp, #56	; 0x38
 8000184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 f9ed 	bl	8000564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f847 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f889 	bl	80002a4 <MX_GPIO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMailQDef(myQueue01, 14, info_t);
 8000192:	230e      	movs	r3, #14
 8000194:	623b      	str	r3, [r7, #32]
 8000196:	230c      	movs	r3, #12
 8000198:	627b      	str	r3, [r7, #36]	; 0x24
 800019a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800019e:	62bb      	str	r3, [r7, #40]	; 0x28

  myQueue01Handle = osMailCreate(osMailQ(myQueue01), NULL);
 80001a0:	f107 0320 	add.w	r3, r7, #32
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f001 fafc 	bl	80017a4 <osMailCreate>
 80001ac:	4603      	mov	r3, r0
 80001ae:	4a14      	ldr	r2, [pc, #80]	; (8000200 <main+0x80>)
 80001b0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  Queue2Hanle = xQueueCreate(9, sizeof(uint32_t));  // queue cá»§a freertos
 80001b2:	2200      	movs	r2, #0
 80001b4:	2104      	movs	r1, #4
 80001b6:	2009      	movs	r0, #9
 80001b8:	f001 fd40 	bl	8001c3c <xQueueGenericCreate>
 80001bc:	4603      	mov	r3, r0
 80001be:	4a11      	ldr	r2, [pc, #68]	; (8000204 <main+0x84>)
 80001c0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001c2:	4b11      	ldr	r3, [pc, #68]	; (8000208 <main+0x88>)
 80001c4:	1d3c      	adds	r4, r7, #4
 80001c6:	461d      	mov	r5, r3
 80001c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2100      	movs	r1, #0
 80001d8:	4618      	mov	r0, r3
 80001da:	f001 f984 	bl	80014e6 <osThreadCreate>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <main+0x8c>)
 80001e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Task1Func, "Task1", 128, NULL, 2, &Task1Handle);
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <main+0x90>)
 80001e6:	9301      	str	r3, [sp, #4]
 80001e8:	2302      	movs	r3, #2
 80001ea:	9300      	str	r3, [sp, #0]
 80001ec:	2300      	movs	r3, #0
 80001ee:	2280      	movs	r2, #128	; 0x80
 80001f0:	4908      	ldr	r1, [pc, #32]	; (8000214 <main+0x94>)
 80001f2:	4809      	ldr	r0, [pc, #36]	; (8000218 <main+0x98>)
 80001f4:	f002 f9e2 	bl	80025bc <xTaskCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001f8:	f001 f96e 	bl	80014d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <main+0x7c>
 80001fe:	bf00      	nop
 8000200:	200010b0 	.word	0x200010b0
 8000204:	2000109c 	.word	0x2000109c
 8000208:	08003cb4 	.word	0x08003cb4
 800020c:	20001098 	.word	0x20001098
 8000210:	200010ac 	.word	0x200010ac
 8000214:	08003cac 	.word	0x08003cac
 8000218:	080002e9 	.word	0x080002e9

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b090      	sub	sp, #64	; 0x40
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0318 	add.w	r3, r7, #24
 8000226:	2228      	movs	r2, #40	; 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f003 fc62 	bl	8003af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023e:	2301      	movs	r3, #1
 8000240:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000246:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000250:	2302      	movs	r3, #2
 8000252:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800025a:	2300      	movs	r3, #0
 800025c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fa90 	bl	8000788 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800026e:	f000 f899 	bl	80003a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2302      	movs	r3, #2
 8000278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f000 fcfc 	bl	8000c88 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000296:	f000 f885 	bl	80003a4 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <MX_GPIO_Init+0x40>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <MX_GPIO_Init+0x40>)
 80002b0:	f043 0320 	orr.w	r3, r3, #32
 80002b4:	6193      	str	r3, [r2, #24]
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <MX_GPIO_Init+0x40>)
 80002b8:	699b      	ldr	r3, [r3, #24]
 80002ba:	f003 0320 	and.w	r3, r3, #32
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <MX_GPIO_Init+0x40>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <MX_GPIO_Init+0x40>)
 80002c8:	f043 0304 	orr.w	r3, r3, #4
 80002cc:	6193      	str	r3, [r2, #24]
 80002ce:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <MX_GPIO_Init+0x40>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	f003 0304 	and.w	r3, r3, #4
 80002d6:	603b      	str	r3, [r7, #0]
 80002d8:	683b      	ldr	r3, [r7, #0]

}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000

080002e8 <Task1Func>:

/* USER CODE BEGIN 4 */
void Task1Func(void * Param)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b087      	sub	sp, #28
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6178      	str	r0, [r7, #20]

  while(1)
  {
	  Recv_data = osMailGet(myQueue01Handle, 100);
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <Task1Func+0x44>)
 80002f2:	6819      	ldr	r1, [r3, #0]
 80002f4:	4c0e      	ldr	r4, [pc, #56]	; (8000330 <Task1Func+0x48>)
 80002f6:	463b      	mov	r3, r7
 80002f8:	2264      	movs	r2, #100	; 0x64
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fafe 	bl	80018fc <osMailGet>
 8000300:	463b      	mov	r3, r7
 8000302:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  StrucData = Recv_data.value.p;
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <Task1Func+0x48>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	4a09      	ldr	r2, [pc, #36]	; (8000334 <Task1Func+0x4c>)
 8000310:	6013      	str	r3, [r2, #0]
	  osMailFree(myQueue01Handle, StrucData);// giáº£i phÃ³ng dá»¯ liá»u
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <Task1Func+0x44>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a07      	ldr	r2, [pc, #28]	; (8000334 <Task1Func+0x4c>)
 8000318:	6812      	ldr	r2, [r2, #0]
 800031a:	4611      	mov	r1, r2
 800031c:	4618      	mov	r0, r3
 800031e:	f001 fb61 	bl	80019e4 <osMailFree>

	  osDelay(1000);
 8000322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000326:	f001 f92a 	bl	800157e <osDelay>
	  Recv_data = osMailGet(myQueue01Handle, 100);
 800032a:	e7e1      	b.n	80002f0 <Task1Func+0x8>
 800032c:	200010b0 	.word	0x200010b0
 8000330:	200010a0 	.word	0x200010a0
 8000334:	20001094 	.word	0x20001094

08000338 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	info_t *Task_data = osMailAlloc(myQueue01Handle, 100);
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <StartDefaultTask+0x40>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2164      	movs	r1, #100	; 0x64
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fa84 	bl	8001854 <osMailAlloc>
 800034c:	60f8      	str	r0, [r7, #12]
	Task_data->name = "Nguyen Van Tho";
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	4a0a      	ldr	r2, [pc, #40]	; (800037c <StartDefaultTask+0x44>)
 8000352:	601a      	str	r2, [r3, #0]
	Task_data->age = 22;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	2216      	movs	r2, #22
 8000358:	711a      	strb	r2, [r3, #4]
	Task_data->class = 10;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	220a      	movs	r2, #10
 800035e:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {
	  osMailPut(myQueue01Handle, Task_data);
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <StartDefaultTask+0x40>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	68f9      	ldr	r1, [r7, #12]
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fa8a 	bl	8001880 <osMailPut>
      osDelay(2000);
 800036c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000370:	f001 f905 	bl	800157e <osDelay>
	  osMailPut(myQueue01Handle, Task_data);
 8000374:	e7f4      	b.n	8000360 <StartDefaultTask+0x28>
 8000376:	bf00      	nop
 8000378:	200010b0 	.word	0x200010b0
 800037c:	08003cd0 	.word	0x08003cd0

08000380 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d101      	bne.n	8000396 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000392:	f000 f8fd 	bl	8000590 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40000800 	.word	0x40000800

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	e7fe      	b.n	80003ac <Error_Handler+0x8>
	...

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	4b18      	ldr	r3, [pc, #96]	; (8000418 <HAL_MspInit+0x68>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a17      	ldr	r2, [pc, #92]	; (8000418 <HAL_MspInit+0x68>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <HAL_MspInit+0x68>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b12      	ldr	r3, [pc, #72]	; (8000418 <HAL_MspInit+0x68>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a11      	ldr	r2, [pc, #68]	; (8000418 <HAL_MspInit+0x68>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <HAL_MspInit+0x68>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	210f      	movs	r1, #15
 80003ea:	f06f 0001 	mvn.w	r0, #1
 80003ee:	f000 f9a0 	bl	8000732 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <HAL_MspInit+0x6c>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <HAL_MspInit+0x6c>)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	40010000 	.word	0x40010000

08000420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08c      	sub	sp, #48	; 0x30
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000430:	2200      	movs	r2, #0
 8000432:	6879      	ldr	r1, [r7, #4]
 8000434:	201e      	movs	r0, #30
 8000436:	f000 f97c 	bl	8000732 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800043a:	201e      	movs	r0, #30
 800043c:	f000 f995 	bl	800076a <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <HAL_InitTick+0x9c>)
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	4a1d      	ldr	r2, [pc, #116]	; (80004bc <HAL_InitTick+0x9c>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	61d3      	str	r3, [r2, #28]
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <HAL_InitTick+0x9c>)
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000458:	f107 0210 	add.w	r2, r7, #16
 800045c:	f107 0314 	add.w	r3, r7, #20
 8000460:	4611      	mov	r1, r2
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fd78 	bl	8000f58 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000468:	f000 fd62 	bl	8000f30 <HAL_RCC_GetPCLK1Freq>
 800046c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800046e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000470:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <HAL_InitTick+0xa0>)
 8000472:	fba2 2303 	umull	r2, r3, r2, r3
 8000476:	0c9b      	lsrs	r3, r3, #18
 8000478:	3b01      	subs	r3, #1
 800047a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <HAL_InitTick+0xa4>)
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <HAL_InitTick+0xa8>)
 8000480:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000482:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <HAL_InitTick+0xa4>)
 8000484:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000488:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800048a:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <HAL_InitTick+0xa4>)
 800048c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800048e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <HAL_InitTick+0xa4>)
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <HAL_InitTick+0xa4>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <HAL_InitTick+0xa4>)
 800049e:	f000 fda9 	bl	8000ff4 <HAL_TIM_Base_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d104      	bne.n	80004b2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80004a8:	4806      	ldr	r0, [pc, #24]	; (80004c4 <HAL_InitTick+0xa4>)
 80004aa:	f000 fdfb 	bl	80010a4 <HAL_TIM_Base_Start_IT>
 80004ae:	4603      	mov	r3, r0
 80004b0:	e000      	b.n	80004b4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004b2:	2301      	movs	r3, #1
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3730      	adds	r7, #48	; 0x30
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	431bde83 	.word	0x431bde83
 80004c4:	200010b4 	.word	0x200010b4
 80004c8:	40000800 	.word	0x40000800

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <NMI_Handler+0x4>

080004d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <MemManage_Handler+0x4>

080004de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr
	...

080004f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <TIM4_IRQHandler+0x10>)
 80004fe:	f000 fe23 	bl	8001148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200010b4 	.word	0x200010b4

0800050c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800051a:	490d      	ldr	r1, [pc, #52]	; (8000550 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000530:	4c0a      	ldr	r4, [pc, #40]	; (800055c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800053e:	f7ff ffe5 	bl	800050c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000542:	f003 faa3 	bl	8003a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000546:	f7ff fe1b 	bl	8000180 <main>
  bx lr
 800054a:	4770      	bx	lr
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000554:	08003d78 	.word	0x08003d78
  ldr r2, =_sbss
 8000558:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800055c:	2000110c 	.word	0x2000110c

08000560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_2_IRQHandler>
	...

08000564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_Init+0x28>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <HAL_Init+0x28>)
 800056e:	f043 0310 	orr.w	r3, r3, #16
 8000572:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000574:	2003      	movs	r0, #3
 8000576:	f000 f8d1 	bl	800071c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800057a:	200f      	movs	r0, #15
 800057c:	f7ff ff50 	bl	8000420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000580:	f7ff ff16 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40022000 	.word	0x40022000

08000590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <HAL_IncTick+0x1c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <HAL_IncTick+0x20>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <HAL_IncTick+0x20>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	20000008 	.word	0x20000008
 80005b0:	200010fc 	.word	0x200010fc

080005b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <HAL_GetTick+0x10>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	200010fc 	.word	0x200010fc

080005c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <__NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	db0b      	blt.n	8000656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	f003 021f 	and.w	r2, r3, #31
 8000644:	4906      	ldr	r1, [pc, #24]	; (8000660 <__NVIC_EnableIRQ+0x34>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	095b      	lsrs	r3, r3, #5
 800064c:	2001      	movs	r0, #1
 800064e:	fa00 f202 	lsl.w	r2, r0, r2
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100

08000664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db0a      	blt.n	800068e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	b2da      	uxtb	r2, r3
 800067c:	490c      	ldr	r1, [pc, #48]	; (80006b0 <__NVIC_SetPriority+0x4c>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068c:	e00a      	b.n	80006a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <__NVIC_SetPriority+0x50>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	3b04      	subs	r3, #4
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	440b      	add	r3, r1
 80006a2:	761a      	strb	r2, [r3, #24]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000e100 	.word	0xe000e100
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	bf28      	it	cs
 80006d6:	2304      	movcs	r3, #4
 80006d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3304      	adds	r3, #4
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d902      	bls.n	80006e8 <NVIC_EncodePriority+0x30>
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3b03      	subs	r3, #3
 80006e6:	e000      	b.n	80006ea <NVIC_EncodePriority+0x32>
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 32ff 	mov.w	r2, #4294967295
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43da      	mvns	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	401a      	ands	r2, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	f04f 31ff 	mov.w	r1, #4294967295
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43d9      	mvns	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff4f 	bl	80005c8 <__NVIC_SetPriorityGrouping>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000732:	b580      	push	{r7, lr}
 8000734:	b086      	sub	sp, #24
 8000736:	af00      	add	r7, sp, #0
 8000738:	4603      	mov	r3, r0
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000744:	f7ff ff64 	bl	8000610 <__NVIC_GetPriorityGrouping>
 8000748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	68b9      	ldr	r1, [r7, #8]
 800074e:	6978      	ldr	r0, [r7, #20]
 8000750:	f7ff ffb2 	bl	80006b8 <NVIC_EncodePriority>
 8000754:	4602      	mov	r2, r0
 8000756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff81 	bl	8000664 <__NVIC_SetPriority>
}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff57 	bl	800062c <__NVIC_EnableIRQ>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e26c      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f000 8087 	beq.w	80008b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007a8:	4b92      	ldr	r3, [pc, #584]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f003 030c 	and.w	r3, r3, #12
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d00c      	beq.n	80007ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007b4:	4b8f      	ldr	r3, [pc, #572]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f003 030c 	and.w	r3, r3, #12
 80007bc:	2b08      	cmp	r3, #8
 80007be:	d112      	bne.n	80007e6 <HAL_RCC_OscConfig+0x5e>
 80007c0:	4b8c      	ldr	r3, [pc, #560]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007cc:	d10b      	bne.n	80007e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ce:	4b89      	ldr	r3, [pc, #548]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d06c      	beq.n	80008b4 <HAL_RCC_OscConfig+0x12c>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d168      	bne.n	80008b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e246      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ee:	d106      	bne.n	80007fe <HAL_RCC_OscConfig+0x76>
 80007f0:	4b80      	ldr	r3, [pc, #512]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a7f      	ldr	r2, [pc, #508]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80007f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e02e      	b.n	800085c <HAL_RCC_OscConfig+0xd4>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10c      	bne.n	8000820 <HAL_RCC_OscConfig+0x98>
 8000806:	4b7b      	ldr	r3, [pc, #492]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a7a      	ldr	r2, [pc, #488]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800080c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	4b78      	ldr	r3, [pc, #480]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a77      	ldr	r2, [pc, #476]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	e01d      	b.n	800085c <HAL_RCC_OscConfig+0xd4>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000828:	d10c      	bne.n	8000844 <HAL_RCC_OscConfig+0xbc>
 800082a:	4b72      	ldr	r3, [pc, #456]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a71      	ldr	r2, [pc, #452]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000834:	6013      	str	r3, [r2, #0]
 8000836:	4b6f      	ldr	r3, [pc, #444]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a6e      	ldr	r2, [pc, #440]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800083c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	e00b      	b.n	800085c <HAL_RCC_OscConfig+0xd4>
 8000844:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a6a      	ldr	r2, [pc, #424]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800084a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a67      	ldr	r2, [pc, #412]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800085a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d013      	beq.n	800088c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000864:	f7ff fea6 	bl	80005b4 <HAL_GetTick>
 8000868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800086a:	e008      	b.n	800087e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800086c:	f7ff fea2 	bl	80005b4 <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	2b64      	cmp	r3, #100	; 0x64
 8000878:	d901      	bls.n	800087e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800087a:	2303      	movs	r3, #3
 800087c:	e1fa      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087e:	4b5d      	ldr	r3, [pc, #372]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0f0      	beq.n	800086c <HAL_RCC_OscConfig+0xe4>
 800088a:	e014      	b.n	80008b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800088c:	f7ff fe92 	bl	80005b4 <HAL_GetTick>
 8000890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000892:	e008      	b.n	80008a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000894:	f7ff fe8e 	bl	80005b4 <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	2b64      	cmp	r3, #100	; 0x64
 80008a0:	d901      	bls.n	80008a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008a2:	2303      	movs	r3, #3
 80008a4:	e1e6      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a6:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1f0      	bne.n	8000894 <HAL_RCC_OscConfig+0x10c>
 80008b2:	e000      	b.n	80008b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d063      	beq.n	800098a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008c2:	4b4c      	ldr	r3, [pc, #304]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 030c 	and.w	r3, r3, #12
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00b      	beq.n	80008e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008ce:	4b49      	ldr	r3, [pc, #292]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 030c 	and.w	r3, r3, #12
 80008d6:	2b08      	cmp	r3, #8
 80008d8:	d11c      	bne.n	8000914 <HAL_RCC_OscConfig+0x18c>
 80008da:	4b46      	ldr	r3, [pc, #280]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d116      	bne.n	8000914 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e6:	4b43      	ldr	r3, [pc, #268]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d005      	beq.n	80008fe <HAL_RCC_OscConfig+0x176>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d001      	beq.n	80008fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e1ba      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008fe:	4b3d      	ldr	r3, [pc, #244]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	4939      	ldr	r1, [pc, #228]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800090e:	4313      	orrs	r3, r2
 8000910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000912:	e03a      	b.n	800098a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	691b      	ldr	r3, [r3, #16]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d020      	beq.n	800095e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800091c:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <HAL_RCC_OscConfig+0x270>)
 800091e:	2201      	movs	r2, #1
 8000920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000922:	f7ff fe47 	bl	80005b4 <HAL_GetTick>
 8000926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000928:	e008      	b.n	800093c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800092a:	f7ff fe43 	bl	80005b4 <HAL_GetTick>
 800092e:	4602      	mov	r2, r0
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	2b02      	cmp	r3, #2
 8000936:	d901      	bls.n	800093c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000938:	2303      	movs	r3, #3
 800093a:	e19b      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800093c:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0f0      	beq.n	800092a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000948:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	4927      	ldr	r1, [pc, #156]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000958:	4313      	orrs	r3, r2
 800095a:	600b      	str	r3, [r1, #0]
 800095c:	e015      	b.n	800098a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <HAL_RCC_OscConfig+0x270>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000964:	f7ff fe26 	bl	80005b4 <HAL_GetTick>
 8000968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800096a:	e008      	b.n	800097e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800096c:	f7ff fe22 	bl	80005b4 <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	2b02      	cmp	r3, #2
 8000978:	d901      	bls.n	800097e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800097a:	2303      	movs	r3, #3
 800097c:	e17a      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1f0      	bne.n	800096c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	2b00      	cmp	r3, #0
 8000994:	d03a      	beq.n	8000a0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d019      	beq.n	80009d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_RCC_OscConfig+0x274>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a4:	f7ff fe06 	bl	80005b4 <HAL_GetTick>
 80009a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009aa:	e008      	b.n	80009be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009ac:	f7ff fe02 	bl	80005b4 <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d901      	bls.n	80009be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009ba:	2303      	movs	r3, #3
 80009bc:	e15a      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d0f0      	beq.n	80009ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f000 faf4 	bl	8000fb8 <RCC_Delay>
 80009d0:	e01c      	b.n	8000a0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_RCC_OscConfig+0x274>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009d8:	f7ff fdec 	bl	80005b4 <HAL_GetTick>
 80009dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009de:	e00f      	b.n	8000a00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009e0:	f7ff fde8 	bl	80005b4 <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d908      	bls.n	8000a00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009ee:	2303      	movs	r3, #3
 80009f0:	e140      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000
 80009f8:	42420000 	.word	0x42420000
 80009fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a00:	4b9e      	ldr	r3, [pc, #632]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1e9      	bne.n	80009e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f000 80a6 	beq.w	8000b66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a1e:	4b97      	ldr	r3, [pc, #604]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10d      	bne.n	8000a46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b94      	ldr	r3, [pc, #592]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a93      	ldr	r2, [pc, #588]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b91      	ldr	r3, [pc, #580]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a42:	2301      	movs	r3, #1
 8000a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a46:	4b8e      	ldr	r3, [pc, #568]	; (8000c80 <HAL_RCC_OscConfig+0x4f8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d118      	bne.n	8000a84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a52:	4b8b      	ldr	r3, [pc, #556]	; (8000c80 <HAL_RCC_OscConfig+0x4f8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a8a      	ldr	r2, [pc, #552]	; (8000c80 <HAL_RCC_OscConfig+0x4f8>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a5e:	f7ff fda9 	bl	80005b4 <HAL_GetTick>
 8000a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a64:	e008      	b.n	8000a78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a66:	f7ff fda5 	bl	80005b4 <HAL_GetTick>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	2b64      	cmp	r3, #100	; 0x64
 8000a72:	d901      	bls.n	8000a78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a74:	2303      	movs	r3, #3
 8000a76:	e0fd      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a78:	4b81      	ldr	r3, [pc, #516]	; (8000c80 <HAL_RCC_OscConfig+0x4f8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0f0      	beq.n	8000a66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d106      	bne.n	8000a9a <HAL_RCC_OscConfig+0x312>
 8000a8c:	4b7b      	ldr	r3, [pc, #492]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a8e:	6a1b      	ldr	r3, [r3, #32]
 8000a90:	4a7a      	ldr	r2, [pc, #488]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6213      	str	r3, [r2, #32]
 8000a98:	e02d      	b.n	8000af6 <HAL_RCC_OscConfig+0x36e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10c      	bne.n	8000abc <HAL_RCC_OscConfig+0x334>
 8000aa2:	4b76      	ldr	r3, [pc, #472]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	4a75      	ldr	r2, [pc, #468]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000aa8:	f023 0301 	bic.w	r3, r3, #1
 8000aac:	6213      	str	r3, [r2, #32]
 8000aae:	4b73      	ldr	r3, [pc, #460]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	4a72      	ldr	r2, [pc, #456]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ab4:	f023 0304 	bic.w	r3, r3, #4
 8000ab8:	6213      	str	r3, [r2, #32]
 8000aba:	e01c      	b.n	8000af6 <HAL_RCC_OscConfig+0x36e>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	2b05      	cmp	r3, #5
 8000ac2:	d10c      	bne.n	8000ade <HAL_RCC_OscConfig+0x356>
 8000ac4:	4b6d      	ldr	r3, [pc, #436]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ac6:	6a1b      	ldr	r3, [r3, #32]
 8000ac8:	4a6c      	ldr	r2, [pc, #432]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6213      	str	r3, [r2, #32]
 8000ad0:	4b6a      	ldr	r3, [pc, #424]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	4a69      	ldr	r2, [pc, #420]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6213      	str	r3, [r2, #32]
 8000adc:	e00b      	b.n	8000af6 <HAL_RCC_OscConfig+0x36e>
 8000ade:	4b67      	ldr	r3, [pc, #412]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ae0:	6a1b      	ldr	r3, [r3, #32]
 8000ae2:	4a66      	ldr	r2, [pc, #408]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ae4:	f023 0301 	bic.w	r3, r3, #1
 8000ae8:	6213      	str	r3, [r2, #32]
 8000aea:	4b64      	ldr	r3, [pc, #400]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000aec:	6a1b      	ldr	r3, [r3, #32]
 8000aee:	4a63      	ldr	r2, [pc, #396]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000af0:	f023 0304 	bic.w	r3, r3, #4
 8000af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d015      	beq.n	8000b2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000afe:	f7ff fd59 	bl	80005b4 <HAL_GetTick>
 8000b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b04:	e00a      	b.n	8000b1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b06:	f7ff fd55 	bl	80005b4 <HAL_GetTick>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d901      	bls.n	8000b1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	e0ab      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b1c:	4b57      	ldr	r3, [pc, #348]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0ee      	beq.n	8000b06 <HAL_RCC_OscConfig+0x37e>
 8000b28:	e014      	b.n	8000b54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b2a:	f7ff fd43 	bl	80005b4 <HAL_GetTick>
 8000b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b30:	e00a      	b.n	8000b48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f7ff fd3f 	bl	80005b4 <HAL_GetTick>
 8000b36:	4602      	mov	r2, r0
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d901      	bls.n	8000b48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b44:	2303      	movs	r3, #3
 8000b46:	e095      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b48:	4b4c      	ldr	r3, [pc, #304]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000b4a:	6a1b      	ldr	r3, [r3, #32]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1ee      	bne.n	8000b32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b54:	7dfb      	ldrb	r3, [r7, #23]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d105      	bne.n	8000b66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b5a:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	4a47      	ldr	r2, [pc, #284]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 8081 	beq.w	8000c72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b70:	4b42      	ldr	r3, [pc, #264]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 030c 	and.w	r3, r3, #12
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	d061      	beq.n	8000c40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d146      	bne.n	8000c12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b84:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <HAL_RCC_OscConfig+0x4fc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8a:	f7ff fd13 	bl	80005b4 <HAL_GetTick>
 8000b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b90:	e008      	b.n	8000ba4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b92:	f7ff fd0f 	bl	80005b4 <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d901      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e067      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ba4:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1f0      	bne.n	8000b92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb8:	d108      	bne.n	8000bcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bba:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	492d      	ldr	r1, [pc, #180]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bcc:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a19      	ldr	r1, [r3, #32]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	4927      	ldr	r1, [pc, #156]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000be0:	4313      	orrs	r3, r2
 8000be2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <HAL_RCC_OscConfig+0x4fc>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bea:	f7ff fce3 	bl	80005b4 <HAL_GetTick>
 8000bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bf0:	e008      	b.n	8000c04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bf2:	f7ff fcdf 	bl	80005b4 <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d901      	bls.n	8000c04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	e037      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0f0      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x46a>
 8000c10:	e02f      	b.n	8000c72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_RCC_OscConfig+0x4fc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c18:	f7ff fccc 	bl	80005b4 <HAL_GetTick>
 8000c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1e:	e008      	b.n	8000c32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c20:	f7ff fcc8 	bl	80005b4 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d901      	bls.n	8000c32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e020      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f0      	bne.n	8000c20 <HAL_RCC_OscConfig+0x498>
 8000c3e:	e018      	b.n	8000c72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d101      	bne.n	8000c4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e013      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d106      	bne.n	8000c6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d001      	beq.n	8000c72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e000      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40007000 	.word	0x40007000
 8000c84:	42420060 	.word	0x42420060

08000c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e0d0      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c9c:	4b6a      	ldr	r3, [pc, #424]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0307 	and.w	r3, r3, #7
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d910      	bls.n	8000ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000caa:	4b67      	ldr	r3, [pc, #412]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f023 0207 	bic.w	r2, r3, #7
 8000cb2:	4965      	ldr	r1, [pc, #404]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cba:	4b63      	ldr	r3, [pc, #396]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d001      	beq.n	8000ccc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e0b8      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d020      	beq.n	8000d1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d005      	beq.n	8000cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ce4:	4b59      	ldr	r3, [pc, #356]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	4a58      	ldr	r2, [pc, #352]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000cea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d005      	beq.n	8000d08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cfc:	4b53      	ldr	r3, [pc, #332]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	4a52      	ldr	r2, [pc, #328]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d08:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	494d      	ldr	r1, [pc, #308]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d040      	beq.n	8000da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d107      	bne.n	8000d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2e:	4b47      	ldr	r3, [pc, #284]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d115      	bne.n	8000d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e07f      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d107      	bne.n	8000d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d46:	4b41      	ldr	r3, [pc, #260]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d109      	bne.n	8000d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e073      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d56:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e06b      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d66:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f023 0203 	bic.w	r2, r3, #3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	4936      	ldr	r1, [pc, #216]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d74:	4313      	orrs	r3, r2
 8000d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d78:	f7ff fc1c 	bl	80005b4 <HAL_GetTick>
 8000d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d7e:	e00a      	b.n	8000d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d80:	f7ff fc18 	bl	80005b4 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e053      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 020c 	and.w	r2, r3, #12
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d1eb      	bne.n	8000d80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d210      	bcs.n	8000dd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 0207 	bic.w	r2, r3, #7
 8000dbe:	4922      	ldr	r1, [pc, #136]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d001      	beq.n	8000dd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e032      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d008      	beq.n	8000df6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	4916      	ldr	r1, [pc, #88]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000df2:	4313      	orrs	r3, r2
 8000df4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d009      	beq.n	8000e16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	490e      	ldr	r1, [pc, #56]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e16:	f000 f821 	bl	8000e5c <HAL_RCC_GetSysClockFreq>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	490a      	ldr	r1, [pc, #40]	; (8000e50 <HAL_RCC_ClockConfig+0x1c8>)
 8000e28:	5ccb      	ldrb	r3, [r1, r3]
 8000e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_RCC_ClockConfig+0x1cc>)
 8000e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_RCC_ClockConfig+0x1d0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff faf2 	bl	8000420 <HAL_InitTick>

  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40022000 	.word	0x40022000
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	08003cf8 	.word	0x08003cf8
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e5c:	b490      	push	{r4, r7}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e64:	1d3c      	adds	r4, r7, #4
 8000e66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e6c:	f240 2301 	movw	r3, #513	; 0x201
 8000e70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e86:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d002      	beq.n	8000e9c <HAL_RCC_GetSysClockFreq+0x40>
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d003      	beq.n	8000ea2 <HAL_RCC_GetSysClockFreq+0x46>
 8000e9a:	e02d      	b.n	8000ef8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e9e:	623b      	str	r3, [r7, #32]
      break;
 8000ea0:	e02d      	b.n	8000efe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	0c9b      	lsrs	r3, r3, #18
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eae:	4413      	add	r3, r2
 8000eb0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000eb4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	0c5b      	lsrs	r3, r3, #17
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ece:	4413      	add	r3, r2
 8000ed0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ed4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000eda:	fb02 f203 	mul.w	r2, r2, r3
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee6:	e004      	b.n	8000ef2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000eec:	fb02 f303 	mul.w	r3, r2, r3
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	623b      	str	r3, [r7, #32]
      break;
 8000ef6:	e002      	b.n	8000efe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000efa:	623b      	str	r3, [r7, #32]
      break;
 8000efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000efe:	6a3b      	ldr	r3, [r7, #32]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc90      	pop	{r4, r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	08003ce0 	.word	0x08003ce0
 8000f10:	40021000 	.word	0x40021000
 8000f14:	007a1200 	.word	0x007a1200
 8000f18:	003d0900 	.word	0x003d0900

08000f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <HAL_RCC_GetHCLKFreq+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000000 	.word	0x20000000

08000f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f34:	f7ff fff2 	bl	8000f1c <HAL_RCC_GetHCLKFreq>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	4903      	ldr	r1, [pc, #12]	; (8000f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f46:	5ccb      	ldrb	r3, [r1, r3]
 8000f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	08003d08 	.word	0x08003d08

08000f58 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	220f      	movs	r2, #15
 8000f66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_RCC_GetClockConfig+0x58>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0203 	and.w	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_RCC_GetClockConfig+0x58>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_RCC_GetClockConfig+0x58>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_RCC_GetClockConfig+0x58>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0207 	and.w	r2, r3, #7
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40022000 	.word	0x40022000

08000fb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <RCC_Delay+0x34>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <RCC_Delay+0x38>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	0a5b      	lsrs	r3, r3, #9
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000fd4:	bf00      	nop
  }
  while (Delay --);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1e5a      	subs	r2, r3, #1
 8000fda:	60fa      	str	r2, [r7, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f9      	bne.n	8000fd4 <RCC_Delay+0x1c>
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	10624dd3 	.word	0x10624dd3

08000ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e041      	b.n	800108a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d106      	bne.n	8001020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f839 	bl	8001092 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2202      	movs	r2, #2
 8001024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3304      	adds	r3, #4
 8001030:	4619      	mov	r1, r3
 8001032:	4610      	mov	r0, r2
 8001034:	f000 f9b4 	bl	80013a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d001      	beq.n	80010bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e03a      	b.n	8001132 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2202      	movs	r2, #2
 80010c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0201 	orr.w	r2, r2, #1
 80010d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a18      	ldr	r2, [pc, #96]	; (800113c <HAL_TIM_Base_Start_IT+0x98>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00e      	beq.n	80010fc <HAL_TIM_Base_Start_IT+0x58>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e6:	d009      	beq.n	80010fc <HAL_TIM_Base_Start_IT+0x58>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_TIM_Base_Start_IT+0x9c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d004      	beq.n	80010fc <HAL_TIM_Base_Start_IT+0x58>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a13      	ldr	r2, [pc, #76]	; (8001144 <HAL_TIM_Base_Start_IT+0xa0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d111      	bne.n	8001120 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b06      	cmp	r3, #6
 800110c:	d010      	beq.n	8001130 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800111e:	e007      	b.n	8001130 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	40012c00 	.word	0x40012c00
 8001140:	40000400 	.word	0x40000400
 8001144:	40000800 	.word	0x40000800

08001148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b02      	cmp	r3, #2
 800115c:	d122      	bne.n	80011a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b02      	cmp	r3, #2
 800116a:	d11b      	bne.n	80011a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f06f 0202 	mvn.w	r2, #2
 8001174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f8ed 	bl	800136a <HAL_TIM_IC_CaptureCallback>
 8001190:	e005      	b.n	800119e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f8e0 	bl	8001358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f8ef 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d122      	bne.n	80011f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d11b      	bne.n	80011f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f06f 0204 	mvn.w	r2, #4
 80011c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2202      	movs	r2, #2
 80011ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f8c3 	bl	800136a <HAL_TIM_IC_CaptureCallback>
 80011e4:	e005      	b.n	80011f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f8b6 	bl	8001358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f8c5 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b08      	cmp	r3, #8
 8001204:	d122      	bne.n	800124c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b08      	cmp	r3, #8
 8001212:	d11b      	bne.n	800124c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f06f 0208 	mvn.w	r2, #8
 800121c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2204      	movs	r2, #4
 8001222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f899 	bl	800136a <HAL_TIM_IC_CaptureCallback>
 8001238:	e005      	b.n	8001246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f88c 	bl	8001358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f89b 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b10      	cmp	r3, #16
 8001258:	d122      	bne.n	80012a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b10      	cmp	r3, #16
 8001266:	d11b      	bne.n	80012a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f06f 0210 	mvn.w	r2, #16
 8001270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2208      	movs	r2, #8
 8001276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f86f 	bl	800136a <HAL_TIM_IC_CaptureCallback>
 800128c:	e005      	b.n	800129a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f862 	bl	8001358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f871 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10e      	bne.n	80012cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d107      	bne.n	80012cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f06f 0201 	mvn.w	r2, #1
 80012c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff f85a 	bl	8000380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	2b80      	cmp	r3, #128	; 0x80
 80012d8:	d10e      	bne.n	80012f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e4:	2b80      	cmp	r3, #128	; 0x80
 80012e6:	d107      	bne.n	80012f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80012f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f8bf 	bl	8001476 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001302:	2b40      	cmp	r3, #64	; 0x40
 8001304:	d10e      	bne.n	8001324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001310:	2b40      	cmp	r3, #64	; 0x40
 8001312:	d107      	bne.n	8001324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800131c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f835 	bl	800138e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	2b20      	cmp	r3, #32
 8001330:	d10e      	bne.n	8001350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	2b20      	cmp	r3, #32
 800133e:	d107      	bne.n	8001350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f06f 0220 	mvn.w	r2, #32
 8001348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f88a 	bl	8001464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a29      	ldr	r2, [pc, #164]	; (8001458 <TIM_Base_SetConfig+0xb8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d00b      	beq.n	80013d0 <TIM_Base_SetConfig+0x30>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013be:	d007      	beq.n	80013d0 <TIM_Base_SetConfig+0x30>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a26      	ldr	r2, [pc, #152]	; (800145c <TIM_Base_SetConfig+0xbc>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d003      	beq.n	80013d0 <TIM_Base_SetConfig+0x30>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a25      	ldr	r2, [pc, #148]	; (8001460 <TIM_Base_SetConfig+0xc0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d108      	bne.n	80013e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <TIM_Base_SetConfig+0xb8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00b      	beq.n	8001402 <TIM_Base_SetConfig+0x62>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f0:	d007      	beq.n	8001402 <TIM_Base_SetConfig+0x62>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <TIM_Base_SetConfig+0xbc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d003      	beq.n	8001402 <TIM_Base_SetConfig+0x62>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a18      	ldr	r2, [pc, #96]	; (8001460 <TIM_Base_SetConfig+0xc0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d108      	bne.n	8001414 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4313      	orrs	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <TIM_Base_SetConfig+0xb8>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d103      	bne.n	8001448 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	615a      	str	r2, [r3, #20]
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40012c00 	.word	0x40012c00
 800145c:	40000400 	.word	0x40000400
 8001460:	40000800 	.word	0x40000800

08001464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149a:	2b84      	cmp	r3, #132	; 0x84
 800149c:	d005      	beq.n	80014aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800149e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	3303      	adds	r3, #3
 80014a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80014bc:	f3ef 8305 	mrs	r3, IPSR
 80014c0:	607b      	str	r3, [r7, #4]
  return(result);
 80014c2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf14      	ite	ne
 80014c8:	2301      	movne	r3, #1
 80014ca:	2300      	moveq	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80014dc:	f001 f9e8 	bl	80028b0 <vTaskStartScheduler>
  
  return osOK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80014e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e8:	b089      	sub	sp, #36	; 0x24
 80014ea:	af04      	add	r7, sp, #16
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d020      	beq.n	800153a <osThreadCreate+0x54>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d01c      	beq.n	800153a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685c      	ldr	r4, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681d      	ldr	r5, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691e      	ldr	r6, [r3, #16]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ffb8 	bl	8001488 <makeFreeRtosPriority>
 8001518:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001522:	9202      	str	r2, [sp, #8]
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	9100      	str	r1, [sp, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	4632      	mov	r2, r6
 800152c:	4629      	mov	r1, r5
 800152e:	4620      	mov	r0, r4
 8001530:	f000 ffe8 	bl	8002504 <xTaskCreateStatic>
 8001534:	4603      	mov	r3, r0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	e01c      	b.n	8001574 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685c      	ldr	r4, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001546:	b29e      	uxth	r6, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff9a 	bl	8001488 <makeFreeRtosPriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	9200      	str	r2, [sp, #0]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	4632      	mov	r2, r6
 8001562:	4629      	mov	r1, r5
 8001564:	4620      	mov	r0, r4
 8001566:	f001 f829 	bl	80025bc <xTaskCreate>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d001      	beq.n	8001574 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001570:	2300      	movs	r3, #0
 8001572:	e000      	b.n	8001576 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001574:	68fb      	ldr	r3, [r7, #12]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800157e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <osDelay+0x16>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	e000      	b.n	8001596 <osDelay+0x18>
 8001594:	2301      	movs	r3, #1
 8001596:	4618      	mov	r0, r3
 8001598:	f001 f956 	bl	8002848 <vTaskDelay>
  
  return osOK;
 800159c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	3303      	adds	r3, #3
 80015b4:	f023 0303 	bic.w	r3, r3, #3
 80015b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80015ba:	2014      	movs	r0, #20
 80015bc:	f002 f88e 	bl	80036dc <pvPortMalloc>
 80015c0:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d046      	beq.n	8001656 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 f87b 	bl	80036dc <pvPortMalloc>
 80015e6:	4602      	mov	r2, r0
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d02b      	beq.n	800164c <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 f86c 	bl	80036dc <pvPortMalloc>
 8001604:	4602      	mov	r2, r0
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d011      	beq.n	8001636 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	e008      	b.n	800162a <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4413      	add	r3, r2
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	3301      	adds	r3, #1
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d3f1      	bcc.n	8001618 <osPoolCreate+0x72>
 8001634:	e00f      	b.n	8001656 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	f002 f912 	bl	8003864 <vPortFree>
        vPortFree(thePool);
 8001640:	6978      	ldr	r0, [r7, #20]
 8001642:	f002 f90f 	bl	8003864 <vPortFree>
        thePool = NULL;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e004      	b.n	8001656 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800164c:	6978      	ldr	r0, [r7, #20]
 800164e:	f002 f909 	bl	8003864 <vPortFree>
      thePool = NULL;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8001656:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8001670:	f7ff ff21 	bl	80014b6 <inHandlerMode>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00e      	beq.n	8001698 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800167a:	f3ef 8211 	mrs	r2, BASEPRI
 800167e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001682:	f383 8811 	msr	BASEPRI, r3
 8001686:	f3bf 8f6f 	isb	sy
 800168a:	f3bf 8f4f 	dsb	sy
 800168e:	617a      	str	r2, [r7, #20]
 8001690:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001692:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
 8001696:	e001      	b.n	800169c <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8001698:	f001 ff20 	bl	80034dc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	e029      	b.n	80016f6 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6892      	ldr	r2, [r2, #8]
 80016ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80016b2:	fb02 f201 	mul.w	r2, r2, r1
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d113      	bne.n	80016f0 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	4413      	add	r3, r2
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	440b      	add	r3, r1
 80016e6:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	611a      	str	r2, [r3, #16]
      break;
 80016ee:	e007      	b.n	8001700 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	3301      	adds	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d3d0      	bcc.n	80016a2 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8001700:	f7ff fed9 	bl	80014b6 <inHandlerMode>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d005      	beq.n	8001716 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001714:	e001      	b.n	800171a <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8001716:	f001 ff11 	bl	800353c <vPortExitCritical>
  }
  
  return p;
 800171a:	6a3b      	ldr	r3, [r7, #32]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3728      	adds	r7, #40	; 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <osPoolFree+0x14>
    return osErrorParameter;
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	e030      	b.n	800179a <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <osPoolFree+0x1e>
    return osErrorParameter;
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	e02b      	b.n	800179a <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d201      	bcs.n	8001750 <osPoolFree+0x2c>
    return osErrorParameter;
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	e024      	b.n	800179a <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	1a9b      	subs	r3, r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	fbb3 f1f2 	udiv	r1, r3, r2
 8001764:	fb02 f201 	mul.w	r2, r2, r1
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <osPoolFree+0x4e>
    return osErrorParameter;
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	e013      	b.n	800179a <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	fbb2 f3f3 	udiv	r3, r2, r3
 800177c:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d301      	bcc.n	800178c <osPoolFree+0x68>
    return osErrorParameter;
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	e006      	b.n	800179a <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689c      	ldr	r4, [r3, #8]
 80017c2:	200c      	movs	r0, #12
 80017c4:	f001 ff8a 	bl	80036dc <pvPortMalloc>
 80017c8:	4603      	mov	r3, r0
 80017ca:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <osMailCreate+0x36>
    return NULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e038      	b.n	800184c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	681c      	ldr	r4, [r3, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	2104      	movs	r1, #4
 80017f2:	f000 fa23 	bl	8001c3c <xQueueGenericCreate>
 80017f6:	4603      	mov	r3, r0
 80017f8:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d107      	bne.n	8001816 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f002 f829 	bl	8003864 <vPortFree>
    return NULL;
 8001812:	2300      	movs	r3, #0
 8001814:	e01a      	b.n	800184c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	681c      	ldr	r4, [r3, #0]
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fec0 	bl	80015a6 <osPoolCreate>
 8001826:	4603      	mov	r3, r0
 8001828:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d107      	bne.n	8001846 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f002 f811 	bl	8003864 <vPortFree>
    return NULL;
 8001842:	2300      	movs	r3, #0
 8001844:	e002      	b.n	800184c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800184c:	4618      	mov	r0, r3
 800184e:	371c      	adds	r7, #28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <osMailAlloc+0x14>
    return NULL;
 8001864:	2300      	movs	r3, #0
 8001866:	e006      	b.n	8001876 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fef7 	bl	8001660 <osPoolAlloc>
 8001872:	60f8      	str	r0, [r7, #12]
  
  return p;
 8001874:	68fb      	ldr	r3, [r7, #12]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <osMailPut+0x14>
    return osErrorParameter;
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	e02c      	b.n	80018ee <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8001898:	f7ff fe0d 	bl	80014b6 <inHandlerMode>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d018      	beq.n	80018d4 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6858      	ldr	r0, [r3, #4]
 80018a6:	f107 020c 	add.w	r2, r7, #12
 80018aa:	4639      	mov	r1, r7
 80018ac:	2300      	movs	r3, #0
 80018ae:	f000 fb21 	bl	8001ef4 <xQueueGenericSendFromISR>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d001      	beq.n	80018bc <osMailPut+0x3c>
      return osErrorOS;
 80018b8:	23ff      	movs	r3, #255	; 0xff
 80018ba:	e018      	b.n	80018ee <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d014      	beq.n	80018ec <osMailPut+0x6c>
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <osMailPut+0x78>)
 80018c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f3bf 8f4f 	dsb	sy
 80018ce:	f3bf 8f6f 	isb	sy
 80018d2:	e00b      	b.n	80018ec <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6858      	ldr	r0, [r3, #4]
 80018d8:	4639      	mov	r1, r7
 80018da:	2300      	movs	r3, #0
 80018dc:	2200      	movs	r2, #0
 80018de:	f000 fa0b 	bl	8001cf8 <xQueueGenericSend>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d001      	beq.n	80018ec <osMailPut+0x6c>
      return osErrorOS;
 80018e8:	23ff      	movs	r3, #255	; 0xff
 80018ea:	e000      	b.n	80018ee <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000ed04 	.word	0xe000ed04

080018fc <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b08b      	sub	sp, #44	; 0x2c
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10a      	bne.n	8001928 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	617b      	str	r3, [r7, #20]
    return event;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	461c      	mov	r4, r3
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001926:	e056      	b.n	80019d6 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001936:	d103      	bne.n	8001940 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
 800193e:	e009      	b.n	8001954 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <osMailGet+0x58>
      ticks = 1;
 8001950:	2301      	movs	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8001954:	f7ff fdaf 	bl	80014b6 <inHandlerMode>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d01d      	beq.n	800199a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	6858      	ldr	r0, [r3, #4]
 8001962:	f107 0220 	add.w	r2, r7, #32
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	3304      	adds	r3, #4
 800196c:	4619      	mov	r1, r3
 800196e:	f000 fc39 	bl	80021e4 <xQueueReceiveFromISR>
 8001972:	4603      	mov	r3, r0
 8001974:	2b01      	cmp	r3, #1
 8001976:	d102      	bne.n	800197e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8001978:	2320      	movs	r3, #32
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e001      	b.n	8001982 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d01e      	beq.n	80019c6 <osMailGet+0xca>
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <osMailGet+0xe4>)
 800198a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f3bf 8f4f 	dsb	sy
 8001994:	f3bf 8f6f 	isb	sy
 8001998:	e015      	b.n	80019c6 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	6858      	ldr	r0, [r3, #4]
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	3304      	adds	r3, #4
 80019a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a6:	4619      	mov	r1, r3
 80019a8:	f000 fb3c 	bl	8002024 <xQueueReceive>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d102      	bne.n	80019b8 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80019b2:	2320      	movs	r3, #32
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	e006      	b.n	80019c6 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <osMailGet+0xc6>
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <osMailGet+0xc8>
 80019c2:	2340      	movs	r3, #64	; 0x40
 80019c4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	461c      	mov	r4, r3
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	372c      	adds	r7, #44	; 0x2c
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd90      	pop	{r4, r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000ed04 	.word	0xe000ed04

080019e4 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <osMailFree+0x14>
    return osErrorParameter;
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	e006      	b.n	8001a06 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	6839      	ldr	r1, [r7, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fe90 	bl	8001724 <osPoolFree>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f103 0208 	add.w	r2, r3, #8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f04f 32ff 	mov.w	r2, #4294967295
 8001a26:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f103 0208 	add.w	r2, r3, #8
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f103 0208 	add.w	r2, r3, #8
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	601a      	str	r2, [r3, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac0:	d103      	bne.n	8001aca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e00c      	b.n	8001ae4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3308      	adds	r3, #8
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e002      	b.n	8001ad8 <vListInsert+0x2e>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d2f6      	bcs.n	8001ad2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	601a      	str	r2, [r3, #0]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6892      	ldr	r2, [r2, #8]
 8001b30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6852      	ldr	r2, [r2, #4]
 8001b3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d103      	bne.n	8001b4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10a      	bne.n	8001b96 <xQueueGenericReset+0x2a>
	__asm volatile
 8001b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b84:	f383 8811 	msr	BASEPRI, r3
 8001b88:	f3bf 8f6f 	isb	sy
 8001b8c:	f3bf 8f4f 	dsb	sy
 8001b90:	60bb      	str	r3, [r7, #8]
}
 8001b92:	bf00      	nop
 8001b94:	e7fe      	b.n	8001b94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001b96:	f001 fca1 	bl	80034dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	441a      	add	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bcc:	fb01 f303 	mul.w	r3, r1, r3
 8001bd0:	441a      	add	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	22ff      	movs	r2, #255	; 0xff
 8001bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	22ff      	movs	r2, #255	; 0xff
 8001be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d114      	bne.n	8001c16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01a      	beq.n	8001c2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3310      	adds	r3, #16
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 f8b1 	bl	8002d60 <xTaskRemoveFromEventList>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d012      	beq.n	8001c2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <xQueueGenericReset+0xcc>)
 8001c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	f3bf 8f4f 	dsb	sy
 8001c10:	f3bf 8f6f 	isb	sy
 8001c14:	e009      	b.n	8001c2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3310      	adds	r3, #16
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fef7 	bl	8001a0e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3324      	adds	r3, #36	; 0x24
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fef2 	bl	8001a0e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c2a:	f001 fc87 	bl	800353c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	e000ed04 	.word	0xe000ed04

08001c3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10a      	bne.n	8001c66 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c54:	f383 8811 	msr	BASEPRI, r3
 8001c58:	f3bf 8f6f 	isb	sy
 8001c5c:	f3bf 8f4f 	dsb	sy
 8001c60:	613b      	str	r3, [r7, #16]
}
 8001c62:	bf00      	nop
 8001c64:	e7fe      	b.n	8001c64 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	e004      	b.n	8001c7c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	3348      	adds	r3, #72	; 0x48
 8001c80:	4618      	mov	r0, r3
 8001c82:	f001 fd2b 	bl	80036dc <pvPortMalloc>
 8001c86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00f      	beq.n	8001cae <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	3348      	adds	r3, #72	; 0x48
 8001c92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c9c:	79fa      	ldrb	r2, [r7, #7]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 f805 	bl	8001cb8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001cae:	69bb      	ldr	r3, [r7, #24]
	}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d103      	bne.n	8001cd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	e002      	b.n	8001cda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	69b8      	ldr	r0, [r7, #24]
 8001cea:	f7ff ff3f 	bl	8001b6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08e      	sub	sp, #56	; 0x38
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d06:	2300      	movs	r3, #0
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10a      	bne.n	8001d2a <xQueueGenericSend+0x32>
	__asm volatile
 8001d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d18:	f383 8811 	msr	BASEPRI, r3
 8001d1c:	f3bf 8f6f 	isb	sy
 8001d20:	f3bf 8f4f 	dsb	sy
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001d26:	bf00      	nop
 8001d28:	e7fe      	b.n	8001d28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d103      	bne.n	8001d38 <xQueueGenericSend+0x40>
 8001d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <xQueueGenericSend+0x44>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <xQueueGenericSend+0x46>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10a      	bne.n	8001d58 <xQueueGenericSend+0x60>
	__asm volatile
 8001d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d46:	f383 8811 	msr	BASEPRI, r3
 8001d4a:	f3bf 8f6f 	isb	sy
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001d54:	bf00      	nop
 8001d56:	e7fe      	b.n	8001d56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d103      	bne.n	8001d66 <xQueueGenericSend+0x6e>
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <xQueueGenericSend+0x72>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <xQueueGenericSend+0x74>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <xQueueGenericSend+0x8e>
	__asm volatile
 8001d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d74:	f383 8811 	msr	BASEPRI, r3
 8001d78:	f3bf 8f6f 	isb	sy
 8001d7c:	f3bf 8f4f 	dsb	sy
 8001d80:	623b      	str	r3, [r7, #32]
}
 8001d82:	bf00      	nop
 8001d84:	e7fe      	b.n	8001d84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d86:	f001 f9af 	bl	80030e8 <xTaskGetSchedulerState>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <xQueueGenericSend+0x9e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <xQueueGenericSend+0xa2>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <xQueueGenericSend+0xa4>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10a      	bne.n	8001db6 <xQueueGenericSend+0xbe>
	__asm volatile
 8001da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da4:	f383 8811 	msr	BASEPRI, r3
 8001da8:	f3bf 8f6f 	isb	sy
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	61fb      	str	r3, [r7, #28]
}
 8001db2:	bf00      	nop
 8001db4:	e7fe      	b.n	8001db4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001db6:	f001 fb91 	bl	80034dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d302      	bcc.n	8001dcc <xQueueGenericSend+0xd4>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d129      	bne.n	8001e20 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	68b9      	ldr	r1, [r7, #8]
 8001dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dd2:	f000 fa87 	bl	80022e4 <prvCopyDataToQueue>
 8001dd6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d010      	beq.n	8001e02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de2:	3324      	adds	r3, #36	; 0x24
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 ffbb 	bl	8002d60 <xTaskRemoveFromEventList>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001df0:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <xQueueGenericSend+0x1f8>)
 8001df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	f3bf 8f4f 	dsb	sy
 8001dfc:	f3bf 8f6f 	isb	sy
 8001e00:	e00a      	b.n	8001e18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e08:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <xQueueGenericSend+0x1f8>)
 8001e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f3bf 8f4f 	dsb	sy
 8001e14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e18:	f001 fb90 	bl	800353c <vPortExitCritical>
				return pdPASS;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e063      	b.n	8001ee8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d103      	bne.n	8001e2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e26:	f001 fb89 	bl	800353c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e05c      	b.n	8001ee8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d106      	bne.n	8001e42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fff3 	bl	8002e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e42:	f001 fb7b 	bl	800353c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e46:	f000 fd9d 	bl	8002984 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e4a:	f001 fb47 	bl	80034dc <vPortEnterCritical>
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5a:	d103      	bne.n	8001e64 <xQueueGenericSend+0x16c>
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d103      	bne.n	8001e7a <xQueueGenericSend+0x182>
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e7a:	f001 fb5f 	bl	800353c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e7e:	1d3a      	adds	r2, r7, #4
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 ffe2 	bl	8002e50 <xTaskCheckForTimeOut>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d124      	bne.n	8001edc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e94:	f000 fb1e 	bl	80024d4 <prvIsQueueFull>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d018      	beq.n	8001ed0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea0:	3310      	adds	r3, #16
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 ff36 	bl	8002d18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eae:	f000 faa9 	bl	8002404 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001eb2:	f000 fd75 	bl	80029a0 <xTaskResumeAll>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f47f af7c 	bne.w	8001db6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <xQueueGenericSend+0x1f8>)
 8001ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f3bf 8f4f 	dsb	sy
 8001eca:	f3bf 8f6f 	isb	sy
 8001ece:	e772      	b.n	8001db6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ed2:	f000 fa97 	bl	8002404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ed6:	f000 fd63 	bl	80029a0 <xTaskResumeAll>
 8001eda:	e76c      	b.n	8001db6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ede:	f000 fa91 	bl	8002404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ee2:	f000 fd5d 	bl	80029a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001ee6:	2300      	movs	r3, #0
		}
	}
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3738      	adds	r7, #56	; 0x38
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	e000ed04 	.word	0xe000ed04

08001ef4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08e      	sub	sp, #56	; 0x38
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10a      	bne.n	8001f22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f10:	f383 8811 	msr	BASEPRI, r3
 8001f14:	f3bf 8f6f 	isb	sy
 8001f18:	f3bf 8f4f 	dsb	sy
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f1e:	bf00      	nop
 8001f20:	e7fe      	b.n	8001f20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d103      	bne.n	8001f30 <xQueueGenericSendFromISR+0x3c>
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <xQueueGenericSendFromISR+0x40>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <xQueueGenericSendFromISR+0x42>
 8001f34:	2300      	movs	r3, #0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10a      	bne.n	8001f50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3e:	f383 8811 	msr	BASEPRI, r3
 8001f42:	f3bf 8f6f 	isb	sy
 8001f46:	f3bf 8f4f 	dsb	sy
 8001f4a:	623b      	str	r3, [r7, #32]
}
 8001f4c:	bf00      	nop
 8001f4e:	e7fe      	b.n	8001f4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d103      	bne.n	8001f5e <xQueueGenericSendFromISR+0x6a>
 8001f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <xQueueGenericSendFromISR+0x6e>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <xQueueGenericSendFromISR+0x70>
 8001f62:	2300      	movs	r3, #0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10a      	bne.n	8001f7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6c:	f383 8811 	msr	BASEPRI, r3
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	61fb      	str	r3, [r7, #28]
}
 8001f7a:	bf00      	nop
 8001f7c:	e7fe      	b.n	8001f7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f7e:	f001 fb6f 	bl	8003660 <vPortValidateInterruptPriority>
	__asm volatile
 8001f82:	f3ef 8211 	mrs	r2, BASEPRI
 8001f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8a:	f383 8811 	msr	BASEPRI, r3
 8001f8e:	f3bf 8f6f 	isb	sy
 8001f92:	f3bf 8f4f 	dsb	sy
 8001f96:	61ba      	str	r2, [r7, #24]
 8001f98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8001f9a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d302      	bcc.n	8001fb0 <xQueueGenericSendFromISR+0xbc>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d12c      	bne.n	800200a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fc0:	f000 f990 	bl	80022e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001fc4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d112      	bne.n	8001ff4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d016      	beq.n	8002004 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd8:	3324      	adds	r3, #36	; 0x24
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fec0 	bl	8002d60 <xTaskRemoveFromEventList>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00e      	beq.n	8002004 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00b      	beq.n	8002004 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e007      	b.n	8002004 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001ff4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	b25a      	sxtb	r2, r3
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002004:	2301      	movs	r3, #1
 8002006:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002008:	e001      	b.n	800200e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800200a:	2300      	movs	r3, #0
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f383 8811 	msr	BASEPRI, r3
}
 8002018:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800201c:	4618      	mov	r0, r3
 800201e:	3738      	adds	r7, #56	; 0x38
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08c      	sub	sp, #48	; 0x30
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002030:	2300      	movs	r3, #0
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10a      	bne.n	8002054 <xQueueReceive+0x30>
	__asm volatile
 800203e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002042:	f383 8811 	msr	BASEPRI, r3
 8002046:	f3bf 8f6f 	isb	sy
 800204a:	f3bf 8f4f 	dsb	sy
 800204e:	623b      	str	r3, [r7, #32]
}
 8002050:	bf00      	nop
 8002052:	e7fe      	b.n	8002052 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <xQueueReceive+0x3e>
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <xQueueReceive+0x42>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <xQueueReceive+0x44>
 8002066:	2300      	movs	r3, #0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <xQueueReceive+0x5e>
	__asm volatile
 800206c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002070:	f383 8811 	msr	BASEPRI, r3
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	61fb      	str	r3, [r7, #28]
}
 800207e:	bf00      	nop
 8002080:	e7fe      	b.n	8002080 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002082:	f001 f831 	bl	80030e8 <xTaskGetSchedulerState>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <xQueueReceive+0x6e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <xQueueReceive+0x72>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <xQueueReceive+0x74>
 8002096:	2300      	movs	r3, #0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10a      	bne.n	80020b2 <xQueueReceive+0x8e>
	__asm volatile
 800209c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	61bb      	str	r3, [r7, #24]
}
 80020ae:	bf00      	nop
 80020b0:	e7fe      	b.n	80020b0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80020b2:	f001 fa13 	bl	80034dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01f      	beq.n	8002102 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020c6:	f000 f977 	bl	80023b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00f      	beq.n	80020fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	3310      	adds	r3, #16
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fe3e 	bl	8002d60 <xTaskRemoveFromEventList>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <xQueueReceive+0x1bc>)
 80020ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f3bf 8f4f 	dsb	sy
 80020f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80020fa:	f001 fa1f 	bl	800353c <vPortExitCritical>
				return pdPASS;
 80020fe:	2301      	movs	r3, #1
 8002100:	e069      	b.n	80021d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002108:	f001 fa18 	bl	800353c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800210c:	2300      	movs	r3, #0
 800210e:	e062      	b.n	80021d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002116:	f107 0310 	add.w	r3, r7, #16
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fe82 	bl	8002e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002120:	2301      	movs	r3, #1
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002124:	f001 fa0a 	bl	800353c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002128:	f000 fc2c 	bl	8002984 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800212c:	f001 f9d6 	bl	80034dc <vPortEnterCritical>
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002136:	b25b      	sxtb	r3, r3
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d103      	bne.n	8002146 <xQueueReceive+0x122>
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800214c:	b25b      	sxtb	r3, r3
 800214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002152:	d103      	bne.n	800215c <xQueueReceive+0x138>
 8002154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800215c:	f001 f9ee 	bl	800353c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002160:	1d3a      	adds	r2, r7, #4
 8002162:	f107 0310 	add.w	r3, r7, #16
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fe71 	bl	8002e50 <xTaskCheckForTimeOut>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d123      	bne.n	80021bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002176:	f000 f997 	bl	80024a8 <prvIsQueueEmpty>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d017      	beq.n	80021b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	3324      	adds	r3, #36	; 0x24
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fdc5 	bl	8002d18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800218e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002190:	f000 f938 	bl	8002404 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002194:	f000 fc04 	bl	80029a0 <xTaskResumeAll>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d189      	bne.n	80020b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <xQueueReceive+0x1bc>)
 80021a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	f3bf 8f4f 	dsb	sy
 80021aa:	f3bf 8f6f 	isb	sy
 80021ae:	e780      	b.n	80020b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80021b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021b2:	f000 f927 	bl	8002404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021b6:	f000 fbf3 	bl	80029a0 <xTaskResumeAll>
 80021ba:	e77a      	b.n	80020b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80021bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021be:	f000 f921 	bl	8002404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021c2:	f000 fbed 	bl	80029a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021c8:	f000 f96e 	bl	80024a8 <prvIsQueueEmpty>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f43f af6f 	beq.w	80020b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80021d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3730      	adds	r7, #48	; 0x30
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	e000ed04 	.word	0xe000ed04

080021e4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08e      	sub	sp, #56	; 0x38
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10a      	bne.n	8002210 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80021fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fe:	f383 8811 	msr	BASEPRI, r3
 8002202:	f3bf 8f6f 	isb	sy
 8002206:	f3bf 8f4f 	dsb	sy
 800220a:	623b      	str	r3, [r7, #32]
}
 800220c:	bf00      	nop
 800220e:	e7fe      	b.n	800220e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <xQueueReceiveFromISR+0x3a>
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <xQueueReceiveFromISR+0x3e>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <xQueueReceiveFromISR+0x40>
 8002222:	2300      	movs	r3, #0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10a      	bne.n	800223e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800222c:	f383 8811 	msr	BASEPRI, r3
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	61fb      	str	r3, [r7, #28]
}
 800223a:	bf00      	nop
 800223c:	e7fe      	b.n	800223c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800223e:	f001 fa0f 	bl	8003660 <vPortValidateInterruptPriority>
	__asm volatile
 8002242:	f3ef 8211 	mrs	r2, BASEPRI
 8002246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224a:	f383 8811 	msr	BASEPRI, r3
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	61ba      	str	r2, [r7, #24]
 8002258:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800225a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	d02f      	beq.n	80022ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002278:	f000 f89e 	bl	80023b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002284:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d112      	bne.n	80022b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d016      	beq.n	80022c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	3310      	adds	r3, #16
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fd60 	bl	8002d60 <xTaskRemoveFromEventList>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00e      	beq.n	80022c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00b      	beq.n	80022c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e007      	b.n	80022c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80022b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	b25a      	sxtb	r2, r3
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80022c4:	2301      	movs	r3, #1
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
 80022c8:	e001      	b.n	80022ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	637b      	str	r3, [r7, #52]	; 0x34
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f383 8811 	msr	BASEPRI, r3
}
 80022d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3738      	adds	r7, #56	; 0x38
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d14d      	bne.n	80023a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 ff08 	bl	8003124 <xTaskPriorityDisinherit>
 8002314:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	e043      	b.n	80023a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d119      	bne.n	8002358 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6898      	ldr	r0, [r3, #8]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	461a      	mov	r2, r3
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	f001 fbd2 	bl	8003ad8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	441a      	add	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d32b      	bcc.n	80023a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	e026      	b.n	80023a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68d8      	ldr	r0, [r3, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	461a      	mov	r2, r3
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	f001 fbb8 	bl	8003ad8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	425b      	negs	r3, r3
 8002372:	441a      	add	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d207      	bcs.n	8002394 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	425b      	negs	r3, r3
 800238e:	441a      	add	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d105      	bne.n	80023a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80023ae:	697b      	ldr	r3, [r7, #20]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d018      	beq.n	80023fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	441a      	add	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d303      	bcc.n	80023ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68d9      	ldr	r1, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	461a      	mov	r2, r3
 80023f6:	6838      	ldr	r0, [r7, #0]
 80023f8:	f001 fb6e 	bl	8003ad8 <memcpy>
	}
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800240c:	f001 f866 	bl	80034dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002416:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002418:	e011      	b.n	800243e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	2b00      	cmp	r3, #0
 8002420:	d012      	beq.n	8002448 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3324      	adds	r3, #36	; 0x24
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fc9a 	bl	8002d60 <xTaskRemoveFromEventList>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002432:	f000 fd6f 	bl	8002f14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	3b01      	subs	r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	dce9      	bgt.n	800241a <prvUnlockQueue+0x16>
 8002446:	e000      	b.n	800244a <prvUnlockQueue+0x46>
					break;
 8002448:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	22ff      	movs	r2, #255	; 0xff
 800244e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002452:	f001 f873 	bl	800353c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002456:	f001 f841 	bl	80034dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002460:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002462:	e011      	b.n	8002488 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d012      	beq.n	8002492 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3310      	adds	r3, #16
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fc75 	bl	8002d60 <xTaskRemoveFromEventList>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800247c:	f000 fd4a 	bl	8002f14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002480:	7bbb      	ldrb	r3, [r7, #14]
 8002482:	3b01      	subs	r3, #1
 8002484:	b2db      	uxtb	r3, r3
 8002486:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800248c:	2b00      	cmp	r3, #0
 800248e:	dce9      	bgt.n	8002464 <prvUnlockQueue+0x60>
 8002490:	e000      	b.n	8002494 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002492:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	22ff      	movs	r2, #255	; 0xff
 8002498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800249c:	f001 f84e 	bl	800353c <vPortExitCritical>
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024b0:	f001 f814 	bl	80034dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80024bc:	2301      	movs	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e001      	b.n	80024c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024c6:	f001 f839 	bl	800353c <vPortExitCritical>

	return xReturn;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024dc:	f000 fffe 	bl	80034dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d102      	bne.n	80024f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80024ec:	2301      	movs	r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	e001      	b.n	80024f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024f6:	f001 f821 	bl	800353c <vPortExitCritical>

	return xReturn;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08e      	sub	sp, #56	; 0x38
 8002508:	af04      	add	r7, sp, #16
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	623b      	str	r3, [r7, #32]
}
 800252a:	bf00      	nop
 800252c:	e7fe      	b.n	800252c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <xTaskCreateStatic+0x46>
	__asm volatile
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	61fb      	str	r3, [r7, #28]
}
 8002546:	bf00      	nop
 8002548:	e7fe      	b.n	8002548 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800254a:	23b4      	movs	r3, #180	; 0xb4
 800254c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2bb4      	cmp	r3, #180	; 0xb4
 8002552:	d00a      	beq.n	800256a <xTaskCreateStatic+0x66>
	__asm volatile
 8002554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	f3bf 8f6f 	isb	sy
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	61bb      	str	r3, [r7, #24]
}
 8002566:	bf00      	nop
 8002568:	e7fe      	b.n	8002568 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01e      	beq.n	80025ae <xTaskCreateStatic+0xaa>
 8002570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002572:	2b00      	cmp	r3, #0
 8002574:	d01b      	beq.n	80025ae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800257e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	2202      	movs	r2, #2
 8002584:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002588:	2300      	movs	r3, #0
 800258a:	9303      	str	r3, [sp, #12]
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	9302      	str	r3, [sp, #8]
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f851 	bl	8002648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025a8:	f000 f8e4 	bl	8002774 <prvAddNewTaskToReadyList>
 80025ac:	e001      	b.n	80025b2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80025b2:	697b      	ldr	r3, [r7, #20]
	}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3728      	adds	r7, #40	; 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08c      	sub	sp, #48	; 0x30
 80025c0:	af04      	add	r7, sp, #16
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 f883 	bl	80036dc <pvPortMalloc>
 80025d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00e      	beq.n	80025fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80025de:	20b4      	movs	r0, #180	; 0xb4
 80025e0:	f001 f87c 	bl	80036dc <pvPortMalloc>
 80025e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
 80025f2:	e005      	b.n	8002600 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80025f4:	6978      	ldr	r0, [r7, #20]
 80025f6:	f001 f935 	bl	8003864 <vPortFree>
 80025fa:	e001      	b.n	8002600 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d017      	beq.n	8002636 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800260e:	88fa      	ldrh	r2, [r7, #6]
 8002610:	2300      	movs	r3, #0
 8002612:	9303      	str	r3, [sp, #12]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	9302      	str	r3, [sp, #8]
 8002618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f80f 	bl	8002648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f000 f8a2 	bl	8002774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002630:	2301      	movs	r3, #1
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	e002      	b.n	800263c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002636:	f04f 33ff 	mov.w	r3, #4294967295
 800263a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800263c:	69bb      	ldr	r3, [r7, #24]
	}
 800263e:	4618      	mov	r0, r3
 8002640:	3720      	adds	r7, #32
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002660:	3b01      	subs	r3, #1
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f023 0307 	bic.w	r3, r3, #7
 800266e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <prvInitialiseNewTask+0x48>
	__asm volatile
 800267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	617b      	str	r3, [r7, #20]
}
 800268c:	bf00      	nop
 800268e:	e7fe      	b.n	800268e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
 8002694:	e012      	b.n	80026bc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	7819      	ldrb	r1, [r3, #0]
 800269e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	4413      	add	r3, r2
 80026a4:	3334      	adds	r3, #52	; 0x34
 80026a6:	460a      	mov	r2, r1
 80026a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4413      	add	r3, r2
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3301      	adds	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b0f      	cmp	r3, #15
 80026c0:	d9e9      	bls.n	8002696 <prvInitialiseNewTask+0x4e>
 80026c2:	e000      	b.n	80026c6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80026c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	2b06      	cmp	r3, #6
 80026d2:	d901      	bls.n	80026d8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026d4:	2306      	movs	r3, #6
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	2200      	movs	r2, #0
 80026e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	3304      	adds	r3, #4
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff f9ac 	bl	8001a4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	3318      	adds	r3, #24
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff f9a7 	bl	8001a4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	f1c3 0207 	rsb	r2, r3, #7
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002712:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	2200      	movs	r2, #0
 8002718:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	2200      	movs	r2, #0
 8002720:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	334c      	adds	r3, #76	; 0x4c
 8002728:	2260      	movs	r2, #96	; 0x60
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f001 f9e1 	bl	8003af4 <memset>
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <prvInitialiseNewTask+0x120>)
 8002736:	651a      	str	r2, [r3, #80]	; 0x50
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <prvInitialiseNewTask+0x124>)
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <prvInitialiseNewTask+0x128>)
 8002742:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	68f9      	ldr	r1, [r7, #12]
 8002748:	69b8      	ldr	r0, [r7, #24]
 800274a:	f000 fdd7 	bl	80032fc <pxPortInitialiseStack>
 800274e:	4602      	mov	r2, r0
 8002750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002752:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800275e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002760:	bf00      	nop
 8002762:	3720      	adds	r7, #32
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	08003d30 	.word	0x08003d30
 800276c:	08003d50 	.word	0x08003d50
 8002770:	08003d10 	.word	0x08003d10

08002774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800277c:	f000 feae 	bl	80034dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <prvAddNewTaskToReadyList+0xb8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	4a29      	ldr	r2, [pc, #164]	; (800282c <prvAddNewTaskToReadyList+0xb8>)
 8002788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800278a:	4b29      	ldr	r3, [pc, #164]	; (8002830 <prvAddNewTaskToReadyList+0xbc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002792:	4a27      	ldr	r2, [pc, #156]	; (8002830 <prvAddNewTaskToReadyList+0xbc>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <prvAddNewTaskToReadyList+0xb8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d110      	bne.n	80027c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80027a0:	f000 fbdc 	bl	8002f5c <prvInitialiseTaskLists>
 80027a4:	e00d      	b.n	80027c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80027a6:	4b23      	ldr	r3, [pc, #140]	; (8002834 <prvAddNewTaskToReadyList+0xc0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <prvAddNewTaskToReadyList+0xbc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d802      	bhi.n	80027c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80027bc:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <prvAddNewTaskToReadyList+0xbc>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <prvAddNewTaskToReadyList+0xc4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <prvAddNewTaskToReadyList+0xc4>)
 80027ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	2201      	movs	r2, #1
 80027d2:	409a      	lsls	r2, r3
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <prvAddNewTaskToReadyList+0xc8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	4a18      	ldr	r2, [pc, #96]	; (800283c <prvAddNewTaskToReadyList+0xc8>)
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4a15      	ldr	r2, [pc, #84]	; (8002840 <prvAddNewTaskToReadyList+0xcc>)
 80027ec:	441a      	add	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3304      	adds	r3, #4
 80027f2:	4619      	mov	r1, r3
 80027f4:	4610      	mov	r0, r2
 80027f6:	f7ff f935 	bl	8001a64 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027fa:	f000 fe9f 	bl	800353c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <prvAddNewTaskToReadyList+0xc0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00e      	beq.n	8002824 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <prvAddNewTaskToReadyList+0xbc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	429a      	cmp	r2, r3
 8002812:	d207      	bcs.n	8002824 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <prvAddNewTaskToReadyList+0xd0>)
 8002816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000444 	.word	0x20000444
 8002830:	20000344 	.word	0x20000344
 8002834:	20000450 	.word	0x20000450
 8002838:	20000460 	.word	0x20000460
 800283c:	2000044c 	.word	0x2000044c
 8002840:	20000348 	.word	0x20000348
 8002844:	e000ed04 	.word	0xe000ed04

08002848 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d017      	beq.n	800288a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <vTaskDelay+0x60>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <vTaskDelay+0x30>
	__asm volatile
 8002862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	60bb      	str	r3, [r7, #8]
}
 8002874:	bf00      	nop
 8002876:	e7fe      	b.n	8002876 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002878:	f000 f884 	bl	8002984 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800287c:	2100      	movs	r1, #0
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fcd6 	bl	8003230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002884:	f000 f88c 	bl	80029a0 <xTaskResumeAll>
 8002888:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <vTaskDelay+0x64>)
 8002892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	2000046c 	.word	0x2000046c
 80028ac:	e000ed04 	.word	0xe000ed04

080028b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80028be:	463a      	mov	r2, r7
 80028c0:	1d39      	adds	r1, r7, #4
 80028c2:	f107 0308 	add.w	r3, r7, #8
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fc42 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80028cc:	6839      	ldr	r1, [r7, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	9202      	str	r2, [sp, #8]
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	2300      	movs	r3, #0
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2300      	movs	r3, #0
 80028dc:	460a      	mov	r2, r1
 80028de:	4921      	ldr	r1, [pc, #132]	; (8002964 <vTaskStartScheduler+0xb4>)
 80028e0:	4821      	ldr	r0, [pc, #132]	; (8002968 <vTaskStartScheduler+0xb8>)
 80028e2:	f7ff fe0f 	bl	8002504 <xTaskCreateStatic>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4a20      	ldr	r2, [pc, #128]	; (800296c <vTaskStartScheduler+0xbc>)
 80028ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80028ec:	4b1f      	ldr	r3, [pc, #124]	; (800296c <vTaskStartScheduler+0xbc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80028f4:	2301      	movs	r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	e001      	b.n	80028fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d11b      	bne.n	800293c <vTaskStartScheduler+0x8c>
	__asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	613b      	str	r3, [r7, #16]
}
 8002916:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002918:	4b15      	ldr	r3, [pc, #84]	; (8002970 <vTaskStartScheduler+0xc0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	334c      	adds	r3, #76	; 0x4c
 800291e:	4a15      	ldr	r2, [pc, #84]	; (8002974 <vTaskStartScheduler+0xc4>)
 8002920:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <vTaskStartScheduler+0xc8>)
 8002924:	f04f 32ff 	mov.w	r2, #4294967295
 8002928:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <vTaskStartScheduler+0xcc>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <vTaskStartScheduler+0xd0>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002936:	f000 fd5f 	bl	80033f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800293a:	e00e      	b.n	800295a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002942:	d10a      	bne.n	800295a <vTaskStartScheduler+0xaa>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	60fb      	str	r3, [r7, #12]
}
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <vTaskStartScheduler+0xa8>
}
 800295a:	bf00      	nop
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	08003cf0 	.word	0x08003cf0
 8002968:	08002f2d 	.word	0x08002f2d
 800296c:	20000468 	.word	0x20000468
 8002970:	20000344 	.word	0x20000344
 8002974:	20000010 	.word	0x20000010
 8002978:	20000464 	.word	0x20000464
 800297c:	20000450 	.word	0x20000450
 8002980:	20000448 	.word	0x20000448

08002984 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <vTaskSuspendAll+0x18>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	4a03      	ldr	r2, [pc, #12]	; (800299c <vTaskSuspendAll+0x18>)
 8002990:	6013      	str	r3, [r2, #0]
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	2000046c 	.word	0x2000046c

080029a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <xTaskResumeAll+0x114>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <xTaskResumeAll+0x2c>
	__asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	603b      	str	r3, [r7, #0]
}
 80029c8:	bf00      	nop
 80029ca:	e7fe      	b.n	80029ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80029cc:	f000 fd86 	bl	80034dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80029d0:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <xTaskResumeAll+0x114>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	4a37      	ldr	r2, [pc, #220]	; (8002ab4 <xTaskResumeAll+0x114>)
 80029d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <xTaskResumeAll+0x114>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d161      	bne.n	8002aa6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029e2:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <xTaskResumeAll+0x118>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d05d      	beq.n	8002aa6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029ea:	e02e      	b.n	8002a4a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80029ec:	4b33      	ldr	r3, [pc, #204]	; (8002abc <xTaskResumeAll+0x11c>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3318      	adds	r3, #24
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff f88e 	bl	8001b1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3304      	adds	r3, #4
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff f889 	bl	8001b1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <xTaskResumeAll+0x120>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	4a2a      	ldr	r2, [pc, #168]	; (8002ac0 <xTaskResumeAll+0x120>)
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <xTaskResumeAll+0x124>)
 8002a28:	441a      	add	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f7ff f817 	bl	8001a64 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3a:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <xTaskResumeAll+0x128>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d302      	bcc.n	8002a4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002a44:	4b21      	ldr	r3, [pc, #132]	; (8002acc <xTaskResumeAll+0x12c>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <xTaskResumeAll+0x11c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1cc      	bne.n	80029ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a58:	f000 fb22 	bl	80030a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <xTaskResumeAll+0x130>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d010      	beq.n	8002a8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a68:	f000 f836 	bl	8002ad8 <xTaskIncrementTick>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <xTaskResumeAll+0x12c>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f1      	bne.n	8002a68 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <xTaskResumeAll+0x130>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <xTaskResumeAll+0x12c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a92:	2301      	movs	r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <xTaskResumeAll+0x134>)
 8002a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002aa6:	f000 fd49 	bl	800353c <vPortExitCritical>

	return xAlreadyYielded;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000046c 	.word	0x2000046c
 8002ab8:	20000444 	.word	0x20000444
 8002abc:	20000404 	.word	0x20000404
 8002ac0:	2000044c 	.word	0x2000044c
 8002ac4:	20000348 	.word	0x20000348
 8002ac8:	20000344 	.word	0x20000344
 8002acc:	20000458 	.word	0x20000458
 8002ad0:	20000454 	.word	0x20000454
 8002ad4:	e000ed04 	.word	0xe000ed04

08002ad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ae2:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <xTaskIncrementTick+0x150>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 808d 	bne.w	8002c06 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002aec:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <xTaskIncrementTick+0x154>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002af4:	4a4d      	ldr	r2, [pc, #308]	; (8002c2c <xTaskIncrementTick+0x154>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d120      	bne.n	8002b42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <xTaskIncrementTick+0x158>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <xTaskIncrementTick+0x48>
	__asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	603b      	str	r3, [r7, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	e7fe      	b.n	8002b1e <xTaskIncrementTick+0x46>
 8002b20:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <xTaskIncrementTick+0x158>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <xTaskIncrementTick+0x15c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a41      	ldr	r2, [pc, #260]	; (8002c30 <xTaskIncrementTick+0x158>)
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4a41      	ldr	r2, [pc, #260]	; (8002c34 <xTaskIncrementTick+0x15c>)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b40      	ldr	r3, [pc, #256]	; (8002c38 <xTaskIncrementTick+0x160>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	4a3f      	ldr	r2, [pc, #252]	; (8002c38 <xTaskIncrementTick+0x160>)
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	f000 faaf 	bl	80030a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b42:	4b3e      	ldr	r3, [pc, #248]	; (8002c3c <xTaskIncrementTick+0x164>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d34d      	bcc.n	8002be8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b4c:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <xTaskIncrementTick+0x158>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <xTaskIncrementTick+0x82>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <xTaskIncrementTick+0x84>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b60:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <xTaskIncrementTick+0x164>)
 8002b62:	f04f 32ff 	mov.w	r2, #4294967295
 8002b66:	601a      	str	r2, [r3, #0]
					break;
 8002b68:	e03e      	b.n	8002be8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b6a:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <xTaskIncrementTick+0x158>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d203      	bcs.n	8002b8a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b82:	4a2e      	ldr	r2, [pc, #184]	; (8002c3c <xTaskIncrementTick+0x164>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6013      	str	r3, [r2, #0]
						break;
 8002b88:	e02e      	b.n	8002be8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe ffc3 	bl	8001b1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d004      	beq.n	8002ba6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	3318      	adds	r3, #24
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe ffba 	bl	8001b1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	2201      	movs	r2, #1
 8002bac:	409a      	lsls	r2, r3
 8002bae:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <xTaskIncrementTick+0x168>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <xTaskIncrementTick+0x168>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <xTaskIncrementTick+0x16c>)
 8002bc6:	441a      	add	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f7fe ff48 	bl	8001a64 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <xTaskIncrementTick+0x170>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d3b4      	bcc.n	8002b4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002be6:	e7b1      	b.n	8002b4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002be8:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <xTaskIncrementTick+0x170>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bee:	4915      	ldr	r1, [pc, #84]	; (8002c44 <xTaskIncrementTick+0x16c>)
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d907      	bls.n	8002c10 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002c00:	2301      	movs	r3, #1
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e004      	b.n	8002c10 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <xTaskIncrementTick+0x174>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <xTaskIncrementTick+0x174>)
 8002c0e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <xTaskIncrementTick+0x178>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002c1c:	697b      	ldr	r3, [r7, #20]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	2000046c 	.word	0x2000046c
 8002c2c:	20000448 	.word	0x20000448
 8002c30:	200003fc 	.word	0x200003fc
 8002c34:	20000400 	.word	0x20000400
 8002c38:	2000045c 	.word	0x2000045c
 8002c3c:	20000464 	.word	0x20000464
 8002c40:	2000044c 	.word	0x2000044c
 8002c44:	20000348 	.word	0x20000348
 8002c48:	20000344 	.word	0x20000344
 8002c4c:	20000454 	.word	0x20000454
 8002c50:	20000458 	.word	0x20000458

08002c54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c5a:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <vTaskSwitchContext+0xac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c62:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <vTaskSwitchContext+0xb0>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c68:	e044      	b.n	8002cf4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002c6a:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <vTaskSwitchContext+0xb0>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <vTaskSwitchContext+0xb4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002c7e:	7afb      	ldrb	r3, [r7, #11]
 8002c80:	f1c3 031f 	rsb	r3, r3, #31
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	4921      	ldr	r1, [pc, #132]	; (8002d0c <vTaskSwitchContext+0xb8>)
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	607b      	str	r3, [r7, #4]
}
 8002cac:	bf00      	nop
 8002cae:	e7fe      	b.n	8002cae <vTaskSwitchContext+0x5a>
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <vTaskSwitchContext+0xb8>)
 8002cbc:	4413      	add	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d104      	bne.n	8002ce0 <vTaskSwitchContext+0x8c>
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <vTaskSwitchContext+0xbc>)
 8002ce8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <vTaskSwitchContext+0xbc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	334c      	adds	r3, #76	; 0x4c
 8002cf0:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <vTaskSwitchContext+0xc0>)
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	2000046c 	.word	0x2000046c
 8002d04:	20000458 	.word	0x20000458
 8002d08:	2000044c 	.word	0x2000044c
 8002d0c:	20000348 	.word	0x20000348
 8002d10:	20000344 	.word	0x20000344
 8002d14:	20000010 	.word	0x20000010

08002d18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	60fb      	str	r3, [r7, #12]
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <vTaskPlaceOnEventList+0x44>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3318      	adds	r3, #24
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe feaf 	bl	8001aaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	6838      	ldr	r0, [r7, #0]
 8002d50:	f000 fa6e 	bl	8003230 <prvAddCurrentTaskToDelayedList>
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000344 	.word	0x20000344

08002d60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	60fb      	str	r3, [r7, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	e7fe      	b.n	8002d8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	3318      	adds	r3, #24
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe fec2 	bl	8001b1a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <xTaskRemoveFromEventList+0xac>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11c      	bne.n	8002dd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	3304      	adds	r3, #4
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe feb9 	bl	8001b1a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	2201      	movs	r2, #1
 8002dae:	409a      	lsls	r2, r3
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <xTaskRemoveFromEventList+0xb0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <xTaskRemoveFromEventList+0xb0>)
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <xTaskRemoveFromEventList+0xb4>)
 8002dc8:	441a      	add	r2, r3
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f7fe fe47 	bl	8001a64 <vListInsertEnd>
 8002dd6:	e005      	b.n	8002de4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	3318      	adds	r3, #24
 8002ddc:	4619      	mov	r1, r3
 8002dde:	480e      	ldr	r0, [pc, #56]	; (8002e18 <xTaskRemoveFromEventList+0xb8>)
 8002de0:	f7fe fe40 	bl	8001a64 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <xTaskRemoveFromEventList+0xbc>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d905      	bls.n	8002dfe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002df2:	2301      	movs	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <xTaskRemoveFromEventList+0xc0>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e001      	b.n	8002e02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002e02:	697b      	ldr	r3, [r7, #20]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	2000046c 	.word	0x2000046c
 8002e10:	2000044c 	.word	0x2000044c
 8002e14:	20000348 	.word	0x20000348
 8002e18:	20000404 	.word	0x20000404
 8002e1c:	20000344 	.word	0x20000344
 8002e20:	20000458 	.word	0x20000458

08002e24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <vTaskInternalSetTimeOutState+0x24>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <vTaskInternalSetTimeOutState+0x28>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	605a      	str	r2, [r3, #4]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	2000045c 	.word	0x2000045c
 8002e4c:	20000448 	.word	0x20000448

08002e50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	613b      	str	r3, [r7, #16]
}
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	60fb      	str	r3, [r7, #12]
}
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002e92:	f000 fb23 	bl	80034dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <xTaskCheckForTimeOut+0xbc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d102      	bne.n	8002eb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	e023      	b.n	8002efe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <xTaskCheckForTimeOut+0xc0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d007      	beq.n	8002ed2 <xTaskCheckForTimeOut+0x82>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d302      	bcc.n	8002ed2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	e015      	b.n	8002efe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d20b      	bcs.n	8002ef4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	1ad2      	subs	r2, r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ff9b 	bl	8002e24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	e004      	b.n	8002efe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002efe:	f000 fb1d 	bl	800353c <vPortExitCritical>

	return xReturn;
 8002f02:	69fb      	ldr	r3, [r7, #28]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000448 	.word	0x20000448
 8002f10:	2000045c 	.word	0x2000045c

08002f14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <vTaskMissedYield+0x14>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000458 	.word	0x20000458

08002f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f34:	f000 f852 	bl	8002fdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <prvIdleTask+0x28>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d9f9      	bls.n	8002f34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <prvIdleTask+0x2c>)
 8002f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f50:	e7f0      	b.n	8002f34 <prvIdleTask+0x8>
 8002f52:	bf00      	nop
 8002f54:	20000348 	.word	0x20000348
 8002f58:	e000ed04 	.word	0xe000ed04

08002f5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
 8002f66:	e00c      	b.n	8002f82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <prvInitialiseTaskLists+0x60>)
 8002f74:	4413      	add	r3, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe fd49 	bl	8001a0e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d9ef      	bls.n	8002f68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f88:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <prvInitialiseTaskLists+0x64>)
 8002f8a:	f7fe fd40 	bl	8001a0e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f8e:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <prvInitialiseTaskLists+0x68>)
 8002f90:	f7fe fd3d 	bl	8001a0e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f94:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <prvInitialiseTaskLists+0x6c>)
 8002f96:	f7fe fd3a 	bl	8001a0e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f9a:	480c      	ldr	r0, [pc, #48]	; (8002fcc <prvInitialiseTaskLists+0x70>)
 8002f9c:	f7fe fd37 	bl	8001a0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fa0:	480b      	ldr	r0, [pc, #44]	; (8002fd0 <prvInitialiseTaskLists+0x74>)
 8002fa2:	f7fe fd34 	bl	8001a0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <prvInitialiseTaskLists+0x78>)
 8002fa8:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <prvInitialiseTaskLists+0x64>)
 8002faa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <prvInitialiseTaskLists+0x7c>)
 8002fae:	4a05      	ldr	r2, [pc, #20]	; (8002fc4 <prvInitialiseTaskLists+0x68>)
 8002fb0:	601a      	str	r2, [r3, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000348 	.word	0x20000348
 8002fc0:	200003d4 	.word	0x200003d4
 8002fc4:	200003e8 	.word	0x200003e8
 8002fc8:	20000404 	.word	0x20000404
 8002fcc:	20000418 	.word	0x20000418
 8002fd0:	20000430 	.word	0x20000430
 8002fd4:	200003fc 	.word	0x200003fc
 8002fd8:	20000400 	.word	0x20000400

08002fdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fe2:	e019      	b.n	8003018 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002fe4:	f000 fa7a 	bl	80034dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002fe8:	4b10      	ldr	r3, [pc, #64]	; (800302c <prvCheckTasksWaitingTermination+0x50>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe fd90 	bl	8001b1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <prvCheckTasksWaitingTermination+0x54>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <prvCheckTasksWaitingTermination+0x54>)
 8003002:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <prvCheckTasksWaitingTermination+0x58>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3b01      	subs	r3, #1
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <prvCheckTasksWaitingTermination+0x58>)
 800300c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800300e:	f000 fa95 	bl	800353c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f810 	bl	8003038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <prvCheckTasksWaitingTermination+0x58>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e1      	bne.n	8002fe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000418 	.word	0x20000418
 8003030:	20000444 	.word	0x20000444
 8003034:	2000042c 	.word	0x2000042c

08003038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	334c      	adds	r3, #76	; 0x4c
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fd6b 	bl	8003b20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d108      	bne.n	8003066 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fc03 	bl	8003864 <vPortFree>
				vPortFree( pxTCB );
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fc00 	bl	8003864 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003064:	e018      	b.n	8003098 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800306c:	2b01      	cmp	r3, #1
 800306e:	d103      	bne.n	8003078 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fbf7 	bl	8003864 <vPortFree>
	}
 8003076:	e00f      	b.n	8003098 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800307e:	2b02      	cmp	r3, #2
 8003080:	d00a      	beq.n	8003098 <prvDeleteTCB+0x60>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	60fb      	str	r3, [r7, #12]
}
 8003094:	bf00      	nop
 8003096:	e7fe      	b.n	8003096 <prvDeleteTCB+0x5e>
	}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <prvResetNextTaskUnblockTime+0x40>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <prvResetNextTaskUnblockTime+0x14>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <prvResetNextTaskUnblockTime+0x16>
 80030b4:	2300      	movs	r3, #0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <prvResetNextTaskUnblockTime+0x44>)
 80030bc:	f04f 32ff 	mov.w	r2, #4294967295
 80030c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80030c2:	e008      	b.n	80030d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <prvResetNextTaskUnblockTime+0x40>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <prvResetNextTaskUnblockTime+0x44>)
 80030d4:	6013      	str	r3, [r2, #0]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	200003fc 	.word	0x200003fc
 80030e4:	20000464 	.word	0x20000464

080030e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <xTaskGetSchedulerState+0x34>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80030f6:	2301      	movs	r3, #1
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	e008      	b.n	800310e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <xTaskGetSchedulerState+0x38>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003104:	2302      	movs	r3, #2
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	e001      	b.n	800310e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800310a:	2300      	movs	r3, #0
 800310c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800310e:	687b      	ldr	r3, [r7, #4]
	}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000450 	.word	0x20000450
 8003120:	2000046c 	.word	0x2000046c

08003124 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d06e      	beq.n	8003218 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800313a:	4b3a      	ldr	r3, [pc, #232]	; (8003224 <xTaskPriorityDisinherit+0x100>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	429a      	cmp	r2, r3
 8003142:	d00a      	beq.n	800315a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	60fb      	str	r3, [r7, #12]
}
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	60bb      	str	r3, [r7, #8]
}
 8003174:	bf00      	nop
 8003176:	e7fe      	b.n	8003176 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317c:	1e5a      	subs	r2, r3, #1
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	429a      	cmp	r2, r3
 800318c:	d044      	beq.n	8003218 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003192:	2b00      	cmp	r3, #0
 8003194:	d140      	bne.n	8003218 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3304      	adds	r3, #4
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fcbd 	bl	8001b1a <uxListRemove>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d115      	bne.n	80031d2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031aa:	491f      	ldr	r1, [pc, #124]	; (8003228 <xTaskPriorityDisinherit+0x104>)
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <xTaskPriorityDisinherit+0xae>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	2201      	movs	r2, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	4b18      	ldr	r3, [pc, #96]	; (800322c <xTaskPriorityDisinherit+0x108>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4013      	ands	r3, r2
 80031ce:	4a17      	ldr	r2, [pc, #92]	; (800322c <xTaskPriorityDisinherit+0x108>)
 80031d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	f1c3 0207 	rsb	r2, r3, #7
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	2201      	movs	r2, #1
 80031ec:	409a      	lsls	r2, r3
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <xTaskPriorityDisinherit+0x108>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <xTaskPriorityDisinherit+0x108>)
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4a08      	ldr	r2, [pc, #32]	; (8003228 <xTaskPriorityDisinherit+0x104>)
 8003206:	441a      	add	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f7fe fc28 	bl	8001a64 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003214:	2301      	movs	r3, #1
 8003216:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003218:	697b      	ldr	r3, [r7, #20]
	}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000344 	.word	0x20000344
 8003228:	20000348 	.word	0x20000348
 800322c:	2000044c 	.word	0x2000044c

08003230 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800323a:	4b29      	ldr	r3, [pc, #164]	; (80032e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3304      	adds	r3, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe fc67 	bl	8001b1a <uxListRemove>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	2201      	movs	r2, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4013      	ands	r3, r2
 8003266:	4a20      	ldr	r2, [pc, #128]	; (80032e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003268:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d10a      	bne.n	8003288 <prvAddCurrentTaskToDelayedList+0x58>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3304      	adds	r3, #4
 800327e:	4619      	mov	r1, r3
 8003280:	481a      	ldr	r0, [pc, #104]	; (80032ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8003282:	f7fe fbef 	bl	8001a64 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003286:	e026      	b.n	80032d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	429a      	cmp	r2, r3
 800329e:	d209      	bcs.n	80032b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3304      	adds	r3, #4
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f7fe fbfc 	bl	8001aaa <vListInsert>
}
 80032b2:	e010      	b.n	80032d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3304      	adds	r3, #4
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f7fe fbf2 	bl	8001aaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d202      	bcs.n	80032d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80032d0:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6013      	str	r3, [r2, #0]
}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000448 	.word	0x20000448
 80032e4:	20000344 	.word	0x20000344
 80032e8:	2000044c 	.word	0x2000044c
 80032ec:	20000430 	.word	0x20000430
 80032f0:	20000400 	.word	0x20000400
 80032f4:	200003fc 	.word	0x200003fc
 80032f8:	20000464 	.word	0x20000464

080032fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3b04      	subs	r3, #4
 800330c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	3b04      	subs	r3, #4
 800331a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f023 0201 	bic.w	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3b04      	subs	r3, #4
 800332a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800332c:	4a08      	ldr	r2, [pc, #32]	; (8003350 <pxPortInitialiseStack+0x54>)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3b14      	subs	r3, #20
 8003336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3b20      	subs	r3, #32
 8003342:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003344:	68fb      	ldr	r3, [r7, #12]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	08003355 	.word	0x08003355

08003354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <prvTaskExitError+0x54>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003366:	d00a      	beq.n	800337e <prvTaskExitError+0x2a>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	60fb      	str	r3, [r7, #12]
}
 800337a:	bf00      	nop
 800337c:	e7fe      	b.n	800337c <prvTaskExitError+0x28>
	__asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	60bb      	str	r3, [r7, #8]
}
 8003390:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003392:	bf00      	nop
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0fc      	beq.n	8003394 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800339a:	bf00      	nop
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000000c 	.word	0x2000000c
 80033ac:	00000000 	.word	0x00000000

080033b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <pxCurrentTCBConst2>)
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	6808      	ldr	r0, [r1, #0]
 80033b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033ba:	f380 8809 	msr	PSP, r0
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f380 8811 	msr	BASEPRI, r0
 80033ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80033ce:	4770      	bx	lr

080033d0 <pxCurrentTCBConst2>:
 80033d0:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop

080033d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80033d8:	4806      	ldr	r0, [pc, #24]	; (80033f4 <prvPortStartFirstTask+0x1c>)
 80033da:	6800      	ldr	r0, [r0, #0]
 80033dc:	6800      	ldr	r0, [r0, #0]
 80033de:	f380 8808 	msr	MSP, r0
 80033e2:	b662      	cpsie	i
 80033e4:	b661      	cpsie	f
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	df00      	svc	0
 80033f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80033f2:	bf00      	nop
 80033f4:	e000ed08 	.word	0xe000ed08

080033f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033fe:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <xPortStartScheduler+0xd0>)
 8003400:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	22ff      	movs	r2, #255	; 0xff
 800340e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <xPortStartScheduler+0xd4>)
 8003424:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003426:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <xPortStartScheduler+0xd8>)
 8003428:	2207      	movs	r2, #7
 800342a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800342c:	e009      	b.n	8003442 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <xPortStartScheduler+0xd8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3b01      	subs	r3, #1
 8003434:	4a26      	ldr	r2, [pc, #152]	; (80034d0 <xPortStartScheduler+0xd8>)
 8003436:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b80      	cmp	r3, #128	; 0x80
 800344c:	d0ef      	beq.n	800342e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <xPortStartScheduler+0xd8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	d00a      	beq.n	8003470 <xPortStartScheduler+0x78>
	__asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	60bb      	str	r3, [r7, #8]
}
 800346c:	bf00      	nop
 800346e:	e7fe      	b.n	800346e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003470:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <xPortStartScheduler+0xd8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <xPortStartScheduler+0xd8>)
 8003478:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <xPortStartScheduler+0xd8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003482:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <xPortStartScheduler+0xd8>)
 8003484:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800348e:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <xPortStartScheduler+0xdc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a10      	ldr	r2, [pc, #64]	; (80034d4 <xPortStartScheduler+0xdc>)
 8003494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003498:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800349a:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <xPortStartScheduler+0xdc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <xPortStartScheduler+0xdc>)
 80034a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80034a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80034a6:	f000 f8b9 	bl	800361c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <xPortStartScheduler+0xe0>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80034b0:	f7ff ff92 	bl	80033d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80034b4:	f7ff fbce 	bl	8002c54 <vTaskSwitchContext>
	prvTaskExitError();
 80034b8:	f7ff ff4c 	bl	8003354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	e000e400 	.word	0xe000e400
 80034cc:	20000470 	.word	0x20000470
 80034d0:	20000474 	.word	0x20000474
 80034d4:	e000ed20 	.word	0xe000ed20
 80034d8:	2000000c 	.word	0x2000000c

080034dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	607b      	str	r3, [r7, #4]
}
 80034f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <vPortEnterCritical+0x58>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3301      	adds	r3, #1
 80034fc:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <vPortEnterCritical+0x58>)
 80034fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <vPortEnterCritical+0x58>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10f      	bne.n	8003528 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <vPortEnterCritical+0x5c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <vPortEnterCritical+0x4c>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	603b      	str	r3, [r7, #0]
}
 8003524:	bf00      	nop
 8003526:	e7fe      	b.n	8003526 <vPortEnterCritical+0x4a>
	}
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	2000000c 	.word	0x2000000c
 8003538:	e000ed04 	.word	0xe000ed04

0800353c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <vPortExitCritical+0x4c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <vPortExitCritical+0x24>
	__asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	607b      	str	r3, [r7, #4]
}
 800355c:	bf00      	nop
 800355e:	e7fe      	b.n	800355e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <vPortExitCritical+0x4c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3b01      	subs	r3, #1
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <vPortExitCritical+0x4c>)
 8003568:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <vPortExitCritical+0x4c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d105      	bne.n	800357e <vPortExitCritical+0x42>
 8003572:	2300      	movs	r3, #0
 8003574:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f383 8811 	msr	BASEPRI, r3
}
 800357c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	2000000c 	.word	0x2000000c
 800358c:	00000000 	.word	0x00000000

08003590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003590:	f3ef 8009 	mrs	r0, PSP
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <pxCurrentTCBConst>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035a0:	6010      	str	r0, [r2, #0]
 80035a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80035a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80035aa:	f380 8811 	msr	BASEPRI, r0
 80035ae:	f7ff fb51 	bl	8002c54 <vTaskSwitchContext>
 80035b2:	f04f 0000 	mov.w	r0, #0
 80035b6:	f380 8811 	msr	BASEPRI, r0
 80035ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	6808      	ldr	r0, [r1, #0]
 80035c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035c6:	f380 8809 	msr	PSP, r0
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	4770      	bx	lr

080035d0 <pxCurrentTCBConst>:
 80035d0:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop

080035d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
	__asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	607b      	str	r3, [r7, #4]
}
 80035f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80035f2:	f7ff fa71 	bl	8002ad8 <xTaskIncrementTick>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <SysTick_Handler+0x40>)
 80035fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	2300      	movs	r3, #0
 8003606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f383 8811 	msr	BASEPRI, r3
}
 800360e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	e000ed04 	.word	0xe000ed04

0800361c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <vPortSetupTimerInterrupt+0x30>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <vPortSetupTimerInterrupt+0x34>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <vPortSetupTimerInterrupt+0x38>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a09      	ldr	r2, [pc, #36]	; (8003658 <vPortSetupTimerInterrupt+0x3c>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	4a08      	ldr	r2, [pc, #32]	; (800365c <vPortSetupTimerInterrupt+0x40>)
 800363a:	3b01      	subs	r3, #1
 800363c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800363e:	4b03      	ldr	r3, [pc, #12]	; (800364c <vPortSetupTimerInterrupt+0x30>)
 8003640:	2207      	movs	r2, #7
 8003642:	601a      	str	r2, [r3, #0]
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	e000e010 	.word	0xe000e010
 8003650:	e000e018 	.word	0xe000e018
 8003654:	20000000 	.word	0x20000000
 8003658:	10624dd3 	.word	0x10624dd3
 800365c:	e000e014 	.word	0xe000e014

08003660 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003666:	f3ef 8305 	mrs	r3, IPSR
 800366a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b0f      	cmp	r3, #15
 8003670:	d914      	bls.n	800369c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003672:	4a16      	ldr	r2, [pc, #88]	; (80036cc <vPortValidateInterruptPriority+0x6c>)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800367c:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <vPortValidateInterruptPriority+0x70>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	7afa      	ldrb	r2, [r7, #11]
 8003682:	429a      	cmp	r2, r3
 8003684:	d20a      	bcs.n	800369c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	607b      	str	r3, [r7, #4]
}
 8003698:	bf00      	nop
 800369a:	e7fe      	b.n	800369a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800369c:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <vPortValidateInterruptPriority+0x74>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <vPortValidateInterruptPriority+0x78>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d90a      	bls.n	80036c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	603b      	str	r3, [r7, #0]
}
 80036be:	bf00      	nop
 80036c0:	e7fe      	b.n	80036c0 <vPortValidateInterruptPriority+0x60>
	}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	e000e3f0 	.word	0xe000e3f0
 80036d0:	20000470 	.word	0x20000470
 80036d4:	e000ed0c 	.word	0xe000ed0c
 80036d8:	20000474 	.word	0x20000474

080036dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80036e8:	f7ff f94c 	bl	8002984 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80036ec:	4b58      	ldr	r3, [pc, #352]	; (8003850 <pvPortMalloc+0x174>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80036f4:	f000 f910 	bl	8003918 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80036f8:	4b56      	ldr	r3, [pc, #344]	; (8003854 <pvPortMalloc+0x178>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	f040 808e 	bne.w	8003822 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01d      	beq.n	8003748 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800370c:	2208      	movs	r2, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	2b00      	cmp	r3, #0
 800371c:	d014      	beq.n	8003748 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f023 0307 	bic.w	r3, r3, #7
 8003724:	3308      	adds	r3, #8
 8003726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <pvPortMalloc+0x6c>
	__asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	617b      	str	r3, [r7, #20]
}
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d069      	beq.n	8003822 <pvPortMalloc+0x146>
 800374e:	4b42      	ldr	r3, [pc, #264]	; (8003858 <pvPortMalloc+0x17c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	d864      	bhi.n	8003822 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003758:	4b40      	ldr	r3, [pc, #256]	; (800385c <pvPortMalloc+0x180>)
 800375a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800375c:	4b3f      	ldr	r3, [pc, #252]	; (800385c <pvPortMalloc+0x180>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003762:	e004      	b.n	800376e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	429a      	cmp	r2, r3
 8003776:	d903      	bls.n	8003780 <pvPortMalloc+0xa4>
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f1      	bne.n	8003764 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003780:	4b33      	ldr	r3, [pc, #204]	; (8003850 <pvPortMalloc+0x174>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003786:	429a      	cmp	r2, r3
 8003788:	d04b      	beq.n	8003822 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2208      	movs	r2, #8
 8003790:	4413      	add	r3, r2
 8003792:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	1ad2      	subs	r2, r2, r3
 80037a4:	2308      	movs	r3, #8
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d91f      	bls.n	80037ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4413      	add	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <pvPortMalloc+0xf8>
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	613b      	str	r3, [r7, #16]
}
 80037d0:	bf00      	nop
 80037d2:	e7fe      	b.n	80037d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	1ad2      	subs	r2, r2, r3
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80037e6:	69b8      	ldr	r0, [r7, #24]
 80037e8:	f000 f8f8 	bl	80039dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80037ec:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <pvPortMalloc+0x17c>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	4a18      	ldr	r2, [pc, #96]	; (8003858 <pvPortMalloc+0x17c>)
 80037f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80037fa:	4b17      	ldr	r3, [pc, #92]	; (8003858 <pvPortMalloc+0x17c>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b18      	ldr	r3, [pc, #96]	; (8003860 <pvPortMalloc+0x184>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d203      	bcs.n	800380e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003806:	4b14      	ldr	r3, [pc, #80]	; (8003858 <pvPortMalloc+0x17c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a15      	ldr	r2, [pc, #84]	; (8003860 <pvPortMalloc+0x184>)
 800380c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <pvPortMalloc+0x178>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	431a      	orrs	r2, r3
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003822:	f7ff f8bd 	bl	80029a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <pvPortMalloc+0x16a>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60fb      	str	r3, [r7, #12]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <pvPortMalloc+0x168>
	return pvReturn;
 8003846:	69fb      	ldr	r3, [r7, #28]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3728      	adds	r7, #40	; 0x28
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20001080 	.word	0x20001080
 8003854:	2000108c 	.word	0x2000108c
 8003858:	20001084 	.word	0x20001084
 800385c:	20001078 	.word	0x20001078
 8003860:	20001088 	.word	0x20001088

08003864 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d048      	beq.n	8003908 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003876:	2308      	movs	r3, #8
 8003878:	425b      	negs	r3, r3
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4413      	add	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <vPortFree+0xac>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <vPortFree+0x44>
	__asm volatile
 8003892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	60fb      	str	r3, [r7, #12]
}
 80038a4:	bf00      	nop
 80038a6:	e7fe      	b.n	80038a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <vPortFree+0x62>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	60bb      	str	r3, [r7, #8]
}
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <vPortFree+0xac>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d019      	beq.n	8003908 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d115      	bne.n	8003908 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <vPortFree+0xac>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	401a      	ands	r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80038ec:	f7ff f84a 	bl	8002984 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	4b07      	ldr	r3, [pc, #28]	; (8003914 <vPortFree+0xb0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4413      	add	r3, r2
 80038fa:	4a06      	ldr	r2, [pc, #24]	; (8003914 <vPortFree+0xb0>)
 80038fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80038fe:	6938      	ldr	r0, [r7, #16]
 8003900:	f000 f86c 	bl	80039dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003904:	f7ff f84c 	bl	80029a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003908:	bf00      	nop
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	2000108c 	.word	0x2000108c
 8003914:	20001084 	.word	0x20001084

08003918 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800391e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003922:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <prvHeapInit+0xac>)
 8003926:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3307      	adds	r3, #7
 8003936:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0307 	bic.w	r3, r3, #7
 800393e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <prvHeapInit+0xac>)
 8003948:	4413      	add	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003950:	4a1d      	ldr	r2, [pc, #116]	; (80039c8 <prvHeapInit+0xb0>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003956:	4b1c      	ldr	r3, [pc, #112]	; (80039c8 <prvHeapInit+0xb0>)
 8003958:	2200      	movs	r2, #0
 800395a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4413      	add	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003964:	2208      	movs	r2, #8
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0307 	bic.w	r3, r3, #7
 8003972:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a15      	ldr	r2, [pc, #84]	; (80039cc <prvHeapInit+0xb4>)
 8003978:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <prvHeapInit+0xb4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <prvHeapInit+0xb4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	1ad2      	subs	r2, r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <prvHeapInit+0xb4>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <prvHeapInit+0xb8>)
 80039a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <prvHeapInit+0xbc>)
 80039ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <prvHeapInit+0xc0>)
 80039b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039b6:	601a      	str	r2, [r3, #0]
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000478 	.word	0x20000478
 80039c8:	20001078 	.word	0x20001078
 80039cc:	20001080 	.word	0x20001080
 80039d0:	20001088 	.word	0x20001088
 80039d4:	20001084 	.word	0x20001084
 80039d8:	2000108c 	.word	0x2000108c

080039dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80039e4:	4b27      	ldr	r3, [pc, #156]	; (8003a84 <prvInsertBlockIntoFreeList+0xa8>)
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e002      	b.n	80039f0 <prvInsertBlockIntoFreeList+0x14>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d8f7      	bhi.n	80039ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	4413      	add	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d108      	bne.n	8003a1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	441a      	add	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	441a      	add	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d118      	bne.n	8003a64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <prvInsertBlockIntoFreeList+0xac>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d00d      	beq.n	8003a5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	441a      	add	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e008      	b.n	8003a6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <prvInsertBlockIntoFreeList+0xac>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e003      	b.n	8003a6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d002      	beq.n	8003a7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	20001078 	.word	0x20001078
 8003a88:	20001080 	.word	0x20001080

08003a8c <__libc_init_array>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	2600      	movs	r6, #0
 8003a90:	4d0c      	ldr	r5, [pc, #48]	; (8003ac4 <__libc_init_array+0x38>)
 8003a92:	4c0d      	ldr	r4, [pc, #52]	; (8003ac8 <__libc_init_array+0x3c>)
 8003a94:	1b64      	subs	r4, r4, r5
 8003a96:	10a4      	asrs	r4, r4, #2
 8003a98:	42a6      	cmp	r6, r4
 8003a9a:	d109      	bne.n	8003ab0 <__libc_init_array+0x24>
 8003a9c:	f000 f8f4 	bl	8003c88 <_init>
 8003aa0:	2600      	movs	r6, #0
 8003aa2:	4d0a      	ldr	r5, [pc, #40]	; (8003acc <__libc_init_array+0x40>)
 8003aa4:	4c0a      	ldr	r4, [pc, #40]	; (8003ad0 <__libc_init_array+0x44>)
 8003aa6:	1b64      	subs	r4, r4, r5
 8003aa8:	10a4      	asrs	r4, r4, #2
 8003aaa:	42a6      	cmp	r6, r4
 8003aac:	d105      	bne.n	8003aba <__libc_init_array+0x2e>
 8003aae:	bd70      	pop	{r4, r5, r6, pc}
 8003ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab4:	4798      	blx	r3
 8003ab6:	3601      	adds	r6, #1
 8003ab8:	e7ee      	b.n	8003a98 <__libc_init_array+0xc>
 8003aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003abe:	4798      	blx	r3
 8003ac0:	3601      	adds	r6, #1
 8003ac2:	e7f2      	b.n	8003aaa <__libc_init_array+0x1e>
 8003ac4:	08003d70 	.word	0x08003d70
 8003ac8:	08003d70 	.word	0x08003d70
 8003acc:	08003d70 	.word	0x08003d70
 8003ad0:	08003d74 	.word	0x08003d74

08003ad4 <__retarget_lock_acquire_recursive>:
 8003ad4:	4770      	bx	lr

08003ad6 <__retarget_lock_release_recursive>:
 8003ad6:	4770      	bx	lr

08003ad8 <memcpy>:
 8003ad8:	440a      	add	r2, r1
 8003ada:	4291      	cmp	r1, r2
 8003adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ae0:	d100      	bne.n	8003ae4 <memcpy+0xc>
 8003ae2:	4770      	bx	lr
 8003ae4:	b510      	push	{r4, lr}
 8003ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aea:	4291      	cmp	r1, r2
 8003aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003af0:	d1f9      	bne.n	8003ae6 <memcpy+0xe>
 8003af2:	bd10      	pop	{r4, pc}

08003af4 <memset>:
 8003af4:	4603      	mov	r3, r0
 8003af6:	4402      	add	r2, r0
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d100      	bne.n	8003afe <memset+0xa>
 8003afc:	4770      	bx	lr
 8003afe:	f803 1b01 	strb.w	r1, [r3], #1
 8003b02:	e7f9      	b.n	8003af8 <memset+0x4>

08003b04 <cleanup_glue>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	460c      	mov	r4, r1
 8003b08:	6809      	ldr	r1, [r1, #0]
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	b109      	cbz	r1, 8003b12 <cleanup_glue+0xe>
 8003b0e:	f7ff fff9 	bl	8003b04 <cleanup_glue>
 8003b12:	4621      	mov	r1, r4
 8003b14:	4628      	mov	r0, r5
 8003b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b1a:	f000 b869 	b.w	8003bf0 <_free_r>
	...

08003b20 <_reclaim_reent>:
 8003b20:	4b2c      	ldr	r3, [pc, #176]	; (8003bd4 <_reclaim_reent+0xb4>)
 8003b22:	b570      	push	{r4, r5, r6, lr}
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4604      	mov	r4, r0
 8003b28:	4283      	cmp	r3, r0
 8003b2a:	d051      	beq.n	8003bd0 <_reclaim_reent+0xb0>
 8003b2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003b2e:	b143      	cbz	r3, 8003b42 <_reclaim_reent+0x22>
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d14a      	bne.n	8003bcc <_reclaim_reent+0xac>
 8003b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	b111      	cbz	r1, 8003b42 <_reclaim_reent+0x22>
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f000 f857 	bl	8003bf0 <_free_r>
 8003b42:	6961      	ldr	r1, [r4, #20]
 8003b44:	b111      	cbz	r1, 8003b4c <_reclaim_reent+0x2c>
 8003b46:	4620      	mov	r0, r4
 8003b48:	f000 f852 	bl	8003bf0 <_free_r>
 8003b4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b4e:	b111      	cbz	r1, 8003b56 <_reclaim_reent+0x36>
 8003b50:	4620      	mov	r0, r4
 8003b52:	f000 f84d 	bl	8003bf0 <_free_r>
 8003b56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003b58:	b111      	cbz	r1, 8003b60 <_reclaim_reent+0x40>
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f000 f848 	bl	8003bf0 <_free_r>
 8003b60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003b62:	b111      	cbz	r1, 8003b6a <_reclaim_reent+0x4a>
 8003b64:	4620      	mov	r0, r4
 8003b66:	f000 f843 	bl	8003bf0 <_free_r>
 8003b6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003b6c:	b111      	cbz	r1, 8003b74 <_reclaim_reent+0x54>
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f000 f83e 	bl	8003bf0 <_free_r>
 8003b74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003b76:	b111      	cbz	r1, 8003b7e <_reclaim_reent+0x5e>
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f000 f839 	bl	8003bf0 <_free_r>
 8003b7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003b80:	b111      	cbz	r1, 8003b88 <_reclaim_reent+0x68>
 8003b82:	4620      	mov	r0, r4
 8003b84:	f000 f834 	bl	8003bf0 <_free_r>
 8003b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b8a:	b111      	cbz	r1, 8003b92 <_reclaim_reent+0x72>
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f000 f82f 	bl	8003bf0 <_free_r>
 8003b92:	69a3      	ldr	r3, [r4, #24]
 8003b94:	b1e3      	cbz	r3, 8003bd0 <_reclaim_reent+0xb0>
 8003b96:	4620      	mov	r0, r4
 8003b98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b9a:	4798      	blx	r3
 8003b9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003b9e:	b1b9      	cbz	r1, 8003bd0 <_reclaim_reent+0xb0>
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ba6:	f7ff bfad 	b.w	8003b04 <cleanup_glue>
 8003baa:	5949      	ldr	r1, [r1, r5]
 8003bac:	b941      	cbnz	r1, 8003bc0 <_reclaim_reent+0xa0>
 8003bae:	3504      	adds	r5, #4
 8003bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bb2:	2d80      	cmp	r5, #128	; 0x80
 8003bb4:	68d9      	ldr	r1, [r3, #12]
 8003bb6:	d1f8      	bne.n	8003baa <_reclaim_reent+0x8a>
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f000 f819 	bl	8003bf0 <_free_r>
 8003bbe:	e7ba      	b.n	8003b36 <_reclaim_reent+0x16>
 8003bc0:	680e      	ldr	r6, [r1, #0]
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f000 f814 	bl	8003bf0 <_free_r>
 8003bc8:	4631      	mov	r1, r6
 8003bca:	e7ef      	b.n	8003bac <_reclaim_reent+0x8c>
 8003bcc:	2500      	movs	r5, #0
 8003bce:	e7ef      	b.n	8003bb0 <_reclaim_reent+0x90>
 8003bd0:	bd70      	pop	{r4, r5, r6, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000010 	.word	0x20000010

08003bd8 <__malloc_lock>:
 8003bd8:	4801      	ldr	r0, [pc, #4]	; (8003be0 <__malloc_lock+0x8>)
 8003bda:	f7ff bf7b 	b.w	8003ad4 <__retarget_lock_acquire_recursive>
 8003bde:	bf00      	nop
 8003be0:	20001104 	.word	0x20001104

08003be4 <__malloc_unlock>:
 8003be4:	4801      	ldr	r0, [pc, #4]	; (8003bec <__malloc_unlock+0x8>)
 8003be6:	f7ff bf76 	b.w	8003ad6 <__retarget_lock_release_recursive>
 8003bea:	bf00      	nop
 8003bec:	20001104 	.word	0x20001104

08003bf0 <_free_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4605      	mov	r5, r0
 8003bf4:	2900      	cmp	r1, #0
 8003bf6:	d043      	beq.n	8003c80 <_free_r+0x90>
 8003bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bfc:	1f0c      	subs	r4, r1, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bfb8      	it	lt
 8003c02:	18e4      	addlt	r4, r4, r3
 8003c04:	f7ff ffe8 	bl	8003bd8 <__malloc_lock>
 8003c08:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <_free_r+0x94>)
 8003c0a:	6813      	ldr	r3, [r2, #0]
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	b933      	cbnz	r3, 8003c1e <_free_r+0x2e>
 8003c10:	6063      	str	r3, [r4, #4]
 8003c12:	6014      	str	r4, [r2, #0]
 8003c14:	4628      	mov	r0, r5
 8003c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c1a:	f7ff bfe3 	b.w	8003be4 <__malloc_unlock>
 8003c1e:	42a3      	cmp	r3, r4
 8003c20:	d90a      	bls.n	8003c38 <_free_r+0x48>
 8003c22:	6821      	ldr	r1, [r4, #0]
 8003c24:	1862      	adds	r2, r4, r1
 8003c26:	4293      	cmp	r3, r2
 8003c28:	bf01      	itttt	eq
 8003c2a:	681a      	ldreq	r2, [r3, #0]
 8003c2c:	685b      	ldreq	r3, [r3, #4]
 8003c2e:	1852      	addeq	r2, r2, r1
 8003c30:	6022      	streq	r2, [r4, #0]
 8003c32:	6063      	str	r3, [r4, #4]
 8003c34:	6004      	str	r4, [r0, #0]
 8003c36:	e7ed      	b.n	8003c14 <_free_r+0x24>
 8003c38:	461a      	mov	r2, r3
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	b10b      	cbz	r3, 8003c42 <_free_r+0x52>
 8003c3e:	42a3      	cmp	r3, r4
 8003c40:	d9fa      	bls.n	8003c38 <_free_r+0x48>
 8003c42:	6811      	ldr	r1, [r2, #0]
 8003c44:	1850      	adds	r0, r2, r1
 8003c46:	42a0      	cmp	r0, r4
 8003c48:	d10b      	bne.n	8003c62 <_free_r+0x72>
 8003c4a:	6820      	ldr	r0, [r4, #0]
 8003c4c:	4401      	add	r1, r0
 8003c4e:	1850      	adds	r0, r2, r1
 8003c50:	4283      	cmp	r3, r0
 8003c52:	6011      	str	r1, [r2, #0]
 8003c54:	d1de      	bne.n	8003c14 <_free_r+0x24>
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4401      	add	r1, r0
 8003c5c:	6011      	str	r1, [r2, #0]
 8003c5e:	6053      	str	r3, [r2, #4]
 8003c60:	e7d8      	b.n	8003c14 <_free_r+0x24>
 8003c62:	d902      	bls.n	8003c6a <_free_r+0x7a>
 8003c64:	230c      	movs	r3, #12
 8003c66:	602b      	str	r3, [r5, #0]
 8003c68:	e7d4      	b.n	8003c14 <_free_r+0x24>
 8003c6a:	6820      	ldr	r0, [r4, #0]
 8003c6c:	1821      	adds	r1, r4, r0
 8003c6e:	428b      	cmp	r3, r1
 8003c70:	bf01      	itttt	eq
 8003c72:	6819      	ldreq	r1, [r3, #0]
 8003c74:	685b      	ldreq	r3, [r3, #4]
 8003c76:	1809      	addeq	r1, r1, r0
 8003c78:	6021      	streq	r1, [r4, #0]
 8003c7a:	6063      	str	r3, [r4, #4]
 8003c7c:	6054      	str	r4, [r2, #4]
 8003c7e:	e7c9      	b.n	8003c14 <_free_r+0x24>
 8003c80:	bd38      	pop	{r3, r4, r5, pc}
 8003c82:	bf00      	nop
 8003c84:	20001090 	.word	0x20001090

08003c88 <_init>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	bf00      	nop
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr

08003c94 <_fini>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	bf00      	nop
 8003c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9a:	bc08      	pop	{r3}
 8003c9c:	469e      	mov	lr, r3
 8003c9e:	4770      	bx	lr

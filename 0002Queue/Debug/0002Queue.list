
0002Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004598  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080046a8  080046a8  000146a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800472c  0800472c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800472c  0800472c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800472c  0800472c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001084  20000010  08004744  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001094  08004744  00021094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001406f  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4a  00000000  00000000  000340a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00036ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00038188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190c3  00000000  00000000  00039200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125f9  00000000  00000000  000522c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092209  00000000  00000000  000648bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6ac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048e0  00000000  00000000  000f6b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004690 	.word	0x08004690

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004690 	.word	0x08004690

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b08e      	sub	sp, #56	; 0x38
 8000184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa7d 	bl	8000684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f849 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8b5 	bl	80002fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f889 	bl	80002a8 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 14, uint32_t);
 8000196:	4b1a      	ldr	r3, [pc, #104]	; (8000200 <main+0x80>)
 8000198:	f107 0420 	add.w	r4, r7, #32
 800019c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800019e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80001a2:	f107 0320 	add.w	r3, r7, #32
 80001a6:	2100      	movs	r1, #0
 80001a8:	4618      	mov	r0, r3
 80001aa:	f002 f8d0 	bl	800234e <osMessageCreate>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a14      	ldr	r2, [pc, #80]	; (8000204 <main+0x84>)
 80001b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  Queue2Hanle = xQueueCreate(9, sizeof(uint32_t));  // queue cá»§a freertos
 80001b4:	2200      	movs	r2, #0
 80001b6:	2104      	movs	r1, #4
 80001b8:	2009      	movs	r0, #9
 80001ba:	f002 fb34 	bl	8002826 <xQueueGenericCreate>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a11      	ldr	r2, [pc, #68]	; (8000208 <main+0x88>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001c4:	4b11      	ldr	r3, [pc, #68]	; (800020c <main+0x8c>)
 80001c6:	1d3c      	adds	r4, r7, #4
 80001c8:	461d      	mov	r5, r3
 80001ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 f857 	bl	800228e <osThreadCreate>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <main+0x90>)
 80001e4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Task1Func, "Task1", 128, NULL, 2, &Task1Handle);
 80001e6:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <main+0x94>)
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	2302      	movs	r3, #2
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	2300      	movs	r3, #0
 80001f0:	2280      	movs	r2, #128	; 0x80
 80001f2:	4909      	ldr	r1, [pc, #36]	; (8000218 <main+0x98>)
 80001f4:	4809      	ldr	r0, [pc, #36]	; (800021c <main+0x9c>)
 80001f6:	f002 ffd5 	bl	80031a4 <xTaskCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001fa:	f002 f841 	bl	8002280 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fe:	e7fe      	b.n	80001fe <main+0x7e>
 8000200:	080046bc 	.word	0x080046bc
 8000204:	20000ff4 	.word	0x20000ff4
 8000208:	20000fd0 	.word	0x20000fd0
 800020c:	080046cc 	.word	0x080046cc
 8000210:	20000fcc 	.word	0x20000fcc
 8000214:	20000fec 	.word	0x20000fec
 8000218:	080046b4 	.word	0x080046b4
 800021c:	08000341 	.word	0x08000341

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f004 fa26 	bl	8004680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000242:	2301      	movs	r3, #1
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	2301      	movs	r3, #1
 8000252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000254:	2302      	movs	r3, #2
 8000256:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000262:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fd51 	bl	8000d10 <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000274:	f000 f8ca 	bl	800040c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2102      	movs	r1, #2
 8000290:	4618      	mov	r0, r3
 8000292:	f000 ffbd 	bl	8001210 <HAL_RCC_ClockConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800029c:	f000 f8b6 	bl	800040c <Error_Handler>
  }
}
 80002a0:	bf00      	nop
 80002a2:	3740      	adds	r7, #64	; 0x40
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002ae:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <MX_USART2_UART_Init+0x50>)
 80002b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002ce:	220c      	movs	r2, #12
 80002d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002de:	4805      	ldr	r0, [pc, #20]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002e0:	f001 fbaa 	bl	8001a38 <HAL_UART_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ea:	f000 f88f 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000ff8 	.word	0x20000ff8
 80002f8:	40004400 	.word	0x40004400

080002fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_GPIO_Init+0x40>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	4a0d      	ldr	r2, [pc, #52]	; (800033c <MX_GPIO_Init+0x40>)
 8000308:	f043 0320 	orr.w	r3, r3, #32
 800030c:	6193      	str	r3, [r2, #24]
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_GPIO_Init+0x40>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	f003 0320 	and.w	r3, r3, #32
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_GPIO_Init+0x40>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a07      	ldr	r2, [pc, #28]	; (800033c <MX_GPIO_Init+0x40>)
 8000320:	f043 0304 	orr.w	r3, r3, #4
 8000324:	6193      	str	r3, [r2, #24]
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <MX_GPIO_Init+0x40>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	f003 0304 	and.w	r3, r3, #4
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	683b      	ldr	r3, [r7, #0]

}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	40021000 	.word	0x40021000

08000340 <Task1Func>:

/* USER CODE BEGIN 4 */
// Task Recive
void Task1Func(void * Param)
{
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b087      	sub	sp, #28
 8000344:	af00      	add	r7, sp, #0
 8000346:	6178      	str	r0, [r7, #20]

  while(1)
  {
	  Recv_task_data = osMessageGet(myQueue01Handle, osWaitForever);
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <Task1Func+0x38>)
 800034a:	6819      	ldr	r1, [r3, #0]
 800034c:	4c0b      	ldr	r4, [pc, #44]	; (800037c <Task1Func+0x3c>)
 800034e:	463b      	mov	r3, r7
 8000350:	f04f 32ff 	mov.w	r2, #4294967295
 8000354:	4618      	mov	r0, r3
 8000356:	f002 f863 	bl	8002420 <osMessageGet>
 800035a:	463b      	mov	r3, r7
 800035c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      xQueueReceive(Queue2Hanle, &Recv_data, osWaitForever);
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <Task1Func+0x40>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f04f 32ff 	mov.w	r2, #4294967295
 800036c:	4905      	ldr	r1, [pc, #20]	; (8000384 <Task1Func+0x44>)
 800036e:	4618      	mov	r0, r3
 8000370:	f002 fc4c 	bl	8002c0c <xQueueReceive>
	  Recv_task_data = osMessageGet(myQueue01Handle, osWaitForever);
 8000374:	e7e8      	b.n	8000348 <Task1Func+0x8>
 8000376:	bf00      	nop
 8000378:	20000ff4 	.word	0x20000ff4
 800037c:	2000103c 	.word	0x2000103c
 8000380:	20000fd0 	.word	0x20000fd0
 8000384:	20000fd8 	.word	0x20000fd8

08000388 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t Task_data = 1999;
 8000390:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000394:	61fb      	str	r3, [r7, #28]
	char Array_data[20] = "HelloVanTho";
 8000396:	4a11      	ldr	r2, [pc, #68]	; (80003dc <StartDefaultTask+0x54>)
 8000398:	f107 0308 	add.w	r3, r7, #8
 800039c:	ca07      	ldmia	r2, {r0, r1, r2}
 800039e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80003a2:	f107 0314 	add.w	r3, r7, #20
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
  /* Infinite loop */
  for(;;)
  {
    osMessagePut(myQueue01Handle, Task_data, 10);
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <StartDefaultTask+0x58>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	220a      	movs	r2, #10
 80003b2:	69f9      	ldr	r1, [r7, #28]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fff3 	bl	80023a0 <osMessagePut>
    xQueueSendFromISR(Queue2Hanle,(void *) &Array_data,NULL);
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <StartDefaultTask+0x5c>)
 80003bc:	6818      	ldr	r0, [r3, #0]
 80003be:	f107 0108 	add.w	r1, r7, #8
 80003c2:	2300      	movs	r3, #0
 80003c4:	2200      	movs	r2, #0
 80003c6:	f002 fb89 	bl	8002adc <xQueueGenericSendFromISR>
    osDelay(2000);
 80003ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003ce:	f001 ffaa 	bl	8002326 <osDelay>
    Task_data ++;
 80003d2:	69fb      	ldr	r3, [r7, #28]
 80003d4:	3301      	adds	r3, #1
 80003d6:	61fb      	str	r3, [r7, #28]
    osMessagePut(myQueue01Handle, Task_data, 10);
 80003d8:	e7e8      	b.n	80003ac <StartDefaultTask+0x24>
 80003da:	bf00      	nop
 80003dc:	080046e8 	.word	0x080046e8
 80003e0:	20000ff4 	.word	0x20000ff4
 80003e4:	20000fd0 	.word	0x20000fd0

080003e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d101      	bne.n	80003fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003fa:	f000 f959 	bl	80006b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40000800 	.word	0x40000800

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000414:	e7fe      	b.n	8000414 <Error_Handler+0x8>
	...

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	4b18      	ldr	r3, [pc, #96]	; (8000480 <HAL_MspInit+0x68>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a17      	ldr	r2, [pc, #92]	; (8000480 <HAL_MspInit+0x68>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_MspInit+0x68>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_MspInit+0x68>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a11      	ldr	r2, [pc, #68]	; (8000480 <HAL_MspInit+0x68>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_MspInit+0x68>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	210f      	movs	r1, #15
 8000452:	f06f 0001 	mvn.w	r0, #1
 8000456:	f000 f9fc 	bl	8000852 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <HAL_MspInit+0x6c>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_MspInit+0x6c>)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	bf00      	nop
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	40010000 	.word	0x40010000

08000488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a1f      	ldr	r2, [pc, #124]	; (8000520 <HAL_UART_MspInit+0x98>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d137      	bne.n	8000518 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <HAL_UART_MspInit+0x9c>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <HAL_UART_MspInit+0x9c>)
 80004ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b2:	61d3      	str	r3, [r2, #28]
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <HAL_UART_MspInit+0x9c>)
 80004b6:	69db      	ldr	r3, [r3, #28]
 80004b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <HAL_UART_MspInit+0x9c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a17      	ldr	r2, [pc, #92]	; (8000524 <HAL_UART_MspInit+0x9c>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <HAL_UART_MspInit+0x9c>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004d8:	2304      	movs	r3, #4
 80004da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004dc:	2302      	movs	r3, #2
 80004de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e0:	2303      	movs	r3, #3
 80004e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	480f      	ldr	r0, [pc, #60]	; (8000528 <HAL_UART_MspInit+0xa0>)
 80004ec:	f000 fa8c 	bl	8000a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004f0:	2308      	movs	r3, #8
 80004f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	4619      	mov	r1, r3
 8000502:	4809      	ldr	r0, [pc, #36]	; (8000528 <HAL_UART_MspInit+0xa0>)
 8000504:	f000 fa80 	bl	8000a08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2105      	movs	r1, #5
 800050c:	2026      	movs	r0, #38	; 0x26
 800050e:	f000 f9a0 	bl	8000852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000512:	2026      	movs	r0, #38	; 0x26
 8000514:	f000 f9b9 	bl	800088a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40004400 	.word	0x40004400
 8000524:	40021000 	.word	0x40021000
 8000528:	40010800 	.word	0x40010800

0800052c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08c      	sub	sp, #48	; 0x30
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800053c:	2200      	movs	r2, #0
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	201e      	movs	r0, #30
 8000542:	f000 f986 	bl	8000852 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000546:	201e      	movs	r0, #30
 8000548:	f000 f99f 	bl	800088a <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <HAL_InitTick+0x9c>)
 800054e:	69db      	ldr	r3, [r3, #28]
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <HAL_InitTick+0x9c>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	61d3      	str	r3, [r2, #28]
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <HAL_InitTick+0x9c>)
 800055a:	69db      	ldr	r3, [r3, #28]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000564:	f107 0210 	add.w	r2, r7, #16
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f000 ffca 	bl	8001508 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000574:	f000 ffa0 	bl	80014b8 <HAL_RCC_GetPCLK1Freq>
 8000578:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800057a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800057c:	4a13      	ldr	r2, [pc, #76]	; (80005cc <HAL_InitTick+0xa0>)
 800057e:	fba2 2303 	umull	r2, r3, r2, r3
 8000582:	0c9b      	lsrs	r3, r3, #18
 8000584:	3b01      	subs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <HAL_InitTick+0xa4>)
 800058a:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <HAL_InitTick+0xa8>)
 800058c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <HAL_InitTick+0xa4>)
 8000590:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000594:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_InitTick+0xa4>)
 8000598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800059a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_InitTick+0xa4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_InitTick+0xa4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <HAL_InitTick+0xa4>)
 80005aa:	f000 fffb 	bl	80015a4 <HAL_TIM_Base_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d104      	bne.n	80005be <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80005b4:	4806      	ldr	r0, [pc, #24]	; (80005d0 <HAL_InitTick+0xa4>)
 80005b6:	f001 f84d 	bl	8001654 <HAL_TIM_Base_Start_IT>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e000      	b.n	80005c0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3730      	adds	r7, #48	; 0x30
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	431bde83 	.word	0x431bde83
 80005d0:	20001048 	.word	0x20001048
 80005d4:	40000800 	.word	0x40000800

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <NMI_Handler+0x4>

080005de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <HardFault_Handler+0x4>

080005e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <MemManage_Handler+0x4>

080005ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <BusFault_Handler+0x4>

080005f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <UsageFault_Handler+0x4>

080005f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
	...

08000604 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <TIM4_IRQHandler+0x10>)
 800060a:	f001 f875 	bl	80016f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20001048 	.word	0x20001048

08000618 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <USART2_IRQHandler+0x10>)
 800061e:	f001 fa59 	bl	8001ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000ff8 	.word	0x20000ff8

0800062c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	; (800067c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800065e:	f7ff ffe5 	bl	800062c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000662:	f003 ffdb 	bl	800461c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f7ff fd8b 	bl	8000180 <main>
  bx lr
 800066a:	4770      	bx	lr
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000674:	08004734 	.word	0x08004734
  ldr r2, =_sbss
 8000678:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800067c:	20001094 	.word	0x20001094

08000680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC1_2_IRQHandler>
	...

08000684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <HAL_Init+0x28>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <HAL_Init+0x28>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000694:	2003      	movs	r0, #3
 8000696:	f000 f8d1 	bl	800083c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069a:	200f      	movs	r0, #15
 800069c:	f7ff ff46 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a0:	f7ff feba 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40022000 	.word	0x40022000

080006b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_IncTick+0x1c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_IncTick+0x20>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <HAL_IncTick+0x20>)
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20001090 	.word	0x20001090

080006d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return uwTick;
 80006d8:	4b02      	ldr	r3, [pc, #8]	; (80006e4 <HAL_GetTick+0x10>)
 80006da:	681b      	ldr	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20001090 	.word	0x20001090

080006e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	60d3      	str	r3, [r2, #12]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <__NVIC_GetPriorityGrouping+0x18>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	f003 0307 	and.w	r3, r3, #7
}
 800073e:	4618      	mov	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	2b00      	cmp	r3, #0
 800075c:	db0b      	blt.n	8000776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f003 021f 	and.w	r2, r3, #31
 8000764:	4906      	ldr	r1, [pc, #24]	; (8000780 <__NVIC_EnableIRQ+0x34>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	095b      	lsrs	r3, r3, #5
 800076c:	2001      	movs	r0, #1
 800076e:	fa00 f202 	lsl.w	r2, r0, r2
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	; 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff4f 	bl	80006e8 <__NVIC_SetPriorityGrouping>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000864:	f7ff ff64 	bl	8000730 <__NVIC_GetPriorityGrouping>
 8000868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	6978      	ldr	r0, [r7, #20]
 8000870:	f7ff ffb2 	bl	80007d8 <NVIC_EncodePriority>
 8000874:	4602      	mov	r2, r0
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff81 	bl	8000784 <__NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff57 	bl	800074c <__NVIC_EnableIRQ>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b085      	sub	sp, #20
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d008      	beq.n	80008ce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2204      	movs	r2, #4
 80008c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e020      	b.n	8000910 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f022 020e 	bic.w	r2, r2, #14
 80008dc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f022 0201 	bic.w	r2, r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008f6:	2101      	movs	r1, #1
 80008f8:	fa01 f202 	lsl.w	r2, r1, r2
 80008fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800090e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
	...

0800091c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800092e:	2b02      	cmp	r3, #2
 8000930:	d005      	beq.n	800093e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2204      	movs	r2, #4
 8000936:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e051      	b.n	80009e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f022 020e 	bic.w	r2, r2, #14
 800094c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 0201 	bic.w	r2, r2, #1
 800095c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a22      	ldr	r2, [pc, #136]	; (80009ec <HAL_DMA_Abort_IT+0xd0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d029      	beq.n	80009bc <HAL_DMA_Abort_IT+0xa0>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <HAL_DMA_Abort_IT+0xd4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d022      	beq.n	80009b8 <HAL_DMA_Abort_IT+0x9c>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <HAL_DMA_Abort_IT+0xd8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d01a      	beq.n	80009b2 <HAL_DMA_Abort_IT+0x96>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <HAL_DMA_Abort_IT+0xdc>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d012      	beq.n	80009ac <HAL_DMA_Abort_IT+0x90>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <HAL_DMA_Abort_IT+0xe0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d00a      	beq.n	80009a6 <HAL_DMA_Abort_IT+0x8a>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a1a      	ldr	r2, [pc, #104]	; (8000a00 <HAL_DMA_Abort_IT+0xe4>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d102      	bne.n	80009a0 <HAL_DMA_Abort_IT+0x84>
 800099a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800099e:	e00e      	b.n	80009be <HAL_DMA_Abort_IT+0xa2>
 80009a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009a4:	e00b      	b.n	80009be <HAL_DMA_Abort_IT+0xa2>
 80009a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009aa:	e008      	b.n	80009be <HAL_DMA_Abort_IT+0xa2>
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	e005      	b.n	80009be <HAL_DMA_Abort_IT+0xa2>
 80009b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b6:	e002      	b.n	80009be <HAL_DMA_Abort_IT+0xa2>
 80009b8:	2310      	movs	r3, #16
 80009ba:	e000      	b.n	80009be <HAL_DMA_Abort_IT+0xa2>
 80009bc:	2301      	movs	r3, #1
 80009be:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <HAL_DMA_Abort_IT+0xe8>)
 80009c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2201      	movs	r2, #1
 80009c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	4798      	blx	r3
    } 
  }
  return status;
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40020008 	.word	0x40020008
 80009f0:	4002001c 	.word	0x4002001c
 80009f4:	40020030 	.word	0x40020030
 80009f8:	40020044 	.word	0x40020044
 80009fc:	40020058 	.word	0x40020058
 8000a00:	4002006c 	.word	0x4002006c
 8000a04:	40020000 	.word	0x40020000

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b08b      	sub	sp, #44	; 0x2c
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1a:	e169      	b.n	8000cf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	f040 8158 	bne.w	8000cea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	4a9a      	ldr	r2, [pc, #616]	; (8000ca8 <HAL_GPIO_Init+0x2a0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d05e      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a44:	4a98      	ldr	r2, [pc, #608]	; (8000ca8 <HAL_GPIO_Init+0x2a0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d875      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a4a:	4a98      	ldr	r2, [pc, #608]	; (8000cac <HAL_GPIO_Init+0x2a4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d058      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a50:	4a96      	ldr	r2, [pc, #600]	; (8000cac <HAL_GPIO_Init+0x2a4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d86f      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a56:	4a96      	ldr	r2, [pc, #600]	; (8000cb0 <HAL_GPIO_Init+0x2a8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d052      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a5c:	4a94      	ldr	r2, [pc, #592]	; (8000cb0 <HAL_GPIO_Init+0x2a8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d869      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a62:	4a94      	ldr	r2, [pc, #592]	; (8000cb4 <HAL_GPIO_Init+0x2ac>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d04c      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a68:	4a92      	ldr	r2, [pc, #584]	; (8000cb4 <HAL_GPIO_Init+0x2ac>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d863      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a6e:	4a92      	ldr	r2, [pc, #584]	; (8000cb8 <HAL_GPIO_Init+0x2b0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d046      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a74:	4a90      	ldr	r2, [pc, #576]	; (8000cb8 <HAL_GPIO_Init+0x2b0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d85d      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a7a:	2b12      	cmp	r3, #18
 8000a7c:	d82a      	bhi.n	8000ad4 <HAL_GPIO_Init+0xcc>
 8000a7e:	2b12      	cmp	r3, #18
 8000a80:	d859      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a82:	a201      	add	r2, pc, #4	; (adr r2, 8000a88 <HAL_GPIO_Init+0x80>)
 8000a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a88:	08000b03 	.word	0x08000b03
 8000a8c:	08000add 	.word	0x08000add
 8000a90:	08000aef 	.word	0x08000aef
 8000a94:	08000b31 	.word	0x08000b31
 8000a98:	08000b37 	.word	0x08000b37
 8000a9c:	08000b37 	.word	0x08000b37
 8000aa0:	08000b37 	.word	0x08000b37
 8000aa4:	08000b37 	.word	0x08000b37
 8000aa8:	08000b37 	.word	0x08000b37
 8000aac:	08000b37 	.word	0x08000b37
 8000ab0:	08000b37 	.word	0x08000b37
 8000ab4:	08000b37 	.word	0x08000b37
 8000ab8:	08000b37 	.word	0x08000b37
 8000abc:	08000b37 	.word	0x08000b37
 8000ac0:	08000b37 	.word	0x08000b37
 8000ac4:	08000b37 	.word	0x08000b37
 8000ac8:	08000b37 	.word	0x08000b37
 8000acc:	08000ae5 	.word	0x08000ae5
 8000ad0:	08000af9 	.word	0x08000af9
 8000ad4:	4a79      	ldr	r2, [pc, #484]	; (8000cbc <HAL_GPIO_Init+0x2b4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d013      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ada:	e02c      	b.n	8000b36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	623b      	str	r3, [r7, #32]
          break;
 8000ae2:	e029      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	e024      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	3308      	adds	r3, #8
 8000af4:	623b      	str	r3, [r7, #32]
          break;
 8000af6:	e01f      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	330c      	adds	r3, #12
 8000afe:	623b      	str	r3, [r7, #32]
          break;
 8000b00:	e01a      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d102      	bne.n	8000b10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	623b      	str	r3, [r7, #32]
          break;
 8000b0e:	e013      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d105      	bne.n	8000b24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	611a      	str	r2, [r3, #16]
          break;
 8000b22:	e009      	b.n	8000b38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b24:	2308      	movs	r3, #8
 8000b26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	615a      	str	r2, [r3, #20]
          break;
 8000b2e:	e003      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e000      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          break;
 8000b36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d801      	bhi.n	8000b42 <HAL_GPIO_Init+0x13a>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	e001      	b.n	8000b46 <HAL_GPIO_Init+0x13e>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3304      	adds	r3, #4
 8000b46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	2bff      	cmp	r3, #255	; 0xff
 8000b4c:	d802      	bhi.n	8000b54 <HAL_GPIO_Init+0x14c>
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	e002      	b.n	8000b5a <HAL_GPIO_Init+0x152>
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	3b08      	subs	r3, #8
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	210f      	movs	r1, #15
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	6a39      	ldr	r1, [r7, #32]
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	431a      	orrs	r2, r3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 80b1 	beq.w	8000cea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b88:	4b4d      	ldr	r3, [pc, #308]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a4c      	ldr	r2, [pc, #304]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b4a      	ldr	r3, [pc, #296]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ba0:	4a48      	ldr	r2, [pc, #288]	; (8000cc4 <HAL_GPIO_Init+0x2bc>)
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a40      	ldr	r2, [pc, #256]	; (8000cc8 <HAL_GPIO_Init+0x2c0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d013      	beq.n	8000bf4 <HAL_GPIO_Init+0x1ec>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a3f      	ldr	r2, [pc, #252]	; (8000ccc <HAL_GPIO_Init+0x2c4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d00d      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e8>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a3e      	ldr	r2, [pc, #248]	; (8000cd0 <HAL_GPIO_Init+0x2c8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d007      	beq.n	8000bec <HAL_GPIO_Init+0x1e4>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a3d      	ldr	r2, [pc, #244]	; (8000cd4 <HAL_GPIO_Init+0x2cc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d101      	bne.n	8000be8 <HAL_GPIO_Init+0x1e0>
 8000be4:	2303      	movs	r3, #3
 8000be6:	e006      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000be8:	2304      	movs	r3, #4
 8000bea:	e004      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e002      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf8:	f002 0203 	and.w	r2, r2, #3
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	4093      	lsls	r3, r2
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c06:	492f      	ldr	r1, [pc, #188]	; (8000cc4 <HAL_GPIO_Init+0x2bc>)
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c20:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	492c      	ldr	r1, [pc, #176]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	600b      	str	r3, [r1, #0]
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	4928      	ldr	r1, [pc, #160]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d006      	beq.n	8000c56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	4922      	ldr	r1, [pc, #136]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	604b      	str	r3, [r1, #4]
 8000c54:	e006      	b.n	8000c64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	491e      	ldr	r1, [pc, #120]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	4918      	ldr	r1, [pc, #96]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	608b      	str	r3, [r1, #8]
 8000c7c:	e006      	b.n	8000c8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	4914      	ldr	r1, [pc, #80]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d021      	beq.n	8000cdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60cb      	str	r3, [r1, #12]
 8000ca4:	e021      	b.n	8000cea <HAL_GPIO_Init+0x2e2>
 8000ca6:	bf00      	nop
 8000ca8:	10320000 	.word	0x10320000
 8000cac:	10310000 	.word	0x10310000
 8000cb0:	10220000 	.word	0x10220000
 8000cb4:	10210000 	.word	0x10210000
 8000cb8:	10120000 	.word	0x10120000
 8000cbc:	10110000 	.word	0x10110000
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010000 	.word	0x40010000
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	40011400 	.word	0x40011400
 8000cd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	4909      	ldr	r1, [pc, #36]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	3301      	adds	r3, #1
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f47f ae8e 	bne.w	8000a1c <HAL_GPIO_Init+0x14>
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	372c      	adds	r7, #44	; 0x2c
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e26c      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 8087 	beq.w	8000e3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d30:	4b92      	ldr	r3, [pc, #584]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 030c 	and.w	r3, r3, #12
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d00c      	beq.n	8000d56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d3c:	4b8f      	ldr	r3, [pc, #572]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b08      	cmp	r3, #8
 8000d46:	d112      	bne.n	8000d6e <HAL_RCC_OscConfig+0x5e>
 8000d48:	4b8c      	ldr	r3, [pc, #560]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d54:	d10b      	bne.n	8000d6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d56:	4b89      	ldr	r3, [pc, #548]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d06c      	beq.n	8000e3c <HAL_RCC_OscConfig+0x12c>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d168      	bne.n	8000e3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e246      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d76:	d106      	bne.n	8000d86 <HAL_RCC_OscConfig+0x76>
 8000d78:	4b80      	ldr	r3, [pc, #512]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a7f      	ldr	r2, [pc, #508]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e02e      	b.n	8000de4 <HAL_RCC_OscConfig+0xd4>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10c      	bne.n	8000da8 <HAL_RCC_OscConfig+0x98>
 8000d8e:	4b7b      	ldr	r3, [pc, #492]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a7a      	ldr	r2, [pc, #488]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4b78      	ldr	r3, [pc, #480]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a77      	ldr	r2, [pc, #476]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e01d      	b.n	8000de4 <HAL_RCC_OscConfig+0xd4>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db0:	d10c      	bne.n	8000dcc <HAL_RCC_OscConfig+0xbc>
 8000db2:	4b72      	ldr	r3, [pc, #456]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a71      	ldr	r2, [pc, #452]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	4b6f      	ldr	r3, [pc, #444]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a6e      	ldr	r2, [pc, #440]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e00b      	b.n	8000de4 <HAL_RCC_OscConfig+0xd4>
 8000dcc:	4b6b      	ldr	r3, [pc, #428]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a6a      	ldr	r2, [pc, #424]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b68      	ldr	r3, [pc, #416]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a67      	ldr	r2, [pc, #412]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d013      	beq.n	8000e14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fc72 	bl	80006d4 <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fc6e 	bl	80006d4 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e1fa      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e06:	4b5d      	ldr	r3, [pc, #372]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f0      	beq.n	8000df4 <HAL_RCC_OscConfig+0xe4>
 8000e12:	e014      	b.n	8000e3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fc5e 	bl	80006d4 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fc5a 	bl	80006d4 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b64      	cmp	r3, #100	; 0x64
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e1e6      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2e:	4b53      	ldr	r3, [pc, #332]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x10c>
 8000e3a:	e000      	b.n	8000e3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d063      	beq.n	8000f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 030c 	and.w	r3, r3, #12
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00b      	beq.n	8000e6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e56:	4b49      	ldr	r3, [pc, #292]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 030c 	and.w	r3, r3, #12
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d11c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x18c>
 8000e62:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d116      	bne.n	8000e9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6e:	4b43      	ldr	r3, [pc, #268]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d005      	beq.n	8000e86 <HAL_RCC_OscConfig+0x176>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d001      	beq.n	8000e86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e1ba      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e86:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4939      	ldr	r1, [pc, #228]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9a:	e03a      	b.n	8000f12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d020      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <HAL_RCC_OscConfig+0x270>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fc13 	bl	80006d4 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb2:	f7ff fc0f 	bl	80006d4 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e19b      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0f0      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed0:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4927      	ldr	r1, [pc, #156]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	600b      	str	r3, [r1, #0]
 8000ee4:	e015      	b.n	8000f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fbf2 	bl	80006d4 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fbee 	bl	80006d4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e17a      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d03a      	beq.n	8000f94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d019      	beq.n	8000f5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_RCC_OscConfig+0x274>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2c:	f7ff fbd2 	bl	80006d4 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f34:	f7ff fbce 	bl	80006d4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e15a      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f0      	beq.n	8000f34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f000 fb08 	bl	8001568 <RCC_Delay>
 8000f58:	e01c      	b.n	8000f94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_RCC_OscConfig+0x274>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f60:	f7ff fbb8 	bl	80006d4 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f66:	e00f      	b.n	8000f88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f68:	f7ff fbb4 	bl	80006d4 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d908      	bls.n	8000f88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e140      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	42420000 	.word	0x42420000
 8000f84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f88:	4b9e      	ldr	r3, [pc, #632]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1e9      	bne.n	8000f68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80a6 	beq.w	80010ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa6:	4b97      	ldr	r3, [pc, #604]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10d      	bne.n	8000fce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b94      	ldr	r3, [pc, #592]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a93      	ldr	r2, [pc, #588]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b91      	ldr	r3, [pc, #580]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fce:	4b8e      	ldr	r3, [pc, #568]	; (8001208 <HAL_RCC_OscConfig+0x4f8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d118      	bne.n	800100c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fda:	4b8b      	ldr	r3, [pc, #556]	; (8001208 <HAL_RCC_OscConfig+0x4f8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a8a      	ldr	r2, [pc, #552]	; (8001208 <HAL_RCC_OscConfig+0x4f8>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fb75 	bl	80006d4 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fee:	f7ff fb71 	bl	80006d4 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b64      	cmp	r3, #100	; 0x64
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e0fd      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001000:	4b81      	ldr	r3, [pc, #516]	; (8001208 <HAL_RCC_OscConfig+0x4f8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d106      	bne.n	8001022 <HAL_RCC_OscConfig+0x312>
 8001014:	4b7b      	ldr	r3, [pc, #492]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4a7a      	ldr	r2, [pc, #488]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6213      	str	r3, [r2, #32]
 8001020:	e02d      	b.n	800107e <HAL_RCC_OscConfig+0x36e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10c      	bne.n	8001044 <HAL_RCC_OscConfig+0x334>
 800102a:	4b76      	ldr	r3, [pc, #472]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a75      	ldr	r2, [pc, #468]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6213      	str	r3, [r2, #32]
 8001036:	4b73      	ldr	r3, [pc, #460]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a72      	ldr	r2, [pc, #456]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	6213      	str	r3, [r2, #32]
 8001042:	e01c      	b.n	800107e <HAL_RCC_OscConfig+0x36e>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b05      	cmp	r3, #5
 800104a:	d10c      	bne.n	8001066 <HAL_RCC_OscConfig+0x356>
 800104c:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4a6c      	ldr	r2, [pc, #432]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	6213      	str	r3, [r2, #32]
 8001058:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4a69      	ldr	r2, [pc, #420]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6213      	str	r3, [r2, #32]
 8001064:	e00b      	b.n	800107e <HAL_RCC_OscConfig+0x36e>
 8001066:	4b67      	ldr	r3, [pc, #412]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4a66      	ldr	r2, [pc, #408]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	6213      	str	r3, [r2, #32]
 8001072:	4b64      	ldr	r3, [pc, #400]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4a63      	ldr	r2, [pc, #396]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	f023 0304 	bic.w	r3, r3, #4
 800107c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d015      	beq.n	80010b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001086:	f7ff fb25 	bl	80006d4 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108c:	e00a      	b.n	80010a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800108e:	f7ff fb21 	bl	80006d4 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	f241 3288 	movw	r2, #5000	; 0x1388
 800109c:	4293      	cmp	r3, r2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e0ab      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a4:	4b57      	ldr	r3, [pc, #348]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0ee      	beq.n	800108e <HAL_RCC_OscConfig+0x37e>
 80010b0:	e014      	b.n	80010dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b2:	f7ff fb0f 	bl	80006d4 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b8:	e00a      	b.n	80010d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ba:	f7ff fb0b 	bl	80006d4 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e095      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d0:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1ee      	bne.n	80010ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d105      	bne.n	80010ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a47      	ldr	r2, [pc, #284]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8081 	beq.w	80011fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f8:	4b42      	ldr	r3, [pc, #264]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b08      	cmp	r3, #8
 8001102:	d061      	beq.n	80011c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d146      	bne.n	800119a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800110c:	4b3f      	ldr	r3, [pc, #252]	; (800120c <HAL_RCC_OscConfig+0x4fc>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001112:	f7ff fadf 	bl	80006d4 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111a:	f7ff fadb 	bl	80006d4 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e067      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112c:	4b35      	ldr	r3, [pc, #212]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f0      	bne.n	800111a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001140:	d108      	bne.n	8001154 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	492d      	ldr	r1, [pc, #180]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a19      	ldr	r1, [r3, #32]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	430b      	orrs	r3, r1
 8001166:	4927      	ldr	r1, [pc, #156]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <HAL_RCC_OscConfig+0x4fc>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001172:	f7ff faaf 	bl	80006d4 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117a:	f7ff faab 	bl	80006d4 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e037      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0x46a>
 8001198:	e02f      	b.n	80011fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_RCC_OscConfig+0x4fc>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fa98 	bl	80006d4 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a8:	f7ff fa94 	bl	80006d4 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e020      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0x498>
 80011c6:	e018      	b.n	80011fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e013      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	40007000 	.word	0x40007000
 800120c:	42420060 	.word	0x42420060

08001210 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e0d0      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001224:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d910      	bls.n	8001254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	4b67      	ldr	r3, [pc, #412]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 0207 	bic.w	r2, r3, #7
 800123a:	4965      	ldr	r1, [pc, #404]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d001      	beq.n	8001254 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0b8      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800126c:	4b59      	ldr	r3, [pc, #356]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4a58      	ldr	r2, [pc, #352]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001276:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001284:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4a52      	ldr	r2, [pc, #328]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800128a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800128e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001290:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	494d      	ldr	r1, [pc, #308]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d040      	beq.n	8001330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d107      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d115      	bne.n	80012ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e07f      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d107      	bne.n	80012de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e073      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e06b      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ee:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f023 0203 	bic.w	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4936      	ldr	r1, [pc, #216]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001300:	f7ff f9e8 	bl	80006d4 <HAL_GetTick>
 8001304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001306:	e00a      	b.n	800131e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001308:	f7ff f9e4 	bl	80006d4 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f241 3288 	movw	r2, #5000	; 0x1388
 8001316:	4293      	cmp	r3, r2
 8001318:	d901      	bls.n	800131e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e053      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 020c 	and.w	r2, r3, #12
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	429a      	cmp	r2, r3
 800132e:	d1eb      	bne.n	8001308 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d210      	bcs.n	8001360 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 0207 	bic.w	r2, r3, #7
 8001346:	4922      	ldr	r1, [pc, #136]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d001      	beq.n	8001360 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e032      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4916      	ldr	r1, [pc, #88]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d009      	beq.n	800139e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	490e      	ldr	r1, [pc, #56]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800139e:	f000 f821 	bl	80013e4 <HAL_RCC_GetSysClockFreq>
 80013a2:	4602      	mov	r2, r0
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	490a      	ldr	r1, [pc, #40]	; (80013d8 <HAL_RCC_ClockConfig+0x1c8>)
 80013b0:	5ccb      	ldrb	r3, [r1, r3]
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <HAL_RCC_ClockConfig+0x1cc>)
 80013b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_RCC_ClockConfig+0x1d0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8b4 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40022000 	.word	0x40022000
 80013d4:	40021000 	.word	0x40021000
 80013d8:	08004714 	.word	0x08004714
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e4:	b490      	push	{r4, r7}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013ec:	1d3c      	adds	r4, r7, #4
 80013ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013f4:	f240 2301 	movw	r3, #513	; 0x201
 80013f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b04      	cmp	r3, #4
 800141c:	d002      	beq.n	8001424 <HAL_RCC_GetSysClockFreq+0x40>
 800141e:	2b08      	cmp	r3, #8
 8001420:	d003      	beq.n	800142a <HAL_RCC_GetSysClockFreq+0x46>
 8001422:	e02d      	b.n	8001480 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001426:	623b      	str	r3, [r7, #32]
      break;
 8001428:	e02d      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	0c9b      	lsrs	r3, r3, #18
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001436:	4413      	add	r3, r2
 8001438:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800143c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d013      	beq.n	8001470 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_RCC_GetSysClockFreq+0xb4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	0c5b      	lsrs	r3, r3, #17
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001456:	4413      	add	r3, r2
 8001458:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800145c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	4a0e      	ldr	r2, [pc, #56]	; (800149c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001462:	fb02 f203 	mul.w	r2, r2, r3
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	fbb2 f3f3 	udiv	r3, r2, r3
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
 800146e:	e004      	b.n	800147a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	623b      	str	r3, [r7, #32]
      break;
 800147e:	e002      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001482:	623b      	str	r3, [r7, #32]
      break;
 8001484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001486:	6a3b      	ldr	r3, [r7, #32]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bc90      	pop	{r4, r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	080046fc 	.word	0x080046fc
 8001498:	40021000 	.word	0x40021000
 800149c:	007a1200 	.word	0x007a1200
 80014a0:	003d0900 	.word	0x003d0900

080014a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014a8:	4b02      	ldr	r3, [pc, #8]	; (80014b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	20000000 	.word	0x20000000

080014b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014bc:	f7ff fff2 	bl	80014a4 <HAL_RCC_GetHCLKFreq>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	4903      	ldr	r1, [pc, #12]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ce:	5ccb      	ldrb	r3, [r1, r3]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	08004724 	.word	0x08004724

080014e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014e4:	f7ff ffde 	bl	80014a4 <HAL_RCC_GetHCLKFreq>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	0adb      	lsrs	r3, r3, #11
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	4903      	ldr	r1, [pc, #12]	; (8001504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014f6:	5ccb      	ldrb	r3, [r1, r3]
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	08004724 	.word	0x08004724

08001508 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	220f      	movs	r2, #15
 8001516:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_RCC_GetClockConfig+0x58>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0203 	and.w	r2, r3, #3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_RCC_GetClockConfig+0x58>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_GetClockConfig+0x58>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_RCC_GetClockConfig+0x58>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_RCC_GetClockConfig+0x5c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0207 	and.w	r2, r3, #7
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	40022000 	.word	0x40022000

08001568 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <RCC_Delay+0x34>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <RCC_Delay+0x38>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0a5b      	lsrs	r3, r3, #9
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001584:	bf00      	nop
  }
  while (Delay --);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	60fa      	str	r2, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f9      	bne.n	8001584 <RCC_Delay+0x1c>
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	20000000 	.word	0x20000000
 80015a0:	10624dd3 	.word	0x10624dd3

080015a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e041      	b.n	800163a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f839 	bl	8001642 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3304      	adds	r3, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4610      	mov	r0, r2
 80015e4:	f000 f9b4 	bl	8001950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d001      	beq.n	800166c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e03a      	b.n	80016e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <HAL_TIM_Base_Start_IT+0x98>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00e      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x58>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001696:	d009      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x58>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d004      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x58>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d111      	bne.n	80016d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d010      	beq.n	80016e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ce:	e007      	b.n	80016e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	40000400 	.word	0x40000400
 80016f4:	40000800 	.word	0x40000800

080016f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b02      	cmp	r3, #2
 800170c:	d122      	bne.n	8001754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b02      	cmp	r3, #2
 800171a:	d11b      	bne.n	8001754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f06f 0202 	mvn.w	r2, #2
 8001724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f8ed 	bl	800191a <HAL_TIM_IC_CaptureCallback>
 8001740:	e005      	b.n	800174e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f8e0 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f8ef 	bl	800192c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b04      	cmp	r3, #4
 8001760:	d122      	bne.n	80017a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b04      	cmp	r3, #4
 800176e:	d11b      	bne.n	80017a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0204 	mvn.w	r2, #4
 8001778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2202      	movs	r2, #2
 800177e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f8c3 	bl	800191a <HAL_TIM_IC_CaptureCallback>
 8001794:	e005      	b.n	80017a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f8b6 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f8c5 	bl	800192c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d122      	bne.n	80017fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d11b      	bne.n	80017fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f06f 0208 	mvn.w	r2, #8
 80017cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2204      	movs	r2, #4
 80017d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f899 	bl	800191a <HAL_TIM_IC_CaptureCallback>
 80017e8:	e005      	b.n	80017f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f88c 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f89b 	bl	800192c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b10      	cmp	r3, #16
 8001808:	d122      	bne.n	8001850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b10      	cmp	r3, #16
 8001816:	d11b      	bne.n	8001850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0210 	mvn.w	r2, #16
 8001820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2208      	movs	r2, #8
 8001826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f86f 	bl	800191a <HAL_TIM_IC_CaptureCallback>
 800183c:	e005      	b.n	800184a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f862 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f871 	bl	800192c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b01      	cmp	r3, #1
 800185c:	d10e      	bne.n	800187c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d107      	bne.n	800187c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0201 	mvn.w	r2, #1
 8001874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7fe fdb6 	bl	80003e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001886:	2b80      	cmp	r3, #128	; 0x80
 8001888:	d10e      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001894:	2b80      	cmp	r3, #128	; 0x80
 8001896:	d107      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f8bf 	bl	8001a26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	2b40      	cmp	r3, #64	; 0x40
 80018b4:	d10e      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c0:	2b40      	cmp	r3, #64	; 0x40
 80018c2:	d107      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f835 	bl	800193e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b20      	cmp	r3, #32
 80018e0:	d10e      	bne.n	8001900 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d107      	bne.n	8001900 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0220 	mvn.w	r2, #32
 80018f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f88a 	bl	8001a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <TIM_Base_SetConfig+0xb8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00b      	beq.n	8001980 <TIM_Base_SetConfig+0x30>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196e:	d007      	beq.n	8001980 <TIM_Base_SetConfig+0x30>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a26      	ldr	r2, [pc, #152]	; (8001a0c <TIM_Base_SetConfig+0xbc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d003      	beq.n	8001980 <TIM_Base_SetConfig+0x30>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a25      	ldr	r2, [pc, #148]	; (8001a10 <TIM_Base_SetConfig+0xc0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d108      	bne.n	8001992 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a1c      	ldr	r2, [pc, #112]	; (8001a08 <TIM_Base_SetConfig+0xb8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00b      	beq.n	80019b2 <TIM_Base_SetConfig+0x62>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a0:	d007      	beq.n	80019b2 <TIM_Base_SetConfig+0x62>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <TIM_Base_SetConfig+0xbc>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d003      	beq.n	80019b2 <TIM_Base_SetConfig+0x62>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <TIM_Base_SetConfig+0xc0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d108      	bne.n	80019c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <TIM_Base_SetConfig+0xb8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d103      	bne.n	80019f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	615a      	str	r2, [r3, #20]
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	40012c00 	.word	0x40012c00
 8001a0c:	40000400 	.word	0x40000400
 8001a10:	40000800 	.word	0x40000800

08001a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e03f      	b.n	8001aca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe fd12 	bl	8000488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2224      	movs	r2, #36	; 0x24
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fb49 	bl	8002114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10d      	bne.n	8001b26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_UART_IRQHandler+0x52>
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fa4f 	bl	8001fc2 <UART_Receive_IT>
      return;
 8001b24:	e17b      	b.n	8001e1e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80b1 	beq.w	8001c90 <HAL_UART_IRQHandler+0x1bc>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_UART_IRQHandler+0x70>
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80a6 	beq.w	8001c90 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <HAL_UART_IRQHandler+0x90>
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00a      	beq.n	8001b84 <HAL_UART_IRQHandler+0xb0>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0202 	orr.w	r2, r3, #2
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00a      	beq.n	8001ba4 <HAL_UART_IRQHandler+0xd0>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f043 0204 	orr.w	r2, r3, #4
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00f      	beq.n	8001bce <HAL_UART_IRQHandler+0xfa>
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d104      	bne.n	8001bc2 <HAL_UART_IRQHandler+0xee>
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f043 0208 	orr.w	r2, r3, #8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 811e 	beq.w	8001e14 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <HAL_UART_IRQHandler+0x11e>
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f9e8 	bl	8001fc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf14      	ite	ne
 8001c00:	2301      	movne	r3, #1
 8001c02:	2300      	moveq	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <HAL_UART_IRQHandler+0x146>
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d031      	beq.n	8001c7e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f92a 	bl	8001e74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d023      	beq.n	8001c76 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695a      	ldr	r2, [r3, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c3c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d013      	beq.n	8001c6e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4a:	4a76      	ldr	r2, [pc, #472]	; (8001e24 <HAL_UART_IRQHandler+0x350>)
 8001c4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fe62 	bl	800091c <HAL_DMA_Abort_IT>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d016      	beq.n	8001c8c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c6c:	e00e      	b.n	8001c8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8ec 	bl	8001e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c74:	e00a      	b.n	8001c8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8e8 	bl	8001e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c7c:	e006      	b.n	8001c8c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8e4 	bl	8001e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001c8a:	e0c3      	b.n	8001e14 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c8c:	bf00      	nop
    return;
 8001c8e:	e0c1      	b.n	8001e14 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	f040 80a1 	bne.w	8001ddc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 809b 	beq.w	8001ddc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8095 	beq.w	8001ddc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d04e      	beq.n	8001d74 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001ce0:	8a3b      	ldrh	r3, [r7, #16]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8098 	beq.w	8001e18 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001cec:	8a3a      	ldrh	r2, [r7, #16]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	f080 8092 	bcs.w	8001e18 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	8a3a      	ldrh	r2, [r7, #16]
 8001cf8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d02b      	beq.n	8001d5c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d12:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d32:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0210 	bic.w	r2, r2, #16
 8001d50:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fda5 	bl	80008a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f876 	bl	8001e5e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001d72:	e051      	b.n	8001e18 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d047      	beq.n	8001e1c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001d8c:	8a7b      	ldrh	r3, [r7, #18]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d044      	beq.n	8001e1c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001da0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0210 	bic.w	r2, r2, #16
 8001dce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001dd0:	8a7b      	ldrh	r3, [r7, #18]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f842 	bl	8001e5e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001dda:	e01f      	b.n	8001e1c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <HAL_UART_IRQHandler+0x324>
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f87f 	bl	8001ef4 <UART_Transmit_IT>
    return;
 8001df6:	e012      	b.n	8001e1e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00d      	beq.n	8001e1e <HAL_UART_IRQHandler+0x34a>
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8c0 	bl	8001f92 <UART_EndTransmit_IT>
    return;
 8001e12:	e004      	b.n	8001e1e <HAL_UART_IRQHandler+0x34a>
    return;
 8001e14:	bf00      	nop
 8001e16:	e002      	b.n	8001e1e <HAL_UART_IRQHandler+0x34a>
      return;
 8001e18:	bf00      	nop
 8001e1a:	e000      	b.n	8001e1e <HAL_UART_IRQHandler+0x34a>
      return;
 8001e1c:	bf00      	nop
  }
}
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	08001ecd 	.word	0x08001ecd

08001e28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e8a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0210 	bic.w	r2, r2, #16
 8001eb2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7ff ffb0 	bl	8001e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b21      	cmp	r3, #33	; 0x21
 8001f06:	d13e      	bne.n	8001f86 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f10:	d114      	bne.n	8001f3c <UART_Transmit_IT+0x48>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d110      	bne.n	8001f3c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f2e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	1c9a      	adds	r2, r3, #2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	621a      	str	r2, [r3, #32]
 8001f3a:	e008      	b.n	8001f4e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	1c59      	adds	r1, r3, #1
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6211      	str	r1, [r2, #32]
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10f      	bne.n	8001f82 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
  }
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff38 	bl	8001e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b22      	cmp	r3, #34	; 0x22
 8001fd4:	f040 8099 	bne.w	800210a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe0:	d117      	bne.n	8002012 <UART_Receive_IT+0x50>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d113      	bne.n	8002012 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002000:	b29a      	uxth	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	1c9a      	adds	r2, r3, #2
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
 8002010:	e026      	b.n	8002060 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002024:	d007      	beq.n	8002036 <UART_Receive_IT+0x74>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10a      	bne.n	8002044 <UART_Receive_IT+0x82>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	e008      	b.n	8002056 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002050:	b2da      	uxtb	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29b      	uxth	r3, r3
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4619      	mov	r1, r3
 800206e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002070:	2b00      	cmp	r3, #0
 8002072:	d148      	bne.n	8002106 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0220 	bic.w	r2, r2, #32
 8002082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d123      	bne.n	80020fc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0210 	bic.w	r2, r2, #16
 80020c8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	d10a      	bne.n	80020ee <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020f2:	4619      	mov	r1, r3
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff feb2 	bl	8001e5e <HAL_UARTEx_RxEventCallback>
 80020fa:	e002      	b.n	8002102 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fe9c 	bl	8001e3a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e002      	b.n	800210c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800210a:	2302      	movs	r3, #2
  }
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	4313      	orrs	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800214e:	f023 030c 	bic.w	r3, r3, #12
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	430b      	orrs	r3, r1
 800215a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <UART_SetConfig+0x114>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d103      	bne.n	8002184 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800217c:	f7ff f9b0 	bl	80014e0 <HAL_RCC_GetPCLK2Freq>
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	e002      	b.n	800218a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002184:	f7ff f998 	bl	80014b8 <HAL_RCC_GetPCLK1Freq>
 8002188:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	009a      	lsls	r2, r3, #2
 8002194:	441a      	add	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	4a22      	ldr	r2, [pc, #136]	; (800222c <UART_SetConfig+0x118>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	0119      	lsls	r1, r3, #4
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	009a      	lsls	r2, r3, #2
 80021b4:	441a      	add	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <UART_SetConfig+0x118>)
 80021c2:	fba3 0302 	umull	r0, r3, r3, r2
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2064      	movs	r0, #100	; 0x64
 80021ca:	fb00 f303 	mul.w	r3, r0, r3
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	3332      	adds	r3, #50	; 0x32
 80021d4:	4a15      	ldr	r2, [pc, #84]	; (800222c <UART_SetConfig+0x118>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e0:	4419      	add	r1, r3
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	009a      	lsls	r2, r3, #2
 80021ec:	441a      	add	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <UART_SetConfig+0x118>)
 80021fa:	fba3 0302 	umull	r0, r3, r3, r2
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2064      	movs	r0, #100	; 0x64
 8002202:	fb00 f303 	mul.w	r3, r0, r3
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	3332      	adds	r3, #50	; 0x32
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <UART_SetConfig+0x118>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	f003 020f 	and.w	r2, r3, #15
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	440a      	add	r2, r1
 800221e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40013800 	.word	0x40013800
 800222c:	51eb851f 	.word	0x51eb851f

08002230 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800223e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002242:	2b84      	cmp	r3, #132	; 0x84
 8002244:	d005      	beq.n	8002252 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002246:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4413      	add	r3, r2
 800224e:	3303      	adds	r3, #3
 8002250:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002264:	f3ef 8305 	mrs	r3, IPSR
 8002268:	607b      	str	r3, [r7, #4]
  return(result);
 800226a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002284:	f001 f8f0 	bl	8003468 <vTaskStartScheduler>
  
  return osOK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	bd80      	pop	{r7, pc}

0800228e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800228e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002290:	b089      	sub	sp, #36	; 0x24
 8002292:	af04      	add	r7, sp, #16
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <osThreadCreate+0x54>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01c      	beq.n	80022e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685c      	ldr	r4, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681d      	ldr	r5, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691e      	ldr	r6, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ffb8 	bl	8002230 <makeFreeRtosPriority>
 80022c0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022ca:	9202      	str	r2, [sp, #8]
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	9100      	str	r1, [sp, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4632      	mov	r2, r6
 80022d4:	4629      	mov	r1, r5
 80022d6:	4620      	mov	r0, r4
 80022d8:	f000 ff08 	bl	80030ec <xTaskCreateStatic>
 80022dc:	4603      	mov	r3, r0
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	e01c      	b.n	800231c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685c      	ldr	r4, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022ee:	b29e      	uxth	r6, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff9a 	bl	8002230 <makeFreeRtosPriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	9200      	str	r2, [sp, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	4632      	mov	r2, r6
 800230a:	4629      	mov	r1, r5
 800230c:	4620      	mov	r0, r4
 800230e:	f000 ff49 	bl	80031a4 <xTaskCreate>
 8002312:	4603      	mov	r3, r0
 8002314:	2b01      	cmp	r3, #1
 8002316:	d001      	beq.n	800231c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002318:	2300      	movs	r3, #0
 800231a:	e000      	b.n	800231e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800231c:	68fb      	ldr	r3, [r7, #12]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002326 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <osDelay+0x16>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	e000      	b.n	800233e <osDelay+0x18>
 800233c:	2301      	movs	r3, #1
 800233e:	4618      	mov	r0, r3
 8002340:	f001 f85e 	bl	8003400 <vTaskDelay>
  
  return osOK;
 8002344:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800234e:	b590      	push	{r4, r7, lr}
 8002350:	b085      	sub	sp, #20
 8002352:	af02      	add	r7, sp, #8
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d011      	beq.n	8002384 <osMessageCreate+0x36>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00d      	beq.n	8002384 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2400      	movs	r4, #0
 800237a:	9400      	str	r4, [sp, #0]
 800237c:	f000 f9dc 	bl	8002738 <xQueueGenericCreateStatic>
 8002380:	4603      	mov	r3, r0
 8002382:	e008      	b.n	8002396 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	4619      	mov	r1, r3
 8002390:	f000 fa49 	bl	8002826 <xQueueGenericCreate>
 8002394:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bd90      	pop	{r4, r7, pc}
	...

080023a0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <osMessagePut+0x1e>
    ticks = 1;
 80023ba:	2301      	movs	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80023be:	f7ff ff4e 	bl	800225e <inHandlerMode>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d018      	beq.n	80023fa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80023c8:	f107 0210 	add.w	r2, r7, #16
 80023cc:	f107 0108 	add.w	r1, r7, #8
 80023d0:	2300      	movs	r3, #0
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fb82 	bl	8002adc <xQueueGenericSendFromISR>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <osMessagePut+0x42>
      return osErrorOS;
 80023de:	23ff      	movs	r3, #255	; 0xff
 80023e0:	e018      	b.n	8002414 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d014      	beq.n	8002412 <osMessagePut+0x72>
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <osMessagePut+0x7c>)
 80023ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	e00b      	b.n	8002412 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80023fa:	f107 0108 	add.w	r1, r7, #8
 80023fe:	2300      	movs	r3, #0
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fa6c 	bl	80028e0 <xQueueGenericSend>
 8002408:	4603      	mov	r3, r0
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <osMessagePut+0x72>
      return osErrorOS;
 800240e:	23ff      	movs	r3, #255	; 0xff
 8002410:	e000      	b.n	8002414 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	e000ed04 	.word	0xe000ed04

08002420 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b08b      	sub	sp, #44	; 0x2c
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	617b      	str	r3, [r7, #20]
    return event;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	461c      	mov	r4, r3
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800244a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800244e:	e054      	b.n	80024fa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002450:	2300      	movs	r3, #0
 8002452:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245e:	d103      	bne.n	8002468 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002460:	f04f 33ff 	mov.w	r3, #4294967295
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
 8002466:	e009      	b.n	800247c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <osMessageGet+0x5c>
      ticks = 1;
 8002478:	2301      	movs	r3, #1
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800247c:	f7ff feef 	bl	800225e <inHandlerMode>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01c      	beq.n	80024c0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002486:	f107 0220 	add.w	r2, r7, #32
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	3304      	adds	r3, #4
 8002490:	4619      	mov	r1, r3
 8002492:	68b8      	ldr	r0, [r7, #8]
 8002494:	f000 fc9a 	bl	8002dcc <xQueueReceiveFromISR>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d102      	bne.n	80024a4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800249e:	2310      	movs	r3, #16
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	e001      	b.n	80024a8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01d      	beq.n	80024ea <osMessageGet+0xca>
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <osMessageGet+0xe4>)
 80024b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	e014      	b.n	80024ea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	3304      	adds	r3, #4
 80024c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c8:	4619      	mov	r1, r3
 80024ca:	68b8      	ldr	r0, [r7, #8]
 80024cc:	f000 fb9e 	bl	8002c0c <xQueueReceive>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d102      	bne.n	80024dc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80024d6:	2310      	movs	r3, #16
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e006      	b.n	80024ea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <osMessageGet+0xc6>
 80024e2:	2300      	movs	r3, #0
 80024e4:	e000      	b.n	80024e8 <osMessageGet+0xc8>
 80024e6:	2340      	movs	r3, #64	; 0x40
 80024e8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	461c      	mov	r4, r3
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	372c      	adds	r7, #44	; 0x2c
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd90      	pop	{r4, r7, pc}
 8002502:	bf00      	nop
 8002504:	e000ed04 	.word	0xe000ed04

08002508 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f103 0208 	add.w	r2, r3, #8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f04f 32ff 	mov.w	r2, #4294967295
 8002520:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f103 0208 	add.w	r2, r3, #8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f103 0208 	add.w	r2, r3, #8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	601a      	str	r2, [r3, #0]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ba:	d103      	bne.n	80025c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e00c      	b.n	80025de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3308      	adds	r3, #8
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	e002      	b.n	80025d2 <vListInsert+0x2e>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d2f6      	bcs.n	80025cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	601a      	str	r2, [r3, #0]
}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6892      	ldr	r2, [r2, #8]
 800262a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6852      	ldr	r2, [r2, #4]
 8002634:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d103      	bne.n	8002648 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	1e5a      	subs	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
	...

08002668 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800267c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800268e:	bf00      	nop
 8002690:	e7fe      	b.n	8002690 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002692:	f001 fceb 	bl	800406c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	68f9      	ldr	r1, [r7, #12]
 80026a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	441a      	add	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	3b01      	subs	r3, #1
 80026c4:	68f9      	ldr	r1, [r7, #12]
 80026c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	441a      	add	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	22ff      	movs	r2, #255	; 0xff
 80026d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	22ff      	movs	r2, #255	; 0xff
 80026de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d114      	bne.n	8002712 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01a      	beq.n	8002726 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3310      	adds	r3, #16
 80026f4:	4618      	mov	r0, r3
 80026f6:	f001 f8fd 	bl	80038f4 <xTaskRemoveFromEventList>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d012      	beq.n	8002726 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <xQueueGenericReset+0xcc>)
 8002702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	e009      	b.n	8002726 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3310      	adds	r3, #16
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fef6 	bl	8002508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3324      	adds	r3, #36	; 0x24
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fef1 	bl	8002508 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002726:	f001 fcd1 	bl	80040cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800272a:	2301      	movs	r3, #1
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	e000ed04 	.word	0xe000ed04

08002738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08e      	sub	sp, #56	; 0x38
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800275e:	bf00      	nop
 8002760:	e7fe      	b.n	8002760 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
}
 800277a:	bf00      	nop
 800277c:	e7fe      	b.n	800277c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <xQueueGenericCreateStatic+0x52>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <xQueueGenericCreateStatic+0x56>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <xQueueGenericCreateStatic+0x58>
 800278e:	2300      	movs	r3, #0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10a      	bne.n	80027aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	623b      	str	r3, [r7, #32]
}
 80027a6:	bf00      	nop
 80027a8:	e7fe      	b.n	80027a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <xQueueGenericCreateStatic+0x7e>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <xQueueGenericCreateStatic+0x82>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <xQueueGenericCreateStatic+0x84>
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	61fb      	str	r3, [r7, #28]
}
 80027d2:	bf00      	nop
 80027d4:	e7fe      	b.n	80027d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027d6:	2348      	movs	r3, #72	; 0x48
 80027d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b48      	cmp	r3, #72	; 0x48
 80027de:	d00a      	beq.n	80027f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80027e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e4:	f383 8811 	msr	BASEPRI, r3
 80027e8:	f3bf 8f6f 	isb	sy
 80027ec:	f3bf 8f4f 	dsb	sy
 80027f0:	61bb      	str	r3, [r7, #24]
}
 80027f2:	bf00      	nop
 80027f4:	e7fe      	b.n	80027f4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00d      	beq.n	800281c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002808:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f843 	bl	80028a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800281e:	4618      	mov	r0, r3
 8002820:	3730      	adds	r7, #48	; 0x30
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002826:	b580      	push	{r7, lr}
 8002828:	b08a      	sub	sp, #40	; 0x28
 800282a:	af02      	add	r7, sp, #8
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	4613      	mov	r3, r2
 8002832:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <xQueueGenericCreate+0x2a>
	__asm volatile
 800283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	613b      	str	r3, [r7, #16]
}
 800284c:	bf00      	nop
 800284e:	e7fe      	b.n	800284e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	e004      	b.n	8002866 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3348      	adds	r3, #72	; 0x48
 800286a:	4618      	mov	r0, r3
 800286c:	f001 fcfe 	bl	800426c <pvPortMalloc>
 8002870:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00f      	beq.n	8002898 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	3348      	adds	r3, #72	; 0x48
 800287c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002886:	79fa      	ldrb	r2, [r7, #7]
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f805 	bl	80028a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002898:	69bb      	ldr	r3, [r7, #24]
	}
 800289a:	4618      	mov	r0, r3
 800289c:	3720      	adds	r7, #32
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d103      	bne.n	80028be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e002      	b.n	80028c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028d0:	2101      	movs	r1, #1
 80028d2:	69b8      	ldr	r0, [r7, #24]
 80028d4:	f7ff fec8 	bl	8002668 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08e      	sub	sp, #56	; 0x38
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028ee:	2300      	movs	r3, #0
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <xQueueGenericSend+0x32>
	__asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800290e:	bf00      	nop
 8002910:	e7fe      	b.n	8002910 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d103      	bne.n	8002920 <xQueueGenericSend+0x40>
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <xQueueGenericSend+0x44>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <xQueueGenericSend+0x46>
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <xQueueGenericSend+0x60>
	__asm volatile
 800292a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292e:	f383 8811 	msr	BASEPRI, r3
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800293c:	bf00      	nop
 800293e:	e7fe      	b.n	800293e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d103      	bne.n	800294e <xQueueGenericSend+0x6e>
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <xQueueGenericSend+0x72>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <xQueueGenericSend+0x74>
 8002952:	2300      	movs	r3, #0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <xQueueGenericSend+0x8e>
	__asm volatile
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	623b      	str	r3, [r7, #32]
}
 800296a:	bf00      	nop
 800296c:	e7fe      	b.n	800296c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800296e:	f001 f981 	bl	8003c74 <xTaskGetSchedulerState>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <xQueueGenericSend+0x9e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <xQueueGenericSend+0xa2>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <xQueueGenericSend+0xa4>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <xQueueGenericSend+0xbe>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	61fb      	str	r3, [r7, #28]
}
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800299e:	f001 fb65 	bl	800406c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d302      	bcc.n	80029b4 <xQueueGenericSend+0xd4>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d129      	bne.n	8002a08 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ba:	f000 fa87 	bl	8002ecc <prvCopyDataToQueue>
 80029be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d010      	beq.n	80029ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	3324      	adds	r3, #36	; 0x24
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 ff91 	bl	80038f4 <xTaskRemoveFromEventList>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d013      	beq.n	8002a00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029d8:	4b3f      	ldr	r3, [pc, #252]	; (8002ad8 <xQueueGenericSend+0x1f8>)
 80029da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	e00a      	b.n	8002a00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <xQueueGenericSend+0x1f8>)
 80029f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a00:	f001 fb64 	bl	80040cc <vPortExitCritical>
				return pdPASS;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e063      	b.n	8002ad0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a0e:	f001 fb5d 	bl	80040cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e05c      	b.n	8002ad0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d106      	bne.n	8002a2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 ffc9 	bl	80039b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a2a:	f001 fb4f 	bl	80040cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a2e:	f000 fd7b 	bl	8003528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a32:	f001 fb1b 	bl	800406c <vPortEnterCritical>
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a42:	d103      	bne.n	8002a4c <xQueueGenericSend+0x16c>
 8002a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d103      	bne.n	8002a62 <xQueueGenericSend+0x182>
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a62:	f001 fb33 	bl	80040cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a66:	1d3a      	adds	r2, r7, #4
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 ffb8 	bl	80039e4 <xTaskCheckForTimeOut>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d124      	bne.n	8002ac4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a7c:	f000 fb1e 	bl	80030bc <prvIsQueueFull>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d018      	beq.n	8002ab8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	3310      	adds	r3, #16
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 ff0c 	bl	80038ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a96:	f000 faa9 	bl	8002fec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a9a:	f000 fd53 	bl	8003544 <xTaskResumeAll>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f af7c 	bne.w	800299e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <xQueueGenericSend+0x1f8>)
 8002aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	e772      	b.n	800299e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aba:	f000 fa97 	bl	8002fec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002abe:	f000 fd41 	bl	8003544 <xTaskResumeAll>
 8002ac2:	e76c      	b.n	800299e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ac6:	f000 fa91 	bl	8002fec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002aca:	f000 fd3b 	bl	8003544 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ace:	2300      	movs	r3, #0
		}
	}
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3738      	adds	r7, #56	; 0x38
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08e      	sub	sp, #56	; 0x38
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d103      	bne.n	8002b18 <xQueueGenericSendFromISR+0x3c>
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <xQueueGenericSendFromISR+0x40>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <xQueueGenericSendFromISR+0x42>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	623b      	str	r3, [r7, #32]
}
 8002b34:	bf00      	nop
 8002b36:	e7fe      	b.n	8002b36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d103      	bne.n	8002b46 <xQueueGenericSendFromISR+0x6a>
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <xQueueGenericSendFromISR+0x6e>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <xQueueGenericSendFromISR+0x70>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	61fb      	str	r3, [r7, #28]
}
 8002b62:	bf00      	nop
 8002b64:	e7fe      	b.n	8002b64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b66:	f001 fb43 	bl	80041f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b6a:	f3ef 8211 	mrs	r2, BASEPRI
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	61ba      	str	r2, [r7, #24]
 8002b80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d302      	bcc.n	8002b98 <xQueueGenericSendFromISR+0xbc>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d12c      	bne.n	8002bf2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ba8:	f000 f990 	bl	8002ecc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d112      	bne.n	8002bdc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	3324      	adds	r3, #36	; 0x24
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fe96 	bl	80038f4 <xTaskRemoveFromEventList>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00e      	beq.n	8002bec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00b      	beq.n	8002bec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e007      	b.n	8002bec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002be0:	3301      	adds	r3, #1
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	b25a      	sxtb	r2, r3
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002bec:	2301      	movs	r3, #1
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002bf0:	e001      	b.n	8002bf6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3738      	adds	r7, #56	; 0x38
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08c      	sub	sp, #48	; 0x30
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <xQueueReceive+0x30>
	__asm volatile
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	623b      	str	r3, [r7, #32]
}
 8002c38:	bf00      	nop
 8002c3a:	e7fe      	b.n	8002c3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d103      	bne.n	8002c4a <xQueueReceive+0x3e>
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <xQueueReceive+0x42>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <xQueueReceive+0x44>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <xQueueReceive+0x5e>
	__asm volatile
 8002c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	61fb      	str	r3, [r7, #28]
}
 8002c66:	bf00      	nop
 8002c68:	e7fe      	b.n	8002c68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c6a:	f001 f803 	bl	8003c74 <xTaskGetSchedulerState>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <xQueueReceive+0x6e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <xQueueReceive+0x72>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <xQueueReceive+0x74>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <xQueueReceive+0x8e>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	61bb      	str	r3, [r7, #24]
}
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c9a:	f001 f9e7 	bl	800406c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01f      	beq.n	8002cea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cae:	f000 f977 	bl	8002fa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1e5a      	subs	r2, r3, #1
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00f      	beq.n	8002ce2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	3310      	adds	r3, #16
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fe14 	bl	80038f4 <xTaskRemoveFromEventList>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <xQueueReceive+0x1bc>)
 8002cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ce2:	f001 f9f3 	bl	80040cc <vPortExitCritical>
				return pdPASS;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e069      	b.n	8002dbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cf0:	f001 f9ec 	bl	80040cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e062      	b.n	8002dbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cfe:	f107 0310 	add.w	r3, r7, #16
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fe58 	bl	80039b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d0c:	f001 f9de 	bl	80040cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d10:	f000 fc0a 	bl	8003528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d14:	f001 f9aa 	bl	800406c <vPortEnterCritical>
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d1e:	b25b      	sxtb	r3, r3
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d103      	bne.n	8002d2e <xQueueReceive+0x122>
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d103      	bne.n	8002d44 <xQueueReceive+0x138>
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d44:	f001 f9c2 	bl	80040cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d48:	1d3a      	adds	r2, r7, #4
 8002d4a:	f107 0310 	add.w	r3, r7, #16
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fe47 	bl	80039e4 <xTaskCheckForTimeOut>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d123      	bne.n	8002da4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d5e:	f000 f997 	bl	8003090 <prvIsQueueEmpty>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d017      	beq.n	8002d98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	3324      	adds	r3, #36	; 0x24
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fd9b 	bl	80038ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d78:	f000 f938 	bl	8002fec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d7c:	f000 fbe2 	bl	8003544 <xTaskResumeAll>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d189      	bne.n	8002c9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <xQueueReceive+0x1bc>)
 8002d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	e780      	b.n	8002c9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d9a:	f000 f927 	bl	8002fec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d9e:	f000 fbd1 	bl	8003544 <xTaskResumeAll>
 8002da2:	e77a      	b.n	8002c9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002da6:	f000 f921 	bl	8002fec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002daa:	f000 fbcb 	bl	8003544 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db0:	f000 f96e 	bl	8003090 <prvIsQueueEmpty>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f43f af6f 	beq.w	8002c9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002dbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3730      	adds	r7, #48	; 0x30
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08e      	sub	sp, #56	; 0x38
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	623b      	str	r3, [r7, #32]
}
 8002df4:	bf00      	nop
 8002df6:	e7fe      	b.n	8002df6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <xQueueReceiveFromISR+0x3a>
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <xQueueReceiveFromISR+0x3e>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <xQueueReceiveFromISR+0x40>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	61fb      	str	r3, [r7, #28]
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e26:	f001 f9e3 	bl	80041f0 <vPortValidateInterruptPriority>
	__asm volatile
 8002e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	61ba      	str	r2, [r7, #24]
 8002e40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002e42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d02f      	beq.n	8002eb2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e60:	f000 f89e 	bl	8002fa0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	1e5a      	subs	r2, r3, #1
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002e6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d112      	bne.n	8002e9c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	3310      	adds	r3, #16
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fd36 	bl	80038f4 <xTaskRemoveFromEventList>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00e      	beq.n	8002eac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00b      	beq.n	8002eac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e007      	b.n	8002eac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	b25a      	sxtb	r2, r3
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002eac:	2301      	movs	r3, #1
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb0:	e001      	b.n	8002eb6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f383 8811 	msr	BASEPRI, r3
}
 8002ec0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3738      	adds	r7, #56	; 0x38
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d14d      	bne.n	8002f8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 feda 	bl	8003cb0 <xTaskPriorityDisinherit>
 8002efc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	605a      	str	r2, [r3, #4]
 8002f04:	e043      	b.n	8002f8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d119      	bne.n	8002f40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6898      	ldr	r0, [r3, #8]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	461a      	mov	r2, r3
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	f001 fba4 	bl	8004664 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	441a      	add	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d32b      	bcc.n	8002f8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	e026      	b.n	8002f8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	68d8      	ldr	r0, [r3, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	f001 fb8a 	bl	8004664 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	425b      	negs	r3, r3
 8002f5a:	441a      	add	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d207      	bcs.n	8002f7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	425b      	negs	r3, r3
 8002f76:	441a      	add	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d105      	bne.n	8002f8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f96:	697b      	ldr	r3, [r7, #20]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d018      	beq.n	8002fe4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	441a      	add	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d303      	bcc.n	8002fd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68d9      	ldr	r1, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	461a      	mov	r2, r3
 8002fde:	6838      	ldr	r0, [r7, #0]
 8002fe0:	f001 fb40 	bl	8004664 <memcpy>
	}
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ff4:	f001 f83a 	bl	800406c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ffe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003000:	e011      	b.n	8003026 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2b00      	cmp	r3, #0
 8003008:	d012      	beq.n	8003030 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3324      	adds	r3, #36	; 0x24
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fc70 	bl	80038f4 <xTaskRemoveFromEventList>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800301a:	f000 fd45 	bl	8003aa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	3b01      	subs	r3, #1
 8003022:	b2db      	uxtb	r3, r3
 8003024:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302a:	2b00      	cmp	r3, #0
 800302c:	dce9      	bgt.n	8003002 <prvUnlockQueue+0x16>
 800302e:	e000      	b.n	8003032 <prvUnlockQueue+0x46>
					break;
 8003030:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	22ff      	movs	r2, #255	; 0xff
 8003036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800303a:	f001 f847 	bl	80040cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800303e:	f001 f815 	bl	800406c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003048:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800304a:	e011      	b.n	8003070 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d012      	beq.n	800307a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3310      	adds	r3, #16
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fc4b 	bl	80038f4 <xTaskRemoveFromEventList>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003064:	f000 fd20 	bl	8003aa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003068:	7bbb      	ldrb	r3, [r7, #14]
 800306a:	3b01      	subs	r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003074:	2b00      	cmp	r3, #0
 8003076:	dce9      	bgt.n	800304c <prvUnlockQueue+0x60>
 8003078:	e000      	b.n	800307c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800307a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	22ff      	movs	r2, #255	; 0xff
 8003080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003084:	f001 f822 	bl	80040cc <vPortExitCritical>
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003098:	f000 ffe8 	bl	800406c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030a4:	2301      	movs	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e001      	b.n	80030ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030ae:	f001 f80d 	bl	80040cc <vPortExitCritical>

	return xReturn;
 80030b2:	68fb      	ldr	r3, [r7, #12]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030c4:	f000 ffd2 	bl	800406c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d102      	bne.n	80030da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030d4:	2301      	movs	r3, #1
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e001      	b.n	80030de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030de:	f000 fff5 	bl	80040cc <vPortExitCritical>

	return xReturn;
 80030e2:	68fb      	ldr	r3, [r7, #12]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08e      	sub	sp, #56	; 0x38
 80030f0:	af04      	add	r7, sp, #16
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	623b      	str	r3, [r7, #32]
}
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <xTaskCreateStatic+0x46>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	61fb      	str	r3, [r7, #28]
}
 800312e:	bf00      	nop
 8003130:	e7fe      	b.n	8003130 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003132:	2354      	movs	r3, #84	; 0x54
 8003134:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b54      	cmp	r3, #84	; 0x54
 800313a:	d00a      	beq.n	8003152 <xTaskCreateStatic+0x66>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	61bb      	str	r3, [r7, #24]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01e      	beq.n	8003196 <xTaskCreateStatic+0xaa>
 8003158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01b      	beq.n	8003196 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003166:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003170:	2300      	movs	r3, #0
 8003172:	9303      	str	r3, [sp, #12]
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	9302      	str	r3, [sp, #8]
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	9301      	str	r3, [sp, #4]
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f850 	bl	800322e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800318e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003190:	f000 f8cc 	bl	800332c <prvAddNewTaskToReadyList>
 8003194:	e001      	b.n	800319a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800319a:	697b      	ldr	r3, [r7, #20]
	}
 800319c:	4618      	mov	r0, r3
 800319e:	3728      	adds	r7, #40	; 0x28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	; 0x30
 80031a8:	af04      	add	r7, sp, #16
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f001 f857 	bl	800426c <pvPortMalloc>
 80031be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00e      	beq.n	80031e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80031c6:	2054      	movs	r0, #84	; 0x54
 80031c8:	f001 f850 	bl	800426c <pvPortMalloc>
 80031cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
 80031da:	e005      	b.n	80031e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031dc:	6978      	ldr	r0, [r7, #20]
 80031de:	f001 f909 	bl	80043f4 <vPortFree>
 80031e2:	e001      	b.n	80031e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d017      	beq.n	800321e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	2300      	movs	r3, #0
 80031fa:	9303      	str	r3, [sp, #12]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	9302      	str	r3, [sp, #8]
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f80e 	bl	800322e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003212:	69f8      	ldr	r0, [r7, #28]
 8003214:	f000 f88a 	bl	800332c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003218:	2301      	movs	r3, #1
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	e002      	b.n	8003224 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
 8003222:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003224:	69bb      	ldr	r3, [r7, #24]
	}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b088      	sub	sp, #32
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003246:	3b01      	subs	r3, #1
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f023 0307 	bic.w	r3, r3, #7
 8003254:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	617b      	str	r3, [r7, #20]
}
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e012      	b.n	80032a2 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	4413      	add	r3, r2
 8003282:	7819      	ldrb	r1, [r3, #0]
 8003284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	3334      	adds	r3, #52	; 0x34
 800328c:	460a      	mov	r2, r1
 800328e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d006      	beq.n	80032aa <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	3301      	adds	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	2b0f      	cmp	r3, #15
 80032a6:	d9e9      	bls.n	800327c <prvInitialiseNewTask+0x4e>
 80032a8:	e000      	b.n	80032ac <prvInitialiseNewTask+0x7e>
		{
			break;
 80032aa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d901      	bls.n	80032be <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032ba:	2306      	movs	r3, #6
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	2200      	movs	r2, #0
 80032ce:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	3304      	adds	r3, #4
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff f936 	bl	8002546 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	3318      	adds	r3, #24
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f931 	bl	8002546 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	f1c3 0207 	rsb	r2, r3, #7
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	2200      	movs	r2, #0
 80032fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	68f9      	ldr	r1, [r7, #12]
 800330c:	69b8      	ldr	r0, [r7, #24]
 800330e:	f000 fdbb 	bl	8003e88 <pxPortInitialiseStack>
 8003312:	4602      	mov	r2, r0
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003322:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003324:	bf00      	nop
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003334:	f000 fe9a 	bl	800406c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003338:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <prvAddNewTaskToReadyList+0xb8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <prvAddNewTaskToReadyList+0xb8>)
 8003340:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003342:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <prvAddNewTaskToReadyList+0xbc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800334a:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <prvAddNewTaskToReadyList+0xbc>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003350:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <prvAddNewTaskToReadyList+0xb8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d110      	bne.n	800337a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003358:	f000 fbca 	bl	8003af0 <prvInitialiseTaskLists>
 800335c:	e00d      	b.n	800337a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800335e:	4b23      	ldr	r3, [pc, #140]	; (80033ec <prvAddNewTaskToReadyList+0xc0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <prvAddNewTaskToReadyList+0xbc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	429a      	cmp	r2, r3
 8003372:	d802      	bhi.n	800337a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003374:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <prvAddNewTaskToReadyList+0xbc>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800337a:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <prvAddNewTaskToReadyList+0xc4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3301      	adds	r3, #1
 8003380:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <prvAddNewTaskToReadyList+0xc4>)
 8003382:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	2201      	movs	r2, #1
 800338a:	409a      	lsls	r2, r3
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <prvAddNewTaskToReadyList+0xc8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4313      	orrs	r3, r2
 8003392:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <prvAddNewTaskToReadyList+0xc8>)
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <prvAddNewTaskToReadyList+0xcc>)
 80033a4:	441a      	add	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4619      	mov	r1, r3
 80033ac:	4610      	mov	r0, r2
 80033ae:	f7ff f8d6 	bl	800255e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033b2:	f000 fe8b 	bl	80040cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <prvAddNewTaskToReadyList+0xc0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00e      	beq.n	80033dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <prvAddNewTaskToReadyList+0xbc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d207      	bcs.n	80033dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <prvAddNewTaskToReadyList+0xd0>)
 80033ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000380 	.word	0x20000380
 80033e8:	20000280 	.word	0x20000280
 80033ec:	2000038c 	.word	0x2000038c
 80033f0:	2000039c 	.word	0x2000039c
 80033f4:	20000388 	.word	0x20000388
 80033f8:	20000284 	.word	0x20000284
 80033fc:	e000ed04 	.word	0xe000ed04

08003400 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d017      	beq.n	8003442 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <vTaskDelay+0x60>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <vTaskDelay+0x30>
	__asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	60bb      	str	r3, [r7, #8]
}
 800342c:	bf00      	nop
 800342e:	e7fe      	b.n	800342e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003430:	f000 f87a 	bl	8003528 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003434:	2100      	movs	r1, #0
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fcc0 	bl	8003dbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800343c:	f000 f882 	bl	8003544 <xTaskResumeAll>
 8003440:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <vTaskDelay+0x64>)
 800344a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	200003a8 	.word	0x200003a8
 8003464:	e000ed04 	.word	0xe000ed04

08003468 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003476:	463a      	mov	r2, r7
 8003478:	1d39      	adds	r1, r7, #4
 800347a:	f107 0308 	add.w	r3, r7, #8
 800347e:	4618      	mov	r0, r3
 8003480:	f7fc fe66 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003484:	6839      	ldr	r1, [r7, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	9202      	str	r2, [sp, #8]
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	2300      	movs	r3, #0
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2300      	movs	r3, #0
 8003494:	460a      	mov	r2, r1
 8003496:	491e      	ldr	r1, [pc, #120]	; (8003510 <vTaskStartScheduler+0xa8>)
 8003498:	481e      	ldr	r0, [pc, #120]	; (8003514 <vTaskStartScheduler+0xac>)
 800349a:	f7ff fe27 	bl	80030ec <xTaskCreateStatic>
 800349e:	4603      	mov	r3, r0
 80034a0:	4a1d      	ldr	r2, [pc, #116]	; (8003518 <vTaskStartScheduler+0xb0>)
 80034a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034a4:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <vTaskStartScheduler+0xb0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034ac:	2301      	movs	r3, #1
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	e001      	b.n	80034b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d116      	bne.n	80034ea <vTaskStartScheduler+0x82>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	613b      	str	r3, [r7, #16]
}
 80034ce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <vTaskStartScheduler+0xb4>)
 80034d2:	f04f 32ff 	mov.w	r2, #4294967295
 80034d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <vTaskStartScheduler+0xb8>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <vTaskStartScheduler+0xbc>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034e4:	f000 fd50 	bl	8003f88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034e8:	e00e      	b.n	8003508 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d10a      	bne.n	8003508 <vTaskStartScheduler+0xa0>
	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	60fb      	str	r3, [r7, #12]
}
 8003504:	bf00      	nop
 8003506:	e7fe      	b.n	8003506 <vTaskStartScheduler+0x9e>
}
 8003508:	bf00      	nop
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	0800470c 	.word	0x0800470c
 8003514:	08003ac1 	.word	0x08003ac1
 8003518:	200003a4 	.word	0x200003a4
 800351c:	200003a0 	.word	0x200003a0
 8003520:	2000038c 	.word	0x2000038c
 8003524:	20000384 	.word	0x20000384

08003528 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <vTaskSuspendAll+0x18>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	4a03      	ldr	r2, [pc, #12]	; (8003540 <vTaskSuspendAll+0x18>)
 8003534:	6013      	str	r3, [r2, #0]
}
 8003536:	bf00      	nop
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	200003a8 	.word	0x200003a8

08003544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003552:	4b41      	ldr	r3, [pc, #260]	; (8003658 <xTaskResumeAll+0x114>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <xTaskResumeAll+0x2c>
	__asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	603b      	str	r3, [r7, #0]
}
 800356c:	bf00      	nop
 800356e:	e7fe      	b.n	800356e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003570:	f000 fd7c 	bl	800406c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003574:	4b38      	ldr	r3, [pc, #224]	; (8003658 <xTaskResumeAll+0x114>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3b01      	subs	r3, #1
 800357a:	4a37      	ldr	r2, [pc, #220]	; (8003658 <xTaskResumeAll+0x114>)
 800357c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800357e:	4b36      	ldr	r3, [pc, #216]	; (8003658 <xTaskResumeAll+0x114>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d161      	bne.n	800364a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003586:	4b35      	ldr	r3, [pc, #212]	; (800365c <xTaskResumeAll+0x118>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d05d      	beq.n	800364a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800358e:	e02e      	b.n	80035ee <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003590:	4b33      	ldr	r3, [pc, #204]	; (8003660 <xTaskResumeAll+0x11c>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3318      	adds	r3, #24
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff f839 	bl	8002614 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3304      	adds	r3, #4
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff f834 	bl	8002614 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	2201      	movs	r2, #1
 80035b2:	409a      	lsls	r2, r3
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <xTaskResumeAll+0x120>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	4a2a      	ldr	r2, [pc, #168]	; (8003664 <xTaskResumeAll+0x120>)
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4a27      	ldr	r2, [pc, #156]	; (8003668 <xTaskResumeAll+0x124>)
 80035cc:	441a      	add	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f7fe ffc2 	bl	800255e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035de:	4b23      	ldr	r3, [pc, #140]	; (800366c <xTaskResumeAll+0x128>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d302      	bcc.n	80035ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <xTaskResumeAll+0x12c>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035ee:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <xTaskResumeAll+0x11c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1cc      	bne.n	8003590 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035fc:	f000 fb16 	bl	8003c2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003600:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <xTaskResumeAll+0x130>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800360c:	f000 f836 	bl	800367c <xTaskIncrementTick>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003616:	4b16      	ldr	r3, [pc, #88]	; (8003670 <xTaskResumeAll+0x12c>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f1      	bne.n	800360c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003628:	4b12      	ldr	r3, [pc, #72]	; (8003674 <xTaskResumeAll+0x130>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800362e:	4b10      	ldr	r3, [pc, #64]	; (8003670 <xTaskResumeAll+0x12c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003636:	2301      	movs	r3, #1
 8003638:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800363a:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <xTaskResumeAll+0x134>)
 800363c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800364a:	f000 fd3f 	bl	80040cc <vPortExitCritical>

	return xAlreadyYielded;
 800364e:	68bb      	ldr	r3, [r7, #8]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	200003a8 	.word	0x200003a8
 800365c:	20000380 	.word	0x20000380
 8003660:	20000340 	.word	0x20000340
 8003664:	20000388 	.word	0x20000388
 8003668:	20000284 	.word	0x20000284
 800366c:	20000280 	.word	0x20000280
 8003670:	20000394 	.word	0x20000394
 8003674:	20000390 	.word	0x20000390
 8003678:	e000ed04 	.word	0xe000ed04

0800367c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003686:	4b51      	ldr	r3, [pc, #324]	; (80037cc <xTaskIncrementTick+0x150>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f040 808d 	bne.w	80037aa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003690:	4b4f      	ldr	r3, [pc, #316]	; (80037d0 <xTaskIncrementTick+0x154>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003698:	4a4d      	ldr	r2, [pc, #308]	; (80037d0 <xTaskIncrementTick+0x154>)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d120      	bne.n	80036e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80036a4:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <xTaskIncrementTick+0x158>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	603b      	str	r3, [r7, #0]
}
 80036c0:	bf00      	nop
 80036c2:	e7fe      	b.n	80036c2 <xTaskIncrementTick+0x46>
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <xTaskIncrementTick+0x158>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	4b43      	ldr	r3, [pc, #268]	; (80037d8 <xTaskIncrementTick+0x15c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a41      	ldr	r2, [pc, #260]	; (80037d4 <xTaskIncrementTick+0x158>)
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4a41      	ldr	r2, [pc, #260]	; (80037d8 <xTaskIncrementTick+0x15c>)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b40      	ldr	r3, [pc, #256]	; (80037dc <xTaskIncrementTick+0x160>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3301      	adds	r3, #1
 80036de:	4a3f      	ldr	r2, [pc, #252]	; (80037dc <xTaskIncrementTick+0x160>)
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	f000 faa3 	bl	8003c2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036e6:	4b3e      	ldr	r3, [pc, #248]	; (80037e0 <xTaskIncrementTick+0x164>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d34d      	bcc.n	800378c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036f0:	4b38      	ldr	r3, [pc, #224]	; (80037d4 <xTaskIncrementTick+0x158>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <xTaskIncrementTick+0x82>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <xTaskIncrementTick+0x84>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d004      	beq.n	800370e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003704:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <xTaskIncrementTick+0x164>)
 8003706:	f04f 32ff 	mov.w	r2, #4294967295
 800370a:	601a      	str	r2, [r3, #0]
					break;
 800370c:	e03e      	b.n	800378c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800370e:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <xTaskIncrementTick+0x158>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d203      	bcs.n	800372e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003726:	4a2e      	ldr	r2, [pc, #184]	; (80037e0 <xTaskIncrementTick+0x164>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6013      	str	r3, [r2, #0]
						break;
 800372c:	e02e      	b.n	800378c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	3304      	adds	r3, #4
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe ff6e 	bl	8002614 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	3318      	adds	r3, #24
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe ff65 	bl	8002614 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	2201      	movs	r2, #1
 8003750:	409a      	lsls	r2, r3
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <xTaskIncrementTick+0x168>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <xTaskIncrementTick+0x168>)
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <xTaskIncrementTick+0x16c>)
 800376a:	441a      	add	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	3304      	adds	r3, #4
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f7fe fef3 	bl	800255e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <xTaskIncrementTick+0x170>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	429a      	cmp	r2, r3
 8003784:	d3b4      	bcc.n	80036f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003786:	2301      	movs	r3, #1
 8003788:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800378a:	e7b1      	b.n	80036f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800378c:	4b17      	ldr	r3, [pc, #92]	; (80037ec <xTaskIncrementTick+0x170>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003792:	4915      	ldr	r1, [pc, #84]	; (80037e8 <xTaskIncrementTick+0x16c>)
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d907      	bls.n	80037b4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80037a4:	2301      	movs	r3, #1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	e004      	b.n	80037b4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <xTaskIncrementTick+0x174>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3301      	adds	r3, #1
 80037b0:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <xTaskIncrementTick+0x174>)
 80037b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <xTaskIncrementTick+0x178>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80037bc:	2301      	movs	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80037c0:	697b      	ldr	r3, [r7, #20]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200003a8 	.word	0x200003a8
 80037d0:	20000384 	.word	0x20000384
 80037d4:	20000338 	.word	0x20000338
 80037d8:	2000033c 	.word	0x2000033c
 80037dc:	20000398 	.word	0x20000398
 80037e0:	200003a0 	.word	0x200003a0
 80037e4:	20000388 	.word	0x20000388
 80037e8:	20000284 	.word	0x20000284
 80037ec:	20000280 	.word	0x20000280
 80037f0:	20000390 	.word	0x20000390
 80037f4:	20000394 	.word	0x20000394

080037f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037fe:	4b26      	ldr	r3, [pc, #152]	; (8003898 <vTaskSwitchContext+0xa0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <vTaskSwitchContext+0xa4>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800380c:	e03f      	b.n	800388e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800380e:	4b23      	ldr	r3, [pc, #140]	; (800389c <vTaskSwitchContext+0xa4>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003814:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <vTaskSwitchContext+0xa8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003822:	7afb      	ldrb	r3, [r7, #11]
 8003824:	f1c3 031f 	rsb	r3, r3, #31
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	491e      	ldr	r1, [pc, #120]	; (80038a4 <vTaskSwitchContext+0xac>)
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <vTaskSwitchContext+0x5c>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	607b      	str	r3, [r7, #4]
}
 8003850:	bf00      	nop
 8003852:	e7fe      	b.n	8003852 <vTaskSwitchContext+0x5a>
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4a11      	ldr	r2, [pc, #68]	; (80038a4 <vTaskSwitchContext+0xac>)
 8003860:	4413      	add	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	3308      	adds	r3, #8
 8003876:	429a      	cmp	r2, r3
 8003878:	d104      	bne.n	8003884 <vTaskSwitchContext+0x8c>
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <vTaskSwitchContext+0xb0>)
 800388c:	6013      	str	r3, [r2, #0]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	200003a8 	.word	0x200003a8
 800389c:	20000394 	.word	0x20000394
 80038a0:	20000388 	.word	0x20000388
 80038a4:	20000284 	.word	0x20000284
 80038a8:	20000280 	.word	0x20000280

080038ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	60fb      	str	r3, [r7, #12]
}
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <vTaskPlaceOnEventList+0x44>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3318      	adds	r3, #24
 80038d8:	4619      	mov	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fe fe62 	bl	80025a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038e0:	2101      	movs	r1, #1
 80038e2:	6838      	ldr	r0, [r7, #0]
 80038e4:	f000 fa6a 	bl	8003dbc <prvAddCurrentTaskToDelayedList>
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000280 	.word	0x20000280

080038f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800390a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	60fb      	str	r3, [r7, #12]
}
 800391c:	bf00      	nop
 800391e:	e7fe      	b.n	800391e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	3318      	adds	r3, #24
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fe75 	bl	8002614 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800392a:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <xTaskRemoveFromEventList+0xac>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11c      	bne.n	800396c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	3304      	adds	r3, #4
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fe6c 	bl	8002614 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	2201      	movs	r2, #1
 8003942:	409a      	lsls	r2, r3
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <xTaskRemoveFromEventList+0xb0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4313      	orrs	r3, r2
 800394a:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <xTaskRemoveFromEventList+0xb0>)
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4a13      	ldr	r2, [pc, #76]	; (80039a8 <xTaskRemoveFromEventList+0xb4>)
 800395c:	441a      	add	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	3304      	adds	r3, #4
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f7fe fdfa 	bl	800255e <vListInsertEnd>
 800396a:	e005      	b.n	8003978 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	3318      	adds	r3, #24
 8003970:	4619      	mov	r1, r3
 8003972:	480e      	ldr	r0, [pc, #56]	; (80039ac <xTaskRemoveFromEventList+0xb8>)
 8003974:	f7fe fdf3 	bl	800255e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <xTaskRemoveFromEventList+0xbc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	429a      	cmp	r2, r3
 8003984:	d905      	bls.n	8003992 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003986:	2301      	movs	r3, #1
 8003988:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <xTaskRemoveFromEventList+0xc0>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e001      	b.n	8003996 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003996:	697b      	ldr	r3, [r7, #20]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	200003a8 	.word	0x200003a8
 80039a4:	20000388 	.word	0x20000388
 80039a8:	20000284 	.word	0x20000284
 80039ac:	20000340 	.word	0x20000340
 80039b0:	20000280 	.word	0x20000280
 80039b4:	20000394 	.word	0x20000394

080039b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <vTaskInternalSetTimeOutState+0x24>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <vTaskInternalSetTimeOutState+0x28>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	605a      	str	r2, [r3, #4]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000398 	.word	0x20000398
 80039e0:	20000384 	.word	0x20000384

080039e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	613b      	str	r3, [r7, #16]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	60fb      	str	r3, [r7, #12]
}
 8003a22:	bf00      	nop
 8003a24:	e7fe      	b.n	8003a24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003a26:	f000 fb21 	bl	800406c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <xTaskCheckForTimeOut+0xbc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d102      	bne.n	8003a4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	e023      	b.n	8003a92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <xTaskCheckForTimeOut+0xc0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d007      	beq.n	8003a66 <xTaskCheckForTimeOut+0x82>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d302      	bcc.n	8003a66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	e015      	b.n	8003a92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d20b      	bcs.n	8003a88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	1ad2      	subs	r2, r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff9b 	bl	80039b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	e004      	b.n	8003a92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a92:	f000 fb1b 	bl	80040cc <vPortExitCritical>

	return xReturn;
 8003a96:	69fb      	ldr	r3, [r7, #28]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000384 	.word	0x20000384
 8003aa4:	20000398 	.word	0x20000398

08003aa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003aac:	4b03      	ldr	r3, [pc, #12]	; (8003abc <vTaskMissedYield+0x14>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000394 	.word	0x20000394

08003ac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ac8:	f000 f852 	bl	8003b70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <prvIdleTask+0x28>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d9f9      	bls.n	8003ac8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <prvIdleTask+0x2c>)
 8003ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ae4:	e7f0      	b.n	8003ac8 <prvIdleTask+0x8>
 8003ae6:	bf00      	nop
 8003ae8:	20000284 	.word	0x20000284
 8003aec:	e000ed04 	.word	0xe000ed04

08003af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	e00c      	b.n	8003b16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <prvInitialiseTaskLists+0x60>)
 8003b08:	4413      	add	r3, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fcfc 	bl	8002508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3301      	adds	r3, #1
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b06      	cmp	r3, #6
 8003b1a:	d9ef      	bls.n	8003afc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b1c:	480d      	ldr	r0, [pc, #52]	; (8003b54 <prvInitialiseTaskLists+0x64>)
 8003b1e:	f7fe fcf3 	bl	8002508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b22:	480d      	ldr	r0, [pc, #52]	; (8003b58 <prvInitialiseTaskLists+0x68>)
 8003b24:	f7fe fcf0 	bl	8002508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b28:	480c      	ldr	r0, [pc, #48]	; (8003b5c <prvInitialiseTaskLists+0x6c>)
 8003b2a:	f7fe fced 	bl	8002508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b2e:	480c      	ldr	r0, [pc, #48]	; (8003b60 <prvInitialiseTaskLists+0x70>)
 8003b30:	f7fe fcea 	bl	8002508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b34:	480b      	ldr	r0, [pc, #44]	; (8003b64 <prvInitialiseTaskLists+0x74>)
 8003b36:	f7fe fce7 	bl	8002508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <prvInitialiseTaskLists+0x78>)
 8003b3c:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <prvInitialiseTaskLists+0x64>)
 8003b3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <prvInitialiseTaskLists+0x7c>)
 8003b42:	4a05      	ldr	r2, [pc, #20]	; (8003b58 <prvInitialiseTaskLists+0x68>)
 8003b44:	601a      	str	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000284 	.word	0x20000284
 8003b54:	20000310 	.word	0x20000310
 8003b58:	20000324 	.word	0x20000324
 8003b5c:	20000340 	.word	0x20000340
 8003b60:	20000354 	.word	0x20000354
 8003b64:	2000036c 	.word	0x2000036c
 8003b68:	20000338 	.word	0x20000338
 8003b6c:	2000033c 	.word	0x2000033c

08003b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b76:	e019      	b.n	8003bac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b78:	f000 fa78 	bl	800406c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003b7c:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <prvCheckTasksWaitingTermination+0x50>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe fd43 	bl	8002614 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <prvCheckTasksWaitingTermination+0x54>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	4a0b      	ldr	r2, [pc, #44]	; (8003bc4 <prvCheckTasksWaitingTermination+0x54>)
 8003b96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <prvCheckTasksWaitingTermination+0x58>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <prvCheckTasksWaitingTermination+0x58>)
 8003ba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ba2:	f000 fa93 	bl	80040cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f810 	bl	8003bcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <prvCheckTasksWaitingTermination+0x58>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e1      	bne.n	8003b78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000354 	.word	0x20000354
 8003bc4:	20000380 	.word	0x20000380
 8003bc8:	20000368 	.word	0x20000368

08003bcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d108      	bne.n	8003bf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fc06 	bl	80043f4 <vPortFree>
				vPortFree( pxTCB );
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fc03 	bl	80043f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bee:	e018      	b.n	8003c22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d103      	bne.n	8003c02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fbfa 	bl	80043f4 <vPortFree>
	}
 8003c00:	e00f      	b.n	8003c22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d00a      	beq.n	8003c22 <prvDeleteTCB+0x56>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	60fb      	str	r3, [r7, #12]
}
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <prvDeleteTCB+0x54>
	}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c32:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <prvResetNextTaskUnblockTime+0x40>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <prvResetNextTaskUnblockTime+0x14>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <prvResetNextTaskUnblockTime+0x16>
 8003c40:	2300      	movs	r3, #0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d004      	beq.n	8003c50 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c46:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <prvResetNextTaskUnblockTime+0x44>)
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c4e:	e008      	b.n	8003c62 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <prvResetNextTaskUnblockTime+0x40>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <prvResetNextTaskUnblockTime+0x44>)
 8003c60:	6013      	str	r3, [r2, #0]
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr
 8003c6c:	20000338 	.word	0x20000338
 8003c70:	200003a0 	.word	0x200003a0

08003c74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <xTaskGetSchedulerState+0x34>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c82:	2301      	movs	r3, #1
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	e008      	b.n	8003c9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c88:	4b08      	ldr	r3, [pc, #32]	; (8003cac <xTaskGetSchedulerState+0x38>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c90:	2302      	movs	r3, #2
 8003c92:	607b      	str	r3, [r7, #4]
 8003c94:	e001      	b.n	8003c9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c9a:	687b      	ldr	r3, [r7, #4]
	}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	2000038c 	.word	0x2000038c
 8003cac:	200003a8 	.word	0x200003a8

08003cb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d06e      	beq.n	8003da4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003cc6:	4b3a      	ldr	r3, [pc, #232]	; (8003db0 <xTaskPriorityDisinherit+0x100>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d00a      	beq.n	8003ce6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	60fb      	str	r3, [r7, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	60bb      	str	r3, [r7, #8]
}
 8003d00:	bf00      	nop
 8003d02:	e7fe      	b.n	8003d02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d08:	1e5a      	subs	r2, r3, #1
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d044      	beq.n	8003da4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d140      	bne.n	8003da4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	3304      	adds	r3, #4
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fc74 	bl	8002614 <uxListRemove>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d115      	bne.n	8003d5e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d36:	491f      	ldr	r1, [pc, #124]	; (8003db4 <xTaskPriorityDisinherit+0x104>)
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <xTaskPriorityDisinherit+0xae>
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <xTaskPriorityDisinherit+0x108>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <xTaskPriorityDisinherit+0x108>)
 8003d5c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	f1c3 0207 	rsb	r2, r3, #7
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	2201      	movs	r2, #1
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <xTaskPriorityDisinherit+0x108>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <xTaskPriorityDisinherit+0x108>)
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <xTaskPriorityDisinherit+0x104>)
 8003d92:	441a      	add	r2, r3
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	3304      	adds	r3, #4
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	f7fe fbdf 	bl	800255e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003da4:	697b      	ldr	r3, [r7, #20]
	}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000280 	.word	0x20000280
 8003db4:	20000284 	.word	0x20000284
 8003db8:	20000388 	.word	0x20000388

08003dbc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003dc6:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dcc:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe fc1e 	bl	8002614 <uxListRemove>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10b      	bne.n	8003df6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	2201      	movs	r2, #1
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43da      	mvns	r2, r3
 8003dec:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4013      	ands	r3, r2
 8003df2:	4a20      	ldr	r2, [pc, #128]	; (8003e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003df4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d10a      	bne.n	8003e14 <prvAddCurrentTaskToDelayedList+0x58>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	481a      	ldr	r0, [pc, #104]	; (8003e78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e0e:	f7fe fba6 	bl	800255e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e12:	e026      	b.n	8003e62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d209      	bcs.n	8003e40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f7fe fbb3 	bl	80025a4 <vListInsert>
}
 8003e3e:	e010      	b.n	8003e62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7fe fba9 	bl	80025a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d202      	bcs.n	8003e62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e5c:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	6013      	str	r3, [r2, #0]
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000384 	.word	0x20000384
 8003e70:	20000280 	.word	0x20000280
 8003e74:	20000388 	.word	0x20000388
 8003e78:	2000036c 	.word	0x2000036c
 8003e7c:	2000033c 	.word	0x2000033c
 8003e80:	20000338 	.word	0x20000338
 8003e84:	200003a0 	.word	0x200003a0

08003e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3b04      	subs	r3, #4
 8003e98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3b04      	subs	r3, #4
 8003ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f023 0201 	bic.w	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3b04      	subs	r3, #4
 8003eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003eb8:	4a08      	ldr	r2, [pc, #32]	; (8003edc <pxPortInitialiseStack+0x54>)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3b14      	subs	r3, #20
 8003ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3b20      	subs	r3, #32
 8003ece:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	08003ee1 	.word	0x08003ee1

08003ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <prvTaskExitError+0x54>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d00a      	beq.n	8003f0a <prvTaskExitError+0x2a>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	60fb      	str	r3, [r7, #12]
}
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <prvTaskExitError+0x28>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	60bb      	str	r3, [r7, #8]
}
 8003f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f1e:	bf00      	nop
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0fc      	beq.n	8003f20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	2000000c 	.word	0x2000000c
	...

08003f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f40:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <pxCurrentTCBConst2>)
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	6808      	ldr	r0, [r1, #0]
 8003f46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f4a:	f380 8809 	msr	PSP, r0
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f380 8811 	msr	BASEPRI, r0
 8003f5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003f5e:	4770      	bx	lr

08003f60 <pxCurrentTCBConst2>:
 8003f60:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop

08003f68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003f68:	4806      	ldr	r0, [pc, #24]	; (8003f84 <prvPortStartFirstTask+0x1c>)
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	6800      	ldr	r0, [r0, #0]
 8003f6e:	f380 8808 	msr	MSP, r0
 8003f72:	b662      	cpsie	i
 8003f74:	b661      	cpsie	f
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	df00      	svc	0
 8003f80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f82:	bf00      	nop
 8003f84:	e000ed08 	.word	0xe000ed08

08003f88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f8e:	4b32      	ldr	r3, [pc, #200]	; (8004058 <xPortStartScheduler+0xd0>)
 8003f90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	22ff      	movs	r2, #255	; 0xff
 8003f9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	4b2a      	ldr	r3, [pc, #168]	; (800405c <xPortStartScheduler+0xd4>)
 8003fb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fb6:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <xPortStartScheduler+0xd8>)
 8003fb8:	2207      	movs	r2, #7
 8003fba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fbc:	e009      	b.n	8003fd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003fbe:	4b28      	ldr	r3, [pc, #160]	; (8004060 <xPortStartScheduler+0xd8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	4a26      	ldr	r2, [pc, #152]	; (8004060 <xPortStartScheduler+0xd8>)
 8003fc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fda:	2b80      	cmp	r3, #128	; 0x80
 8003fdc:	d0ef      	beq.n	8003fbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <xPortStartScheduler+0xd8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1c3 0307 	rsb	r3, r3, #7
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d00a      	beq.n	8004000 <xPortStartScheduler+0x78>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	60bb      	str	r3, [r7, #8]
}
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004000:	4b17      	ldr	r3, [pc, #92]	; (8004060 <xPortStartScheduler+0xd8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	4a16      	ldr	r2, [pc, #88]	; (8004060 <xPortStartScheduler+0xd8>)
 8004008:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800400a:	4b15      	ldr	r3, [pc, #84]	; (8004060 <xPortStartScheduler+0xd8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004012:	4a13      	ldr	r2, [pc, #76]	; (8004060 <xPortStartScheduler+0xd8>)
 8004014:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800401e:	4b11      	ldr	r3, [pc, #68]	; (8004064 <xPortStartScheduler+0xdc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a10      	ldr	r2, [pc, #64]	; (8004064 <xPortStartScheduler+0xdc>)
 8004024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004028:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <xPortStartScheduler+0xdc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a0d      	ldr	r2, [pc, #52]	; (8004064 <xPortStartScheduler+0xdc>)
 8004030:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004034:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004036:	f000 f8b9 	bl	80041ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <xPortStartScheduler+0xe0>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004040:	f7ff ff92 	bl	8003f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004044:	f7ff fbd8 	bl	80037f8 <vTaskSwitchContext>
	prvTaskExitError();
 8004048:	f7ff ff4a 	bl	8003ee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	e000e400 	.word	0xe000e400
 800405c:	200003ac 	.word	0x200003ac
 8004060:	200003b0 	.word	0x200003b0
 8004064:	e000ed20 	.word	0xe000ed20
 8004068:	2000000c 	.word	0x2000000c

0800406c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	607b      	str	r3, [r7, #4]
}
 8004084:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004086:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <vPortEnterCritical+0x58>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3301      	adds	r3, #1
 800408c:	4a0d      	ldr	r2, [pc, #52]	; (80040c4 <vPortEnterCritical+0x58>)
 800408e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004090:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <vPortEnterCritical+0x58>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d10f      	bne.n	80040b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <vPortEnterCritical+0x5c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	603b      	str	r3, [r7, #0]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <vPortEnterCritical+0x4a>
	}
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	2000000c 	.word	0x2000000c
 80040c8:	e000ed04 	.word	0xe000ed04

080040cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040d2:	4b11      	ldr	r3, [pc, #68]	; (8004118 <vPortExitCritical+0x4c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <vPortExitCritical+0x24>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	607b      	str	r3, [r7, #4]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <vPortExitCritical+0x4c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	4a08      	ldr	r2, [pc, #32]	; (8004118 <vPortExitCritical+0x4c>)
 80040f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <vPortExitCritical+0x4c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <vPortExitCritical+0x42>
 8004102:	2300      	movs	r3, #0
 8004104:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f383 8811 	msr	BASEPRI, r3
}
 800410c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	2000000c 	.word	0x2000000c
 800411c:	00000000 	.word	0x00000000

08004120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004120:	f3ef 8009 	mrs	r0, PSP
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <pxCurrentTCBConst>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004130:	6010      	str	r0, [r2, #0]
 8004132:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004136:	f04f 0050 	mov.w	r0, #80	; 0x50
 800413a:	f380 8811 	msr	BASEPRI, r0
 800413e:	f7ff fb5b 	bl	80037f8 <vTaskSwitchContext>
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8811 	msr	BASEPRI, r0
 800414a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800414e:	6819      	ldr	r1, [r3, #0]
 8004150:	6808      	ldr	r0, [r1, #0]
 8004152:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004156:	f380 8809 	msr	PSP, r0
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	4770      	bx	lr

08004160 <pxCurrentTCBConst>:
 8004160:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop

08004168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	607b      	str	r3, [r7, #4]
}
 8004180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004182:	f7ff fa7b 	bl	800367c <xTaskIncrementTick>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <SysTick_Handler+0x40>)
 800418e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	2300      	movs	r3, #0
 8004196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f383 8811 	msr	BASEPRI, r3
}
 800419e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	e000ed04 	.word	0xe000ed04

080041ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041b0:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <vPortSetupTimerInterrupt+0x30>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041b6:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <vPortSetupTimerInterrupt+0x34>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <vPortSetupTimerInterrupt+0x38>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a09      	ldr	r2, [pc, #36]	; (80041e8 <vPortSetupTimerInterrupt+0x3c>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	4a08      	ldr	r2, [pc, #32]	; (80041ec <vPortSetupTimerInterrupt+0x40>)
 80041ca:	3b01      	subs	r3, #1
 80041cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ce:	4b03      	ldr	r3, [pc, #12]	; (80041dc <vPortSetupTimerInterrupt+0x30>)
 80041d0:	2207      	movs	r2, #7
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	e000e010 	.word	0xe000e010
 80041e0:	e000e018 	.word	0xe000e018
 80041e4:	20000000 	.word	0x20000000
 80041e8:	10624dd3 	.word	0x10624dd3
 80041ec:	e000e014 	.word	0xe000e014

080041f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80041f6:	f3ef 8305 	mrs	r3, IPSR
 80041fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b0f      	cmp	r3, #15
 8004200:	d914      	bls.n	800422c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004202:	4a16      	ldr	r2, [pc, #88]	; (800425c <vPortValidateInterruptPriority+0x6c>)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800420c:	4b14      	ldr	r3, [pc, #80]	; (8004260 <vPortValidateInterruptPriority+0x70>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	7afa      	ldrb	r2, [r7, #11]
 8004212:	429a      	cmp	r2, r3
 8004214:	d20a      	bcs.n	800422c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	607b      	str	r3, [r7, #4]
}
 8004228:	bf00      	nop
 800422a:	e7fe      	b.n	800422a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <vPortValidateInterruptPriority+0x74>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <vPortValidateInterruptPriority+0x78>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d90a      	bls.n	8004252 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	603b      	str	r3, [r7, #0]
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <vPortValidateInterruptPriority+0x60>
	}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr
 800425c:	e000e3f0 	.word	0xe000e3f0
 8004260:	200003ac 	.word	0x200003ac
 8004264:	e000ed0c 	.word	0xe000ed0c
 8004268:	200003b0 	.word	0x200003b0

0800426c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004278:	f7ff f956 	bl	8003528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800427c:	4b58      	ldr	r3, [pc, #352]	; (80043e0 <pvPortMalloc+0x174>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004284:	f000 f910 	bl	80044a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004288:	4b56      	ldr	r3, [pc, #344]	; (80043e4 <pvPortMalloc+0x178>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	f040 808e 	bne.w	80043b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01d      	beq.n	80042d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800429c:	2208      	movs	r2, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4413      	add	r3, r2
 80042a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d014      	beq.n	80042d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f023 0307 	bic.w	r3, r3, #7
 80042b4:	3308      	adds	r3, #8
 80042b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <pvPortMalloc+0x6c>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	617b      	str	r3, [r7, #20]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d069      	beq.n	80043b2 <pvPortMalloc+0x146>
 80042de:	4b42      	ldr	r3, [pc, #264]	; (80043e8 <pvPortMalloc+0x17c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d864      	bhi.n	80043b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042e8:	4b40      	ldr	r3, [pc, #256]	; (80043ec <pvPortMalloc+0x180>)
 80042ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80042ec:	4b3f      	ldr	r3, [pc, #252]	; (80043ec <pvPortMalloc+0x180>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042f2:	e004      	b.n	80042fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d903      	bls.n	8004310 <pvPortMalloc+0xa4>
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f1      	bne.n	80042f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004310:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <pvPortMalloc+0x174>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004316:	429a      	cmp	r2, r3
 8004318:	d04b      	beq.n	80043b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2208      	movs	r2, #8
 8004320:	4413      	add	r3, r2
 8004322:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	1ad2      	subs	r2, r2, r3
 8004334:	2308      	movs	r3, #8
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	429a      	cmp	r2, r3
 800433a:	d91f      	bls.n	800437c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800433c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <pvPortMalloc+0xf8>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	613b      	str	r3, [r7, #16]
}
 8004360:	bf00      	nop
 8004362:	e7fe      	b.n	8004362 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	1ad2      	subs	r2, r2, r3
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004376:	69b8      	ldr	r0, [r7, #24]
 8004378:	f000 f8f8 	bl	800456c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800437c:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <pvPortMalloc+0x17c>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <pvPortMalloc+0x17c>)
 8004388:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <pvPortMalloc+0x17c>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b18      	ldr	r3, [pc, #96]	; (80043f0 <pvPortMalloc+0x184>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d203      	bcs.n	800439e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <pvPortMalloc+0x17c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <pvPortMalloc+0x184>)
 800439c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <pvPortMalloc+0x178>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80043b2:	f7ff f8c7 	bl	8003544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <pvPortMalloc+0x16a>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	60fb      	str	r3, [r7, #12]
}
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <pvPortMalloc+0x168>
	return pvReturn;
 80043d6:	69fb      	ldr	r3, [r7, #28]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3728      	adds	r7, #40	; 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000fbc 	.word	0x20000fbc
 80043e4:	20000fc8 	.word	0x20000fc8
 80043e8:	20000fc0 	.word	0x20000fc0
 80043ec:	20000fb4 	.word	0x20000fb4
 80043f0:	20000fc4 	.word	0x20000fc4

080043f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d048      	beq.n	8004498 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004406:	2308      	movs	r3, #8
 8004408:	425b      	negs	r3, r3
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4413      	add	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <vPortFree+0xac>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <vPortFree+0x44>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	60fb      	str	r3, [r7, #12]
}
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <vPortFree+0x62>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60bb      	str	r3, [r7, #8]
}
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <vPortFree+0xac>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d019      	beq.n	8004498 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d115      	bne.n	8004498 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <vPortFree+0xac>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	43db      	mvns	r3, r3
 8004476:	401a      	ands	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800447c:	f7ff f854 	bl	8003528 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <vPortFree+0xb0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4413      	add	r3, r2
 800448a:	4a06      	ldr	r2, [pc, #24]	; (80044a4 <vPortFree+0xb0>)
 800448c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800448e:	6938      	ldr	r0, [r7, #16]
 8004490:	f000 f86c 	bl	800456c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004494:	f7ff f856 	bl	8003544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004498:	bf00      	nop
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000fc8 	.word	0x20000fc8
 80044a4:	20000fc0 	.word	0x20000fc0

080044a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80044b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044b4:	4b27      	ldr	r3, [pc, #156]	; (8004554 <prvHeapInit+0xac>)
 80044b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00c      	beq.n	80044dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3307      	adds	r3, #7
 80044c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0307 	bic.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	4a1f      	ldr	r2, [pc, #124]	; (8004554 <prvHeapInit+0xac>)
 80044d8:	4413      	add	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044e0:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <prvHeapInit+0xb0>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044e6:	4b1c      	ldr	r3, [pc, #112]	; (8004558 <prvHeapInit+0xb0>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4413      	add	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044f4:	2208      	movs	r2, #8
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0307 	bic.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4a15      	ldr	r2, [pc, #84]	; (800455c <prvHeapInit+0xb4>)
 8004508:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <prvHeapInit+0xb4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2200      	movs	r2, #0
 8004510:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004512:	4b12      	ldr	r3, [pc, #72]	; (800455c <prvHeapInit+0xb4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	1ad2      	subs	r2, r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <prvHeapInit+0xb4>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <prvHeapInit+0xb8>)
 8004536:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4a09      	ldr	r2, [pc, #36]	; (8004564 <prvHeapInit+0xbc>)
 800453e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <prvHeapInit+0xc0>)
 8004542:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004546:	601a      	str	r2, [r3, #0]
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	200003b4 	.word	0x200003b4
 8004558:	20000fb4 	.word	0x20000fb4
 800455c:	20000fbc 	.word	0x20000fbc
 8004560:	20000fc4 	.word	0x20000fc4
 8004564:	20000fc0 	.word	0x20000fc0
 8004568:	20000fc8 	.word	0x20000fc8

0800456c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004574:	4b27      	ldr	r3, [pc, #156]	; (8004614 <prvInsertBlockIntoFreeList+0xa8>)
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e002      	b.n	8004580 <prvInsertBlockIntoFreeList+0x14>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	429a      	cmp	r2, r3
 8004588:	d8f7      	bhi.n	800457a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	4413      	add	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	429a      	cmp	r2, r3
 800459a:	d108      	bne.n	80045ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	441a      	add	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	441a      	add	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d118      	bne.n	80045f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <prvInsertBlockIntoFreeList+0xac>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d00d      	beq.n	80045ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	441a      	add	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	e008      	b.n	80045fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045ea:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <prvInsertBlockIntoFreeList+0xac>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e003      	b.n	80045fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d002      	beq.n	800460a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800460a:	bf00      	nop
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr
 8004614:	20000fb4 	.word	0x20000fb4
 8004618:	20000fbc 	.word	0x20000fbc

0800461c <__libc_init_array>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	2600      	movs	r6, #0
 8004620:	4d0c      	ldr	r5, [pc, #48]	; (8004654 <__libc_init_array+0x38>)
 8004622:	4c0d      	ldr	r4, [pc, #52]	; (8004658 <__libc_init_array+0x3c>)
 8004624:	1b64      	subs	r4, r4, r5
 8004626:	10a4      	asrs	r4, r4, #2
 8004628:	42a6      	cmp	r6, r4
 800462a:	d109      	bne.n	8004640 <__libc_init_array+0x24>
 800462c:	f000 f830 	bl	8004690 <_init>
 8004630:	2600      	movs	r6, #0
 8004632:	4d0a      	ldr	r5, [pc, #40]	; (800465c <__libc_init_array+0x40>)
 8004634:	4c0a      	ldr	r4, [pc, #40]	; (8004660 <__libc_init_array+0x44>)
 8004636:	1b64      	subs	r4, r4, r5
 8004638:	10a4      	asrs	r4, r4, #2
 800463a:	42a6      	cmp	r6, r4
 800463c:	d105      	bne.n	800464a <__libc_init_array+0x2e>
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	f855 3b04 	ldr.w	r3, [r5], #4
 8004644:	4798      	blx	r3
 8004646:	3601      	adds	r6, #1
 8004648:	e7ee      	b.n	8004628 <__libc_init_array+0xc>
 800464a:	f855 3b04 	ldr.w	r3, [r5], #4
 800464e:	4798      	blx	r3
 8004650:	3601      	adds	r6, #1
 8004652:	e7f2      	b.n	800463a <__libc_init_array+0x1e>
 8004654:	0800472c 	.word	0x0800472c
 8004658:	0800472c 	.word	0x0800472c
 800465c:	0800472c 	.word	0x0800472c
 8004660:	08004730 	.word	0x08004730

08004664 <memcpy>:
 8004664:	440a      	add	r2, r1
 8004666:	4291      	cmp	r1, r2
 8004668:	f100 33ff 	add.w	r3, r0, #4294967295
 800466c:	d100      	bne.n	8004670 <memcpy+0xc>
 800466e:	4770      	bx	lr
 8004670:	b510      	push	{r4, lr}
 8004672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004676:	4291      	cmp	r1, r2
 8004678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800467c:	d1f9      	bne.n	8004672 <memcpy+0xe>
 800467e:	bd10      	pop	{r4, pc}

08004680 <memset>:
 8004680:	4603      	mov	r3, r0
 8004682:	4402      	add	r2, r0
 8004684:	4293      	cmp	r3, r2
 8004686:	d100      	bne.n	800468a <memset+0xa>
 8004688:	4770      	bx	lr
 800468a:	f803 1b01 	strb.w	r1, [r3], #1
 800468e:	e7f9      	b.n	8004684 <memset+0x4>

08004690 <_init>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	bf00      	nop
 8004694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004696:	bc08      	pop	{r3}
 8004698:	469e      	mov	lr, r3
 800469a:	4770      	bx	lr

0800469c <_fini>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	bf00      	nop
 80046a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a2:	bc08      	pop	{r3}
 80046a4:	469e      	mov	lr, r3
 80046a6:	4770      	bx	lr

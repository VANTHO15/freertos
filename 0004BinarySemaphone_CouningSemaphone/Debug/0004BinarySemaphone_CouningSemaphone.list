
0004BinarySemaphone_CouningSemaphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003988  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003a98  08003a98  00013a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003af8  08003af8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003af8  08003af8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003af8  08003af8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001018  20000010  08003b10  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001028  08003b10  00021028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fef  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b2  00000000  00000000  00031028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  000337e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00034688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ce6  00000000  00000000  00035418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3ca  00000000  00000000  0004e0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090871  00000000  00000000  0005d4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edd39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c40  00000000  00000000  000edd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003a80 	.word	0x08003a80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003a80 	.word	0x08003a80

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b08e      	sub	sp, #56	; 0x38
 8000184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 f9bd 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f849 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f88d 	bl	80002ac <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000192:	2300      	movs	r3, #0
 8000194:	62bb      	str	r3, [r7, #40]	; 0x28
 8000196:	2300      	movs	r3, #0
 8000198:	62fb      	str	r3, [r7, #44]	; 0x2c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800019a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800019e:	2101      	movs	r1, #1
 80001a0:	4618      	mov	r0, r3
 80001a2:	f001 f9d0 	bl	8001546 <osSemaphoreCreate>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4a16      	ldr	r2, [pc, #88]	; (8000204 <main+0x84>)
 80001aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myCountingSem01 */
  osSemaphoreDef(myCountingSem01);
 80001ac:	2300      	movs	r3, #0
 80001ae:	623b      	str	r3, [r7, #32]
 80001b0:	2300      	movs	r3, #0
 80001b2:	627b      	str	r3, [r7, #36]	; 0x24
  myCountingSem01Handle = osSemaphoreCreate(osSemaphore(myCountingSem01), 3);
 80001b4:	f107 0320 	add.w	r3, r7, #32
 80001b8:	2103      	movs	r1, #3
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 f9c3 	bl	8001546 <osSemaphoreCreate>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4a11      	ldr	r2, [pc, #68]	; (8000208 <main+0x88>)
 80001c4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001c6:	4b11      	ldr	r3, [pc, #68]	; (800020c <main+0x8c>)
 80001c8:	1d3c      	adds	r4, r7, #4
 80001ca:	461d      	mov	r5, r3
 80001cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 f952 	bl	8001486 <osThreadCreate>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a0a      	ldr	r2, [pc, #40]	; (8000210 <main+0x90>)
 80001e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Task1Func, "Task1", 128, NULL, 2, &Task1Handle);
 80001e8:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <main+0x94>)
 80001ea:	9301      	str	r3, [sp, #4]
 80001ec:	2302      	movs	r3, #2
 80001ee:	9300      	str	r3, [sp, #0]
 80001f0:	2300      	movs	r3, #0
 80001f2:	2280      	movs	r2, #128	; 0x80
 80001f4:	4908      	ldr	r1, [pc, #32]	; (8000218 <main+0x98>)
 80001f6:	4809      	ldr	r0, [pc, #36]	; (800021c <main+0x9c>)
 80001f8:	f002 f895 	bl	8002326 <xTaskCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001fc:	f001 f93c 	bl	8001478 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000200:	e7fe      	b.n	8000200 <main+0x80>
 8000202:	bf00      	nop
 8000204:	20000fd8 	.word	0x20000fd8
 8000208:	20000fd4 	.word	0x20000fd4
 800020c:	08003aac 	.word	0x08003aac
 8000210:	20000fcc 	.word	0x20000fcc
 8000214:	20000fd0 	.word	0x20000fd0
 8000218:	08003aa4 	.word	0x08003aa4
 800021c:	080002f1 	.word	0x080002f1

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f003 fc1e 	bl	8003a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000242:	2301      	movs	r3, #1
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	2301      	movs	r3, #1
 8000252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000254:	2302      	movs	r3, #2
 8000256:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000262:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fa5d 	bl	8000728 <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000274:	f000 f864 	bl	8000340 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f000 fcc8 	bl	8000c28 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800029e:	f000 f84f 	bl	8000340 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	; 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <MX_GPIO_Init+0x40>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <MX_GPIO_Init+0x40>)
 80002b8:	f043 0320 	orr.w	r3, r3, #32
 80002bc:	6193      	str	r3, [r2, #24]
 80002be:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <MX_GPIO_Init+0x40>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f003 0320 	and.w	r3, r3, #32
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_GPIO_Init+0x40>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	4a07      	ldr	r2, [pc, #28]	; (80002ec <MX_GPIO_Init+0x40>)
 80002d0:	f043 0304 	orr.w	r3, r3, #4
 80002d4:	6193      	str	r3, [r2, #24]
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <MX_GPIO_Init+0x40>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	f003 0304 	and.w	r3, r3, #4
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]

}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	40021000 	.word	0x40021000

080002f0 <Task1Func>:

/* USER CODE BEGIN 4 */
//xSemaphoreGiveFromISR(myCountingSem01Handle, NULL);  // cứ gọi 1 hàm này thì thêm 1 semaphore
void Task1Func(void  * Param)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
//    osSemaphoreWait(myBinarySem01Handle, osWaitForever);
    osSemaphoreWait(myCountingSem01Handle, osWaitForever);
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <Task1Func+0x18>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000300:	4618      	mov	r0, r3
 8000302:	f001 f95f 	bl	80015c4 <osSemaphoreWait>
 8000306:	e7f7      	b.n	80002f8 <Task1Func+0x8>
 8000308:	20000fd4 	.word	0x20000fd4

0800030c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000314:	2001      	movs	r0, #1
 8000316:	f001 f902 	bl	800151e <osDelay>
 800031a:	e7fb      	b.n	8000314 <StartDefaultTask+0x8>

0800031c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d101      	bne.n	8000332 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800032e:	f000 f8ff 	bl	8000530 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40000800 	.word	0x40000800

08000340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000344:	b672      	cpsid	i
}
 8000346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000348:	e7fe      	b.n	8000348 <Error_Handler+0x8>
	...

0800034c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000352:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <HAL_MspInit+0x68>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	4a17      	ldr	r2, [pc, #92]	; (80003b4 <HAL_MspInit+0x68>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6193      	str	r3, [r2, #24]
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <HAL_MspInit+0x68>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
 8000368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <HAL_MspInit+0x68>)
 800036c:	69db      	ldr	r3, [r3, #28]
 800036e:	4a11      	ldr	r2, [pc, #68]	; (80003b4 <HAL_MspInit+0x68>)
 8000370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000374:	61d3      	str	r3, [r2, #28]
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_MspInit+0x68>)
 8000378:	69db      	ldr	r3, [r3, #28]
 800037a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000382:	2200      	movs	r2, #0
 8000384:	210f      	movs	r1, #15
 8000386:	f06f 0001 	mvn.w	r0, #1
 800038a:	f000 f9a2 	bl	80006d2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <HAL_MspInit+0x6c>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <HAL_MspInit+0x6c>)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003aa:	bf00      	nop
 80003ac:	3710      	adds	r7, #16
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010000 	.word	0x40010000

080003bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08c      	sub	sp, #48	; 0x30
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80003cc:	2200      	movs	r2, #0
 80003ce:	6879      	ldr	r1, [r7, #4]
 80003d0:	201e      	movs	r0, #30
 80003d2:	f000 f97e 	bl	80006d2 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80003d6:	201e      	movs	r0, #30
 80003d8:	f000 f997 	bl	800070a <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80003dc:	4b1f      	ldr	r3, [pc, #124]	; (800045c <HAL_InitTick+0xa0>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	4a1e      	ldr	r2, [pc, #120]	; (800045c <HAL_InitTick+0xa0>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	61d3      	str	r3, [r2, #28]
 80003e8:	4b1c      	ldr	r3, [pc, #112]	; (800045c <HAL_InitTick+0xa0>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	f003 0304 	and.w	r3, r3, #4
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003f4:	f107 0210 	add.w	r2, r7, #16
 80003f8:	f107 0314 	add.w	r3, r7, #20
 80003fc:	4611      	mov	r1, r2
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 fd7a 	bl	8000ef8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000404:	f000 fd64 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 8000408:	4603      	mov	r3, r0
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800040e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000410:	4a13      	ldr	r2, [pc, #76]	; (8000460 <HAL_InitTick+0xa4>)
 8000412:	fba2 2303 	umull	r2, r3, r2, r3
 8000416:	0c9b      	lsrs	r3, r3, #18
 8000418:	3b01      	subs	r3, #1
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <HAL_InitTick+0xa8>)
 800041e:	4a12      	ldr	r2, [pc, #72]	; (8000468 <HAL_InitTick+0xac>)
 8000420:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <HAL_InitTick+0xa8>)
 8000424:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000428:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800042a:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <HAL_InitTick+0xa8>)
 800042c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800042e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <HAL_InitTick+0xa8>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <HAL_InitTick+0xa8>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800043c:	4809      	ldr	r0, [pc, #36]	; (8000464 <HAL_InitTick+0xa8>)
 800043e:	f000 fda9 	bl	8000f94 <HAL_TIM_Base_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d104      	bne.n	8000452 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000448:	4806      	ldr	r0, [pc, #24]	; (8000464 <HAL_InitTick+0xa8>)
 800044a:	f000 fdfb 	bl	8001044 <HAL_TIM_Base_Start_IT>
 800044e:	4603      	mov	r3, r0
 8000450:	e000      	b.n	8000454 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000452:	2301      	movs	r3, #1
}
 8000454:	4618      	mov	r0, r3
 8000456:	3730      	adds	r7, #48	; 0x30
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	431bde83 	.word	0x431bde83
 8000464:	20000fdc 	.word	0x20000fdc
 8000468:	40000800 	.word	0x40000800

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <NMI_Handler+0x4>

08000472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <HardFault_Handler+0x4>

08000478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <MemManage_Handler+0x4>

0800047e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <BusFault_Handler+0x4>

08000484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <UsageFault_Handler+0x4>

0800048a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
	...

08000498 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <TIM4_IRQHandler+0x10>)
 800049e:	f000 fe23 	bl	80010e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000fdc 	.word	0x20000fdc

080004ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004ba:	490d      	ldr	r1, [pc, #52]	; (80004f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004bc:	4a0d      	ldr	r2, [pc, #52]	; (80004f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c0:	e002      	b.n	80004c8 <LoopCopyDataInit>

080004c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c6:	3304      	adds	r3, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004cc:	d3f9      	bcc.n	80004c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004d0:	4c0a      	ldr	r4, [pc, #40]	; (80004fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d4:	e001      	b.n	80004da <LoopFillZerobss>

080004d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d8:	3204      	adds	r2, #4

080004da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004dc:	d3fb      	bcc.n	80004d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004de:	f7ff ffe5 	bl	80004ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004e2:	f003 fa93 	bl	8003a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e6:	f7ff fe4b 	bl	8000180 <main>
  bx lr
 80004ea:	4770      	bx	lr
  ldr r0, =_sdata
 80004ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80004f4:	08003b00 	.word	0x08003b00
  ldr r2, =_sbss
 80004f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80004fc:	20001028 	.word	0x20001028

08000500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC1_2_IRQHandler>
	...

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_Init+0x28>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_Init+0x28>)
 800050e:	f043 0310 	orr.w	r3, r3, #16
 8000512:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f8d1 	bl	80006bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	200f      	movs	r0, #15
 800051c:	f7ff ff4e 	bl	80003bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f7ff ff14 	bl	800034c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40022000 	.word	0x40022000

08000530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <HAL_IncTick+0x1c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_IncTick+0x20>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4413      	add	r3, r2
 8000540:	4a03      	ldr	r2, [pc, #12]	; (8000550 <HAL_IncTick+0x20>)
 8000542:	6013      	str	r3, [r2, #0]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	20000008 	.word	0x20000008
 8000550:	20001024 	.word	0x20001024

08000554 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return uwTick;
 8000558:	4b02      	ldr	r3, [pc, #8]	; (8000564 <HAL_GetTick+0x10>)
 800055a:	681b      	ldr	r3, [r3, #0]
}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	20001024 	.word	0x20001024

08000568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f003 0307 	and.w	r3, r3, #7
 8000576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <__NVIC_SetPriorityGrouping+0x44>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000584:	4013      	ands	r3, r2
 8000586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800059a:	4a04      	ldr	r2, [pc, #16]	; (80005ac <__NVIC_SetPriorityGrouping+0x44>)
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	60d3      	str	r3, [r2, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <__NVIC_GetPriorityGrouping+0x18>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	f003 0307 	and.w	r3, r3, #7
}
 80005be:	4618      	mov	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db0b      	blt.n	80005f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	f003 021f 	and.w	r2, r3, #31
 80005e4:	4906      	ldr	r1, [pc, #24]	; (8000600 <__NVIC_EnableIRQ+0x34>)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	095b      	lsrs	r3, r3, #5
 80005ec:	2001      	movs	r0, #1
 80005ee:	fa00 f202 	lsl.w	r2, r0, r2
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff4f 	bl	8000568 <__NVIC_SetPriorityGrouping>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b086      	sub	sp, #24
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	4603      	mov	r3, r0
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
 80006de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e4:	f7ff ff64 	bl	80005b0 <__NVIC_GetPriorityGrouping>
 80006e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	68b9      	ldr	r1, [r7, #8]
 80006ee:	6978      	ldr	r0, [r7, #20]
 80006f0:	f7ff ffb2 	bl	8000658 <NVIC_EncodePriority>
 80006f4:	4602      	mov	r2, r0
 80006f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff81 	bl	8000604 <__NVIC_SetPriority>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	4603      	mov	r3, r0
 8000712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff57 	bl	80005cc <__NVIC_EnableIRQ>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d101      	bne.n	800073a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e26c      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f000 8087 	beq.w	8000856 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000748:	4b92      	ldr	r3, [pc, #584]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f003 030c 	and.w	r3, r3, #12
 8000750:	2b04      	cmp	r3, #4
 8000752:	d00c      	beq.n	800076e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000754:	4b8f      	ldr	r3, [pc, #572]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f003 030c 	and.w	r3, r3, #12
 800075c:	2b08      	cmp	r3, #8
 800075e:	d112      	bne.n	8000786 <HAL_RCC_OscConfig+0x5e>
 8000760:	4b8c      	ldr	r3, [pc, #560]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800076c:	d10b      	bne.n	8000786 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800076e:	4b89      	ldr	r3, [pc, #548]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d06c      	beq.n	8000854 <HAL_RCC_OscConfig+0x12c>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d168      	bne.n	8000854 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e246      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800078e:	d106      	bne.n	800079e <HAL_RCC_OscConfig+0x76>
 8000790:	4b80      	ldr	r3, [pc, #512]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a7f      	ldr	r2, [pc, #508]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 8000796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	e02e      	b.n	80007fc <HAL_RCC_OscConfig+0xd4>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d10c      	bne.n	80007c0 <HAL_RCC_OscConfig+0x98>
 80007a6:	4b7b      	ldr	r3, [pc, #492]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a7a      	ldr	r2, [pc, #488]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80007ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007b0:	6013      	str	r3, [r2, #0]
 80007b2:	4b78      	ldr	r3, [pc, #480]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a77      	ldr	r2, [pc, #476]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80007b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007bc:	6013      	str	r3, [r2, #0]
 80007be:	e01d      	b.n	80007fc <HAL_RCC_OscConfig+0xd4>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007c8:	d10c      	bne.n	80007e4 <HAL_RCC_OscConfig+0xbc>
 80007ca:	4b72      	ldr	r3, [pc, #456]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a71      	ldr	r2, [pc, #452]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80007d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	4b6f      	ldr	r3, [pc, #444]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a6e      	ldr	r2, [pc, #440]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80007dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e00b      	b.n	80007fc <HAL_RCC_OscConfig+0xd4>
 80007e4:	4b6b      	ldr	r3, [pc, #428]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a6a      	ldr	r2, [pc, #424]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80007ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b68      	ldr	r3, [pc, #416]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a67      	ldr	r2, [pc, #412]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80007f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d013      	beq.n	800082c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000804:	f7ff fea6 	bl	8000554 <HAL_GetTick>
 8000808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800080a:	e008      	b.n	800081e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800080c:	f7ff fea2 	bl	8000554 <HAL_GetTick>
 8000810:	4602      	mov	r2, r0
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	2b64      	cmp	r3, #100	; 0x64
 8000818:	d901      	bls.n	800081e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800081a:	2303      	movs	r3, #3
 800081c:	e1fa      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800081e:	4b5d      	ldr	r3, [pc, #372]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0f0      	beq.n	800080c <HAL_RCC_OscConfig+0xe4>
 800082a:	e014      	b.n	8000856 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800082c:	f7ff fe92 	bl	8000554 <HAL_GetTick>
 8000830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000832:	e008      	b.n	8000846 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000834:	f7ff fe8e 	bl	8000554 <HAL_GetTick>
 8000838:	4602      	mov	r2, r0
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	2b64      	cmp	r3, #100	; 0x64
 8000840:	d901      	bls.n	8000846 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000842:	2303      	movs	r3, #3
 8000844:	e1e6      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000846:	4b53      	ldr	r3, [pc, #332]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1f0      	bne.n	8000834 <HAL_RCC_OscConfig+0x10c>
 8000852:	e000      	b.n	8000856 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	2b00      	cmp	r3, #0
 8000860:	d063      	beq.n	800092a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000862:	4b4c      	ldr	r3, [pc, #304]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	f003 030c 	and.w	r3, r3, #12
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00b      	beq.n	8000886 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800086e:	4b49      	ldr	r3, [pc, #292]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f003 030c 	and.w	r3, r3, #12
 8000876:	2b08      	cmp	r3, #8
 8000878:	d11c      	bne.n	80008b4 <HAL_RCC_OscConfig+0x18c>
 800087a:	4b46      	ldr	r3, [pc, #280]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d116      	bne.n	80008b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000886:	4b43      	ldr	r3, [pc, #268]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	2b00      	cmp	r3, #0
 8000890:	d005      	beq.n	800089e <HAL_RCC_OscConfig+0x176>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d001      	beq.n	800089e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e1ba      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800089e:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	4939      	ldr	r1, [pc, #228]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80008ae:	4313      	orrs	r3, r2
 80008b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008b2:	e03a      	b.n	800092a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d020      	beq.n	80008fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <HAL_RCC_OscConfig+0x270>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008c2:	f7ff fe47 	bl	8000554 <HAL_GetTick>
 80008c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008c8:	e008      	b.n	80008dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008ca:	f7ff fe43 	bl	8000554 <HAL_GetTick>
 80008ce:	4602      	mov	r2, r0
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d901      	bls.n	80008dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80008d8:	2303      	movs	r3, #3
 80008da:	e19b      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008dc:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f003 0302 	and.w	r3, r3, #2
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d0f0      	beq.n	80008ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008e8:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	4927      	ldr	r1, [pc, #156]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 80008f8:	4313      	orrs	r3, r2
 80008fa:	600b      	str	r3, [r1, #0]
 80008fc:	e015      	b.n	800092a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008fe:	4b26      	ldr	r3, [pc, #152]	; (8000998 <HAL_RCC_OscConfig+0x270>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000904:	f7ff fe26 	bl	8000554 <HAL_GetTick>
 8000908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800090a:	e008      	b.n	800091e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800090c:	f7ff fe22 	bl	8000554 <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	2b02      	cmp	r3, #2
 8000918:	d901      	bls.n	800091e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800091a:	2303      	movs	r3, #3
 800091c:	e17a      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800091e:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1f0      	bne.n	800090c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	2b00      	cmp	r3, #0
 8000934:	d03a      	beq.n	80009ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d019      	beq.n	8000972 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_RCC_OscConfig+0x274>)
 8000940:	2201      	movs	r2, #1
 8000942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000944:	f7ff fe06 	bl	8000554 <HAL_GetTick>
 8000948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800094a:	e008      	b.n	800095e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800094c:	f7ff fe02 	bl	8000554 <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	2b02      	cmp	r3, #2
 8000958:	d901      	bls.n	800095e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800095a:	2303      	movs	r3, #3
 800095c:	e15a      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_RCC_OscConfig+0x26c>)
 8000960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	2b00      	cmp	r3, #0
 8000968:	d0f0      	beq.n	800094c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800096a:	2001      	movs	r0, #1
 800096c:	f000 faf4 	bl	8000f58 <RCC_Delay>
 8000970:	e01c      	b.n	80009ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_RCC_OscConfig+0x274>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000978:	f7ff fdec 	bl	8000554 <HAL_GetTick>
 800097c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800097e:	e00f      	b.n	80009a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000980:	f7ff fde8 	bl	8000554 <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	2b02      	cmp	r3, #2
 800098c:	d908      	bls.n	80009a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800098e:	2303      	movs	r3, #3
 8000990:	e140      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000
 8000998:	42420000 	.word	0x42420000
 800099c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009a0:	4b9e      	ldr	r3, [pc, #632]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 80009a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1e9      	bne.n	8000980 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	f000 80a6 	beq.w	8000b06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009be:	4b97      	ldr	r3, [pc, #604]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10d      	bne.n	80009e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b94      	ldr	r3, [pc, #592]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a93      	ldr	r2, [pc, #588]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b91      	ldr	r3, [pc, #580]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009e2:	2301      	movs	r3, #1
 80009e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009e6:	4b8e      	ldr	r3, [pc, #568]	; (8000c20 <HAL_RCC_OscConfig+0x4f8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d118      	bne.n	8000a24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009f2:	4b8b      	ldr	r3, [pc, #556]	; (8000c20 <HAL_RCC_OscConfig+0x4f8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a8a      	ldr	r2, [pc, #552]	; (8000c20 <HAL_RCC_OscConfig+0x4f8>)
 80009f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009fe:	f7ff fda9 	bl	8000554 <HAL_GetTick>
 8000a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a04:	e008      	b.n	8000a18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a06:	f7ff fda5 	bl	8000554 <HAL_GetTick>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	2b64      	cmp	r3, #100	; 0x64
 8000a12:	d901      	bls.n	8000a18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a14:	2303      	movs	r3, #3
 8000a16:	e0fd      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a18:	4b81      	ldr	r3, [pc, #516]	; (8000c20 <HAL_RCC_OscConfig+0x4f8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f0      	beq.n	8000a06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d106      	bne.n	8000a3a <HAL_RCC_OscConfig+0x312>
 8000a2c:	4b7b      	ldr	r3, [pc, #492]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a2e:	6a1b      	ldr	r3, [r3, #32]
 8000a30:	4a7a      	ldr	r2, [pc, #488]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6213      	str	r3, [r2, #32]
 8000a38:	e02d      	b.n	8000a96 <HAL_RCC_OscConfig+0x36e>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d10c      	bne.n	8000a5c <HAL_RCC_OscConfig+0x334>
 8000a42:	4b76      	ldr	r3, [pc, #472]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a44:	6a1b      	ldr	r3, [r3, #32]
 8000a46:	4a75      	ldr	r2, [pc, #468]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a48:	f023 0301 	bic.w	r3, r3, #1
 8000a4c:	6213      	str	r3, [r2, #32]
 8000a4e:	4b73      	ldr	r3, [pc, #460]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a50:	6a1b      	ldr	r3, [r3, #32]
 8000a52:	4a72      	ldr	r2, [pc, #456]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a54:	f023 0304 	bic.w	r3, r3, #4
 8000a58:	6213      	str	r3, [r2, #32]
 8000a5a:	e01c      	b.n	8000a96 <HAL_RCC_OscConfig+0x36e>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	2b05      	cmp	r3, #5
 8000a62:	d10c      	bne.n	8000a7e <HAL_RCC_OscConfig+0x356>
 8000a64:	4b6d      	ldr	r3, [pc, #436]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a66:	6a1b      	ldr	r3, [r3, #32]
 8000a68:	4a6c      	ldr	r2, [pc, #432]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6213      	str	r3, [r2, #32]
 8000a70:	4b6a      	ldr	r3, [pc, #424]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	4a69      	ldr	r2, [pc, #420]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6213      	str	r3, [r2, #32]
 8000a7c:	e00b      	b.n	8000a96 <HAL_RCC_OscConfig+0x36e>
 8000a7e:	4b67      	ldr	r3, [pc, #412]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a80:	6a1b      	ldr	r3, [r3, #32]
 8000a82:	4a66      	ldr	r2, [pc, #408]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a84:	f023 0301 	bic.w	r3, r3, #1
 8000a88:	6213      	str	r3, [r2, #32]
 8000a8a:	4b64      	ldr	r3, [pc, #400]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	4a63      	ldr	r2, [pc, #396]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000a90:	f023 0304 	bic.w	r3, r3, #4
 8000a94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d015      	beq.n	8000aca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a9e:	f7ff fd59 	bl	8000554 <HAL_GetTick>
 8000aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa4:	e00a      	b.n	8000abc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aa6:	f7ff fd55 	bl	8000554 <HAL_GetTick>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d901      	bls.n	8000abc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e0ab      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000abc:	4b57      	ldr	r3, [pc, #348]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0ee      	beq.n	8000aa6 <HAL_RCC_OscConfig+0x37e>
 8000ac8:	e014      	b.n	8000af4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aca:	f7ff fd43 	bl	8000554 <HAL_GetTick>
 8000ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ad0:	e00a      	b.n	8000ae8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fd3f 	bl	8000554 <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d901      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e095      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae8:	4b4c      	ldr	r3, [pc, #304]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000aea:	6a1b      	ldr	r3, [r3, #32]
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1ee      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000af4:	7dfb      	ldrb	r3, [r7, #23]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d105      	bne.n	8000b06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000afa:	4b48      	ldr	r3, [pc, #288]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a47      	ldr	r2, [pc, #284]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 8081 	beq.w	8000c12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b10:	4b42      	ldr	r3, [pc, #264]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f003 030c 	and.w	r3, r3, #12
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d061      	beq.n	8000be0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d146      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b24:	4b3f      	ldr	r3, [pc, #252]	; (8000c24 <HAL_RCC_OscConfig+0x4fc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b2a:	f7ff fd13 	bl	8000554 <HAL_GetTick>
 8000b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b30:	e008      	b.n	8000b44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b32:	f7ff fd0f 	bl	8000554 <HAL_GetTick>
 8000b36:	4602      	mov	r2, r0
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d901      	bls.n	8000b44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b40:	2303      	movs	r3, #3
 8000b42:	e067      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b44:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1f0      	bne.n	8000b32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a1b      	ldr	r3, [r3, #32]
 8000b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b58:	d108      	bne.n	8000b6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b5a:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	492d      	ldr	r1, [pc, #180]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a19      	ldr	r1, [r3, #32]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	4927      	ldr	r1, [pc, #156]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000b80:	4313      	orrs	r3, r2
 8000b82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <HAL_RCC_OscConfig+0x4fc>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8a:	f7ff fce3 	bl	8000554 <HAL_GetTick>
 8000b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b90:	e008      	b.n	8000ba4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b92:	f7ff fcdf 	bl	8000554 <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d901      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e037      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f0      	beq.n	8000b92 <HAL_RCC_OscConfig+0x46a>
 8000bb0:	e02f      	b.n	8000c12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <HAL_RCC_OscConfig+0x4fc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fccc 	bl	8000554 <HAL_GetTick>
 8000bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bbe:	e008      	b.n	8000bd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bc0:	f7ff fcc8 	bl	8000554 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d901      	bls.n	8000bd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	e020      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1f0      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x498>
 8000bde:	e018      	b.n	8000c12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d101      	bne.n	8000bec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e013      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_RCC_OscConfig+0x4f4>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a1b      	ldr	r3, [r3, #32]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d106      	bne.n	8000c0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d001      	beq.n	8000c12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40007000 	.word	0x40007000
 8000c24:	42420060 	.word	0x42420060

08000c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e0d0      	b.n	8000dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c3c:	4b6a      	ldr	r3, [pc, #424]	; (8000de8 <HAL_RCC_ClockConfig+0x1c0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d910      	bls.n	8000c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c4a:	4b67      	ldr	r3, [pc, #412]	; (8000de8 <HAL_RCC_ClockConfig+0x1c0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f023 0207 	bic.w	r2, r3, #7
 8000c52:	4965      	ldr	r1, [pc, #404]	; (8000de8 <HAL_RCC_ClockConfig+0x1c0>)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c5a:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <HAL_RCC_ClockConfig+0x1c0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d001      	beq.n	8000c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e0b8      	b.n	8000dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d020      	beq.n	8000cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d005      	beq.n	8000c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c84:	4b59      	ldr	r3, [pc, #356]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	4a58      	ldr	r2, [pc, #352]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d005      	beq.n	8000ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c9c:	4b53      	ldr	r3, [pc, #332]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	4a52      	ldr	r2, [pc, #328]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000ca2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ca8:	4b50      	ldr	r3, [pc, #320]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	494d      	ldr	r1, [pc, #308]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d040      	beq.n	8000d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d107      	bne.n	8000cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cce:	4b47      	ldr	r3, [pc, #284]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d115      	bne.n	8000d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e07f      	b.n	8000dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d107      	bne.n	8000cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ce6:	4b41      	ldr	r3, [pc, #260]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d109      	bne.n	8000d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e073      	b.n	8000dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e06b      	b.n	8000dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d06:	4b39      	ldr	r3, [pc, #228]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f023 0203 	bic.w	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	4936      	ldr	r1, [pc, #216]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000d14:	4313      	orrs	r3, r2
 8000d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d18:	f7ff fc1c 	bl	8000554 <HAL_GetTick>
 8000d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d1e:	e00a      	b.n	8000d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d20:	f7ff fc18 	bl	8000554 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e053      	b.n	8000dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 020c 	and.w	r2, r3, #12
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d1eb      	bne.n	8000d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <HAL_RCC_ClockConfig+0x1c0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d210      	bcs.n	8000d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <HAL_RCC_ClockConfig+0x1c0>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f023 0207 	bic.w	r2, r3, #7
 8000d5e:	4922      	ldr	r1, [pc, #136]	; (8000de8 <HAL_RCC_ClockConfig+0x1c0>)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_RCC_ClockConfig+0x1c0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d001      	beq.n	8000d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e032      	b.n	8000dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d008      	beq.n	8000d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	4916      	ldr	r1, [pc, #88]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d009      	beq.n	8000db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	490e      	ldr	r1, [pc, #56]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000db6:	f000 f821 	bl	8000dfc <HAL_RCC_GetSysClockFreq>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_RCC_ClockConfig+0x1c4>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	490a      	ldr	r1, [pc, #40]	; (8000df0 <HAL_RCC_ClockConfig+0x1c8>)
 8000dc8:	5ccb      	ldrb	r3, [r1, r3]
 8000dca:	fa22 f303 	lsr.w	r3, r2, r3
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_RCC_ClockConfig+0x1cc>)
 8000dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_RCC_ClockConfig+0x1d0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff faf0 	bl	80003bc <HAL_InitTick>

  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40022000 	.word	0x40022000
 8000dec:	40021000 	.word	0x40021000
 8000df0:	08003ae0 	.word	0x08003ae0
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000dfc:	b490      	push	{r4, r7}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e04:	1d3c      	adds	r4, r7, #4
 8000e06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e0c:	f240 2301 	movw	r3, #513	; 0x201
 8000e10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d002      	beq.n	8000e3c <HAL_RCC_GetSysClockFreq+0x40>
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d003      	beq.n	8000e42 <HAL_RCC_GetSysClockFreq+0x46>
 8000e3a:	e02d      	b.n	8000e98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e3e:	623b      	str	r3, [r7, #32]
      break;
 8000e40:	e02d      	b.n	8000e9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	0c9b      	lsrs	r3, r3, #18
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e4e:	4413      	add	r3, r2
 8000e50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d013      	beq.n	8000e88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	0c5b      	lsrs	r3, r3, #17
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e6e:	4413      	add	r3, r2
 8000e70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e7a:	fb02 f203 	mul.w	r2, r2, r3
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
 8000e86:	e004      	b.n	8000e92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e8c:	fb02 f303 	mul.w	r3, r2, r3
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	623b      	str	r3, [r7, #32]
      break;
 8000e96:	e002      	b.n	8000e9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e9a:	623b      	str	r3, [r7, #32]
      break;
 8000e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e9e:	6a3b      	ldr	r3, [r7, #32]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc90      	pop	{r4, r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	08003ac8 	.word	0x08003ac8
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	007a1200 	.word	0x007a1200
 8000eb8:	003d0900 	.word	0x003d0900

08000ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ec0:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	20000000 	.word	0x20000000

08000ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ed4:	f7ff fff2 	bl	8000ebc <HAL_RCC_GetHCLKFreq>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	0a1b      	lsrs	r3, r3, #8
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	4903      	ldr	r1, [pc, #12]	; (8000ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ee6:	5ccb      	ldrb	r3, [r1, r3]
 8000ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	08003af0 	.word	0x08003af0

08000ef8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	220f      	movs	r2, #15
 8000f06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_RCC_GetClockConfig+0x58>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0203 	and.w	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_RCC_GetClockConfig+0x58>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_RCC_GetClockConfig+0x58>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_RCC_GetClockConfig+0x58>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_RCC_GetClockConfig+0x5c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0207 	and.w	r2, r3, #7
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40022000 	.word	0x40022000

08000f58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <RCC_Delay+0x34>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <RCC_Delay+0x38>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	0a5b      	lsrs	r3, r3, #9
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	fb02 f303 	mul.w	r3, r2, r3
 8000f72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f74:	bf00      	nop
  }
  while (Delay --);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1e5a      	subs	r2, r3, #1
 8000f7a:	60fa      	str	r2, [r7, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f9      	bne.n	8000f74 <RCC_Delay+0x1c>
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	10624dd3 	.word	0x10624dd3

08000f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e041      	b.n	800102a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d106      	bne.n	8000fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f839 	bl	8001032 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	f000 f9b4 	bl	8001340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d001      	beq.n	800105c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e03a      	b.n	80010d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2202      	movs	r2, #2
 8001060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a18      	ldr	r2, [pc, #96]	; (80010dc <HAL_TIM_Base_Start_IT+0x98>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00e      	beq.n	800109c <HAL_TIM_Base_Start_IT+0x58>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001086:	d009      	beq.n	800109c <HAL_TIM_Base_Start_IT+0x58>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d004      	beq.n	800109c <HAL_TIM_Base_Start_IT+0x58>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d111      	bne.n	80010c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d010      	beq.n	80010d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 0201 	orr.w	r2, r2, #1
 80010bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80010be:	e007      	b.n	80010d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0201 	orr.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	40012c00 	.word	0x40012c00
 80010e0:	40000400 	.word	0x40000400
 80010e4:	40000800 	.word	0x40000800

080010e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d122      	bne.n	8001144 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b02      	cmp	r3, #2
 800110a:	d11b      	bne.n	8001144 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f06f 0202 	mvn.w	r2, #2
 8001114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2201      	movs	r2, #1
 800111a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f8ed 	bl	800130a <HAL_TIM_IC_CaptureCallback>
 8001130:	e005      	b.n	800113e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f8e0 	bl	80012f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f8ef 	bl	800131c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b04      	cmp	r3, #4
 8001150:	d122      	bne.n	8001198 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b04      	cmp	r3, #4
 800115e:	d11b      	bne.n	8001198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f06f 0204 	mvn.w	r2, #4
 8001168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2202      	movs	r2, #2
 800116e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f8c3 	bl	800130a <HAL_TIM_IC_CaptureCallback>
 8001184:	e005      	b.n	8001192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f8b6 	bl	80012f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f8c5 	bl	800131c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d122      	bne.n	80011ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d11b      	bne.n	80011ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f06f 0208 	mvn.w	r2, #8
 80011bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2204      	movs	r2, #4
 80011c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f899 	bl	800130a <HAL_TIM_IC_CaptureCallback>
 80011d8:	e005      	b.n	80011e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f88c 	bl	80012f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f89b 	bl	800131c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d122      	bne.n	8001240 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	2b10      	cmp	r3, #16
 8001206:	d11b      	bne.n	8001240 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f06f 0210 	mvn.w	r2, #16
 8001210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2208      	movs	r2, #8
 8001216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f86f 	bl	800130a <HAL_TIM_IC_CaptureCallback>
 800122c:	e005      	b.n	800123a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f862 	bl	80012f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f871 	bl	800131c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b01      	cmp	r3, #1
 800124c:	d10e      	bne.n	800126c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b01      	cmp	r3, #1
 800125a:	d107      	bne.n	800126c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f06f 0201 	mvn.w	r2, #1
 8001264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff f858 	bl	800031c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	2b80      	cmp	r3, #128	; 0x80
 8001278:	d10e      	bne.n	8001298 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001284:	2b80      	cmp	r3, #128	; 0x80
 8001286:	d107      	bne.n	8001298 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f8bf 	bl	8001416 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a2:	2b40      	cmp	r3, #64	; 0x40
 80012a4:	d10e      	bne.n	80012c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b0:	2b40      	cmp	r3, #64	; 0x40
 80012b2:	d107      	bne.n	80012c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80012bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f835 	bl	800132e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	2b20      	cmp	r3, #32
 80012d0:	d10e      	bne.n	80012f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	2b20      	cmp	r3, #32
 80012de:	d107      	bne.n	80012f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f06f 0220 	mvn.w	r2, #32
 80012e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f88a 	bl	8001404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <TIM_Base_SetConfig+0xb8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d00b      	beq.n	8001370 <TIM_Base_SetConfig+0x30>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135e:	d007      	beq.n	8001370 <TIM_Base_SetConfig+0x30>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a26      	ldr	r2, [pc, #152]	; (80013fc <TIM_Base_SetConfig+0xbc>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d003      	beq.n	8001370 <TIM_Base_SetConfig+0x30>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <TIM_Base_SetConfig+0xc0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d108      	bne.n	8001382 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <TIM_Base_SetConfig+0xb8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00b      	beq.n	80013a2 <TIM_Base_SetConfig+0x62>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001390:	d007      	beq.n	80013a2 <TIM_Base_SetConfig+0x62>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <TIM_Base_SetConfig+0xbc>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d003      	beq.n	80013a2 <TIM_Base_SetConfig+0x62>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a18      	ldr	r2, [pc, #96]	; (8001400 <TIM_Base_SetConfig+0xc0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d108      	bne.n	80013b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	4313      	orrs	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <TIM_Base_SetConfig+0xb8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d103      	bne.n	80013e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	615a      	str	r2, [r3, #20]
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	40012c00 	.word	0x40012c00
 80013fc:	40000400 	.word	0x40000400
 8001400:	40000800 	.word	0x40000800

08001404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143a:	2b84      	cmp	r3, #132	; 0x84
 800143c:	d005      	beq.n	800144a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800143e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4413      	add	r3, r2
 8001446:	3303      	adds	r3, #3
 8001448:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800145c:	f3ef 8305 	mrs	r3, IPSR
 8001460:	607b      	str	r3, [r7, #4]
  return(result);
 8001462:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf14      	ite	ne
 8001468:	2301      	movne	r3, #1
 800146a:	2300      	moveq	r3, #0
 800146c:	b2db      	uxtb	r3, r3
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800147c:	f001 f8b6 	bl	80025ec <vTaskStartScheduler>
  
  return osOK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}

08001486 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001486:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001488:	b089      	sub	sp, #36	; 0x24
 800148a:	af04      	add	r7, sp, #16
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <osThreadCreate+0x54>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01c      	beq.n	80014da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685c      	ldr	r4, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681d      	ldr	r5, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691e      	ldr	r6, [r3, #16]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ffb8 	bl	8001428 <makeFreeRtosPriority>
 80014b8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014c2:	9202      	str	r2, [sp, #8]
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	9100      	str	r1, [sp, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4632      	mov	r2, r6
 80014cc:	4629      	mov	r1, r5
 80014ce:	4620      	mov	r0, r4
 80014d0:	f000 fecd 	bl	800226e <xTaskCreateStatic>
 80014d4:	4603      	mov	r3, r0
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e01c      	b.n	8001514 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685c      	ldr	r4, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014e6:	b29e      	uxth	r6, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff9a 	bl	8001428 <makeFreeRtosPriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	9200      	str	r2, [sp, #0]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	4632      	mov	r2, r6
 8001502:	4629      	mov	r1, r5
 8001504:	4620      	mov	r0, r4
 8001506:	f000 ff0e 	bl	8002326 <xTaskCreate>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d001      	beq.n	8001514 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001510:	2300      	movs	r3, #0
 8001512:	e000      	b.n	8001516 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001514:	68fb      	ldr	r3, [r7, #12]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800151e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <osDelay+0x16>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	e000      	b.n	8001536 <osDelay+0x18>
 8001534:	2301      	movs	r3, #1
 8001536:	4618      	mov	r0, r3
 8001538:	f001 f824 	bl	8002584 <vTaskDelay>
  
  return osOK;
 800153c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af02      	add	r7, sp, #8
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d016      	beq.n	8001586 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d10a      	bne.n	8001574 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2203      	movs	r2, #3
 8001564:	9200      	str	r2, [sp, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2001      	movs	r0, #1
 800156c:	f000 f990 	bl	8001890 <xQueueGenericCreateStatic>
 8001570:	4603      	mov	r3, r0
 8001572:	e023      	b.n	80015bc <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8001574:	6838      	ldr	r0, [r7, #0]
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	461a      	mov	r2, r3
 800157e:	f000 fa5b 	bl	8001a38 <xQueueCreateCountingSemaphoreStatic>
 8001582:	4603      	mov	r3, r0
 8001584:	e01a      	b.n	80015bc <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d110      	bne.n	80015ae <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800158c:	2203      	movs	r2, #3
 800158e:	2100      	movs	r1, #0
 8001590:	2001      	movs	r0, #1
 8001592:	f000 f9f4 	bl	800197e <xQueueGenericCreate>
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <osSemaphoreCreate+0x64>
 800159e:	2300      	movs	r3, #0
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 fab1 	bl	8001b0c <xQueueGenericSend>
      return sema;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	e006      	b.n	80015bc <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 fa76 	bl	8001aa6 <xQueueCreateCountingSemaphore>
 80015ba:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	e03a      	b.n	8001652 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e6:	d103      	bne.n	80015f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	e009      	b.n	8001604 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <osSemaphoreWait+0x40>
      ticks = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001604:	f7ff ff27 	bl	8001456 <inHandlerMode>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d017      	beq.n	800163e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	461a      	mov	r2, r3
 8001614:	2100      	movs	r1, #0
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fc82 	bl	8001f20 <xQueueReceiveFromISR>
 800161c:	4603      	mov	r3, r0
 800161e:	2b01      	cmp	r3, #1
 8001620:	d001      	beq.n	8001626 <osSemaphoreWait+0x62>
      return osErrorOS;
 8001622:	23ff      	movs	r3, #255	; 0xff
 8001624:	e015      	b.n	8001652 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d011      	beq.n	8001650 <osSemaphoreWait+0x8c>
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <osSemaphoreWait+0x98>)
 800162e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f3bf 8f4f 	dsb	sy
 8001638:	f3bf 8f6f 	isb	sy
 800163c:	e008      	b.n	8001650 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800163e:	68f9      	ldr	r1, [r7, #12]
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fb61 	bl	8001d08 <xQueueSemaphoreTake>
 8001646:	4603      	mov	r3, r0
 8001648:	2b01      	cmp	r3, #1
 800164a:	d001      	beq.n	8001650 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800164c:	23ff      	movs	r3, #255	; 0xff
 800164e:	e000      	b.n	8001652 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000ed04 	.word	0xe000ed04

08001660 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f103 0208 	add.w	r2, r3, #8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f103 0208 	add.w	r2, r3, #8
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f103 0208 	add.w	r2, r3, #8
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001712:	d103      	bne.n	800171c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	e00c      	b.n	8001736 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3308      	adds	r3, #8
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	e002      	b.n	800172a <vListInsert+0x2e>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	429a      	cmp	r2, r3
 8001734:	d2f6      	bcs.n	8001724 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6892      	ldr	r2, [r2, #8]
 8001782:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6852      	ldr	r2, [r2, #4]
 800178c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	d103      	bne.n	80017a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	1e5a      	subs	r2, r3, #1
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
	...

080017c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10a      	bne.n	80017ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d8:	f383 8811 	msr	BASEPRI, r3
 80017dc:	f3bf 8f6f 	isb	sy
 80017e0:	f3bf 8f4f 	dsb	sy
 80017e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80017e6:	bf00      	nop
 80017e8:	e7fe      	b.n	80017e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80017ea:	f001 fe37 	bl	800345c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f6:	68f9      	ldr	r1, [r7, #12]
 80017f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	441a      	add	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181a:	3b01      	subs	r3, #1
 800181c:	68f9      	ldr	r1, [r7, #12]
 800181e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	441a      	add	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	22ff      	movs	r2, #255	; 0xff
 800182e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	22ff      	movs	r2, #255	; 0xff
 8001836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d114      	bne.n	800186a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d01a      	beq.n	800187e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3310      	adds	r3, #16
 800184c:	4618      	mov	r0, r3
 800184e:	f001 f913 	bl	8002a78 <xTaskRemoveFromEventList>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d012      	beq.n	800187e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <xQueueGenericReset+0xcc>)
 800185a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	f3bf 8f4f 	dsb	sy
 8001864:	f3bf 8f6f 	isb	sy
 8001868:	e009      	b.n	800187e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3310      	adds	r3, #16
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fef6 	bl	8001660 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3324      	adds	r3, #36	; 0x24
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fef1 	bl	8001660 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800187e:	f001 fe1d 	bl	80034bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	e000ed04 	.word	0xe000ed04

08001890 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08e      	sub	sp, #56	; 0x38
 8001894:	af02      	add	r7, sp, #8
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10a      	bne.n	80018ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80018a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a8:	f383 8811 	msr	BASEPRI, r3
 80018ac:	f3bf 8f6f 	isb	sy
 80018b0:	f3bf 8f4f 	dsb	sy
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80018b6:	bf00      	nop
 80018b8:	e7fe      	b.n	80018b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10a      	bne.n	80018d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80018c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c4:	f383 8811 	msr	BASEPRI, r3
 80018c8:	f3bf 8f6f 	isb	sy
 80018cc:	f3bf 8f4f 	dsb	sy
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80018d2:	bf00      	nop
 80018d4:	e7fe      	b.n	80018d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <xQueueGenericCreateStatic+0x52>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <xQueueGenericCreateStatic+0x56>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <xQueueGenericCreateStatic+0x58>
 80018e6:	2300      	movs	r3, #0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10a      	bne.n	8001902 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80018ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f0:	f383 8811 	msr	BASEPRI, r3
 80018f4:	f3bf 8f6f 	isb	sy
 80018f8:	f3bf 8f4f 	dsb	sy
 80018fc:	623b      	str	r3, [r7, #32]
}
 80018fe:	bf00      	nop
 8001900:	e7fe      	b.n	8001900 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <xQueueGenericCreateStatic+0x7e>
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <xQueueGenericCreateStatic+0x82>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <xQueueGenericCreateStatic+0x84>
 8001912:	2300      	movs	r3, #0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10a      	bne.n	800192e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800191c:	f383 8811 	msr	BASEPRI, r3
 8001920:	f3bf 8f6f 	isb	sy
 8001924:	f3bf 8f4f 	dsb	sy
 8001928:	61fb      	str	r3, [r7, #28]
}
 800192a:	bf00      	nop
 800192c:	e7fe      	b.n	800192c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800192e:	2348      	movs	r3, #72	; 0x48
 8001930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b48      	cmp	r3, #72	; 0x48
 8001936:	d00a      	beq.n	800194e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193c:	f383 8811 	msr	BASEPRI, r3
 8001940:	f3bf 8f6f 	isb	sy
 8001944:	f3bf 8f4f 	dsb	sy
 8001948:	61bb      	str	r3, [r7, #24]
}
 800194a:	bf00      	nop
 800194c:	e7fe      	b.n	800194c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00d      	beq.n	8001974 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001960:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f843 	bl	80019fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001976:	4618      	mov	r0, r3
 8001978:	3730      	adds	r7, #48	; 0x30
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800197e:	b580      	push	{r7, lr}
 8001980:	b08a      	sub	sp, #40	; 0x28
 8001982:	af02      	add	r7, sp, #8
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	4613      	mov	r3, r2
 800198a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10a      	bne.n	80019a8 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001996:	f383 8811 	msr	BASEPRI, r3
 800199a:	f3bf 8f6f 	isb	sy
 800199e:	f3bf 8f4f 	dsb	sy
 80019a2:	613b      	str	r3, [r7, #16]
}
 80019a4:	bf00      	nop
 80019a6:	e7fe      	b.n	80019a6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e004      	b.n	80019be <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	fb02 f303 	mul.w	r3, r2, r3
 80019bc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3348      	adds	r3, #72	; 0x48
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 fe4a 	bl	800365c <pvPortMalloc>
 80019c8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00f      	beq.n	80019f0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	3348      	adds	r3, #72	; 0x48
 80019d4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80019de:	79fa      	ldrb	r2, [r7, #7]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	4613      	mov	r3, r2
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f805 	bl	80019fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80019f0:	69bb      	ldr	r3, [r7, #24]
	}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e002      	b.n	8001a1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a28:	2101      	movs	r1, #1
 8001a2a:	69b8      	ldr	r0, [r7, #24]
 8001a2c:	f7ff fec8 	bl	80017c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10a      	bne.n	8001a60 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8001a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4e:	f383 8811 	msr	BASEPRI, r3
 8001a52:	f3bf 8f6f 	isb	sy
 8001a56:	f3bf 8f4f 	dsb	sy
 8001a5a:	61bb      	str	r3, [r7, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	e7fe      	b.n	8001a5e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d90a      	bls.n	8001a7e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8001a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6c:	f383 8811 	msr	BASEPRI, r3
 8001a70:	f3bf 8f6f 	isb	sy
 8001a74:	f3bf 8f4f 	dsb	sy
 8001a78:	617b      	str	r3, [r7, #20]
}
 8001a7a:	bf00      	nop
 8001a7c:	e7fe      	b.n	8001a7c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001a7e:	2302      	movs	r3, #2
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff ff01 	bl	8001890 <xQueueGenericCreateStatic>
 8001a8e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
	}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10a      	bne.n	8001acc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8001ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aba:	f383 8811 	msr	BASEPRI, r3
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	f3bf 8f4f 	dsb	sy
 8001ac6:	613b      	str	r3, [r7, #16]
}
 8001ac8:	bf00      	nop
 8001aca:	e7fe      	b.n	8001aca <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d90a      	bls.n	8001aea <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8001ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad8:	f383 8811 	msr	BASEPRI, r3
 8001adc:	f3bf 8f6f 	isb	sy
 8001ae0:	f3bf 8f4f 	dsb	sy
 8001ae4:	60fb      	str	r3, [r7, #12]
}
 8001ae6:	bf00      	nop
 8001ae8:	e7fe      	b.n	8001ae8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001aea:	2202      	movs	r2, #2
 8001aec:	2100      	movs	r1, #0
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff45 	bl	800197e <xQueueGenericCreate>
 8001af4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001b02:	697b      	ldr	r3, [r7, #20]
	}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08e      	sub	sp, #56	; 0x38
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10a      	bne.n	8001b3e <xQueueGenericSend+0x32>
	__asm volatile
 8001b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2c:	f383 8811 	msr	BASEPRI, r3
 8001b30:	f3bf 8f6f 	isb	sy
 8001b34:	f3bf 8f4f 	dsb	sy
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001b3a:	bf00      	nop
 8001b3c:	e7fe      	b.n	8001b3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d103      	bne.n	8001b4c <xQueueGenericSend+0x40>
 8001b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <xQueueGenericSend+0x44>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <xQueueGenericSend+0x46>
 8001b50:	2300      	movs	r3, #0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <xQueueGenericSend+0x60>
	__asm volatile
 8001b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001b68:	bf00      	nop
 8001b6a:	e7fe      	b.n	8001b6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d103      	bne.n	8001b7a <xQueueGenericSend+0x6e>
 8001b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <xQueueGenericSend+0x72>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <xQueueGenericSend+0x74>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10a      	bne.n	8001b9a <xQueueGenericSend+0x8e>
	__asm volatile
 8001b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b88:	f383 8811 	msr	BASEPRI, r3
 8001b8c:	f3bf 8f6f 	isb	sy
 8001b90:	f3bf 8f4f 	dsb	sy
 8001b94:	623b      	str	r3, [r7, #32]
}
 8001b96:	bf00      	nop
 8001b98:	e7fe      	b.n	8001b98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b9a:	f001 f92d 	bl	8002df8 <xTaskGetSchedulerState>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <xQueueGenericSend+0x9e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <xQueueGenericSend+0xa2>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <xQueueGenericSend+0xa4>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10a      	bne.n	8001bca <xQueueGenericSend+0xbe>
	__asm volatile
 8001bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb8:	f383 8811 	msr	BASEPRI, r3
 8001bbc:	f3bf 8f6f 	isb	sy
 8001bc0:	f3bf 8f4f 	dsb	sy
 8001bc4:	61fb      	str	r3, [r7, #28]
}
 8001bc6:	bf00      	nop
 8001bc8:	e7fe      	b.n	8001bc8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001bca:	f001 fc47 	bl	800345c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d302      	bcc.n	8001be0 <xQueueGenericSend+0xd4>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d129      	bne.n	8001c34 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001be6:	f000 fa32 	bl	800204e <prvCopyDataToQueue>
 8001bea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d010      	beq.n	8001c16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	3324      	adds	r3, #36	; 0x24
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 ff3d 	bl	8002a78 <xTaskRemoveFromEventList>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d013      	beq.n	8001c2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001c04:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <xQueueGenericSend+0x1f8>)
 8001c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	f3bf 8f4f 	dsb	sy
 8001c10:	f3bf 8f6f 	isb	sy
 8001c14:	e00a      	b.n	8001c2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001c1c:	4b39      	ldr	r3, [pc, #228]	; (8001d04 <xQueueGenericSend+0x1f8>)
 8001c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f3bf 8f4f 	dsb	sy
 8001c28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001c2c:	f001 fc46 	bl	80034bc <vPortExitCritical>
				return pdPASS;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e063      	b.n	8001cfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d103      	bne.n	8001c42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001c3a:	f001 fc3f 	bl	80034bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e05c      	b.n	8001cfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d106      	bne.n	8001c56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 ff75 	bl	8002b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c52:	2301      	movs	r3, #1
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c56:	f001 fc31 	bl	80034bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001c5a:	f000 fd27 	bl	80026ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c5e:	f001 fbfd 	bl	800345c <vPortEnterCritical>
 8001c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6e:	d103      	bne.n	8001c78 <xQueueGenericSend+0x16c>
 8001c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c7e:	b25b      	sxtb	r3, r3
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d103      	bne.n	8001c8e <xQueueGenericSend+0x182>
 8001c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c8e:	f001 fc15 	bl	80034bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c92:	1d3a      	adds	r2, r7, #4
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 ff64 	bl	8002b68 <xTaskCheckForTimeOut>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d124      	bne.n	8001cf0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ca8:	f000 fac9 	bl	800223e <prvIsQueueFull>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d018      	beq.n	8001ce4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb4:	3310      	adds	r3, #16
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 feb8 	bl	8002a30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cc2:	f000 fa54 	bl	800216e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001cc6:	f000 fcff 	bl	80026c8 <xTaskResumeAll>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f47f af7c 	bne.w	8001bca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <xQueueGenericSend+0x1f8>)
 8001cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f3bf 8f4f 	dsb	sy
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	e772      	b.n	8001bca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ce6:	f000 fa42 	bl	800216e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001cea:	f000 fced 	bl	80026c8 <xTaskResumeAll>
 8001cee:	e76c      	b.n	8001bca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cf2:	f000 fa3c 	bl	800216e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001cf6:	f000 fce7 	bl	80026c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001cfa:	2300      	movs	r3, #0
		}
	}
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3738      	adds	r7, #56	; 0x38
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	e000ed04 	.word	0xe000ed04

08001d08 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08e      	sub	sp, #56	; 0x38
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10a      	bne.n	8001d3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8001d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d28:	f383 8811 	msr	BASEPRI, r3
 8001d2c:	f3bf 8f6f 	isb	sy
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	623b      	str	r3, [r7, #32]
}
 8001d36:	bf00      	nop
 8001d38:	e7fe      	b.n	8001d38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8001d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d46:	f383 8811 	msr	BASEPRI, r3
 8001d4a:	f3bf 8f6f 	isb	sy
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	61fb      	str	r3, [r7, #28]
}
 8001d54:	bf00      	nop
 8001d56:	e7fe      	b.n	8001d56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d58:	f001 f84e 	bl	8002df8 <xTaskGetSchedulerState>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <xQueueSemaphoreTake+0x60>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <xQueueSemaphoreTake+0x64>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <xQueueSemaphoreTake+0x66>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10a      	bne.n	8001d88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8001d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d76:	f383 8811 	msr	BASEPRI, r3
 8001d7a:	f3bf 8f6f 	isb	sy
 8001d7e:	f3bf 8f4f 	dsb	sy
 8001d82:	61bb      	str	r3, [r7, #24]
}
 8001d84:	bf00      	nop
 8001d86:	e7fe      	b.n	8001d86 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001d88:	f001 fb68 	bl	800345c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d024      	beq.n	8001de2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9a:	1e5a      	subs	r2, r3, #1
 8001d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d104      	bne.n	8001db2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001da8:	f001 f9f0 	bl	800318c <pvTaskIncrementMutexHeldCount>
 8001dac:	4602      	mov	r2, r0
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00f      	beq.n	8001dda <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	3310      	adds	r3, #16
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fe5a 	bl	8002a78 <xTaskRemoveFromEventList>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001dca:	4b54      	ldr	r3, [pc, #336]	; (8001f1c <xQueueSemaphoreTake+0x214>)
 8001dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f3bf 8f4f 	dsb	sy
 8001dd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001dda:	f001 fb6f 	bl	80034bc <vPortExitCritical>
				return pdPASS;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e097      	b.n	8001f12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d111      	bne.n	8001e0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8001dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df2:	f383 8811 	msr	BASEPRI, r3
 8001df6:	f3bf 8f6f 	isb	sy
 8001dfa:	f3bf 8f4f 	dsb	sy
 8001dfe:	617b      	str	r3, [r7, #20]
}
 8001e00:	bf00      	nop
 8001e02:	e7fe      	b.n	8001e02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001e04:	f001 fb5a 	bl	80034bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e082      	b.n	8001f12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fe90 	bl	8002b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e20:	f001 fb4c 	bl	80034bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e24:	f000 fc42 	bl	80026ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e28:	f001 fb18 	bl	800345c <vPortEnterCritical>
 8001e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d103      	bne.n	8001e42 <xQueueSemaphoreTake+0x13a>
 8001e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4e:	d103      	bne.n	8001e58 <xQueueSemaphoreTake+0x150>
 8001e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e58:	f001 fb30 	bl	80034bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e5c:	463a      	mov	r2, r7
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fe7f 	bl	8002b68 <xTaskCheckForTimeOut>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d132      	bne.n	8001ed6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e72:	f000 f9ce 	bl	8002212 <prvIsQueueEmpty>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d026      	beq.n	8001eca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d109      	bne.n	8001e98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8001e84:	f001 faea 	bl	800345c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 ffd1 	bl	8002e34 <xTaskPriorityInherit>
 8001e92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001e94:	f001 fb12 	bl	80034bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9a:	3324      	adds	r3, #36	; 0x24
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fdc5 	bl	8002a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ea8:	f000 f961 	bl	800216e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001eac:	f000 fc0c 	bl	80026c8 <xTaskResumeAll>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f47f af68 	bne.w	8001d88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <xQueueSemaphoreTake+0x214>)
 8001eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	f3bf 8f6f 	isb	sy
 8001ec8:	e75e      	b.n	8001d88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001eca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ecc:	f000 f94f 	bl	800216e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ed0:	f000 fbfa 	bl	80026c8 <xTaskResumeAll>
 8001ed4:	e758      	b.n	8001d88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001ed6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ed8:	f000 f949 	bl	800216e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001edc:	f000 fbf4 	bl	80026c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ee2:	f000 f996 	bl	8002212 <prvIsQueueEmpty>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f43f af4d 	beq.w	8001d88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8001eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00d      	beq.n	8001f10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8001ef4:	f001 fab2 	bl	800345c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001ef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001efa:	f000 f891 	bl	8002020 <prvGetDisinheritPriorityAfterTimeout>
 8001efe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 f8a0 	bl	800304c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001f0c:	f001 fad6 	bl	80034bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001f10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3738      	adds	r7, #56	; 0x38
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000ed04 	.word	0xe000ed04

08001f20 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08e      	sub	sp, #56	; 0x38
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10a      	bne.n	8001f4c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8001f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3a:	f383 8811 	msr	BASEPRI, r3
 8001f3e:	f3bf 8f6f 	isb	sy
 8001f42:	f3bf 8f4f 	dsb	sy
 8001f46:	623b      	str	r3, [r7, #32]
}
 8001f48:	bf00      	nop
 8001f4a:	e7fe      	b.n	8001f4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <xQueueReceiveFromISR+0x3a>
 8001f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <xQueueReceiveFromISR+0x3e>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <xQueueReceiveFromISR+0x40>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10a      	bne.n	8001f7a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8001f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	61fb      	str	r3, [r7, #28]
}
 8001f76:	bf00      	nop
 8001f78:	e7fe      	b.n	8001f78 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f7a:	f001 fb31 	bl	80035e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001f7e:	f3ef 8211 	mrs	r2, BASEPRI
 8001f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	61ba      	str	r2, [r7, #24]
 8001f94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001f96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d02f      	beq.n	8002006 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fb4:	f000 f8b5 	bl	8002122 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	1e5a      	subs	r2, r3, #1
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8001fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d112      	bne.n	8001ff0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d016      	beq.n	8002000 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd4:	3310      	adds	r3, #16
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fd4e 	bl	8002a78 <xTaskRemoveFromEventList>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00e      	beq.n	8002000 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e007      	b.n	8002000 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	b25a      	sxtb	r2, r3
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002000:	2301      	movs	r3, #1
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
 8002004:	e001      	b.n	800200a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002006:	2300      	movs	r3, #0
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002014:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002018:	4618      	mov	r0, r3
 800201a:	3738      	adds	r7, #56	; 0x38
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e001      	b.n	8002042 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002042:	68fb      	ldr	r3, [r7, #12]
	}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10d      	bne.n	8002088 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d14d      	bne.n	8002110 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4618      	mov	r0, r3
 800207a:	f000 ff61 	bl	8002f40 <xTaskPriorityDisinherit>
 800207e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	e043      	b.n	8002110 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d119      	bne.n	80020c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6898      	ldr	r0, [r3, #8]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	461a      	mov	r2, r3
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	f001 fcdb 	bl	8003a54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	441a      	add	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d32b      	bcc.n	8002110 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e026      	b.n	8002110 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	68d8      	ldr	r0, [r3, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	461a      	mov	r2, r3
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	f001 fcc1 	bl	8003a54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	425b      	negs	r3, r3
 80020dc:	441a      	add	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d207      	bcs.n	80020fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	425b      	negs	r3, r3
 80020f8:	441a      	add	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d105      	bne.n	8002110 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	3b01      	subs	r3, #1
 800210e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002118:	697b      	ldr	r3, [r7, #20]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d018      	beq.n	8002166 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	441a      	add	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	d303      	bcc.n	8002156 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68d9      	ldr	r1, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	461a      	mov	r2, r3
 8002160:	6838      	ldr	r0, [r7, #0]
 8002162:	f001 fc77 	bl	8003a54 <memcpy>
	}
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002176:	f001 f971 	bl	800345c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002180:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002182:	e011      	b.n	80021a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2b00      	cmp	r3, #0
 800218a:	d012      	beq.n	80021b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3324      	adds	r3, #36	; 0x24
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fc71 	bl	8002a78 <xTaskRemoveFromEventList>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800219c:	f000 fd46 	bl	8002c2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	dce9      	bgt.n	8002184 <prvUnlockQueue+0x16>
 80021b0:	e000      	b.n	80021b4 <prvUnlockQueue+0x46>
					break;
 80021b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	22ff      	movs	r2, #255	; 0xff
 80021b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80021bc:	f001 f97e 	bl	80034bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80021c0:	f001 f94c 	bl	800345c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021cc:	e011      	b.n	80021f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d012      	beq.n	80021fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3310      	adds	r3, #16
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fc4c 	bl	8002a78 <xTaskRemoveFromEventList>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80021e6:	f000 fd21 	bl	8002c2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	dce9      	bgt.n	80021ce <prvUnlockQueue+0x60>
 80021fa:	e000      	b.n	80021fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80021fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	22ff      	movs	r2, #255	; 0xff
 8002202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002206:	f001 f959 	bl	80034bc <vPortExitCritical>
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800221a:	f001 f91f 	bl	800345c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002226:	2301      	movs	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e001      	b.n	8002230 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002230:	f001 f944 	bl	80034bc <vPortExitCritical>

	return xReturn;
 8002234:	68fb      	ldr	r3, [r7, #12]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002246:	f001 f909 	bl	800345c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	429a      	cmp	r2, r3
 8002254:	d102      	bne.n	800225c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002256:	2301      	movs	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e001      	b.n	8002260 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002260:	f001 f92c 	bl	80034bc <vPortExitCritical>

	return xReturn;
 8002264:	68fb      	ldr	r3, [r7, #12]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800226e:	b580      	push	{r7, lr}
 8002270:	b08e      	sub	sp, #56	; 0x38
 8002272:	af04      	add	r7, sp, #16
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800227c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10a      	bne.n	8002298 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	623b      	str	r3, [r7, #32]
}
 8002294:	bf00      	nop
 8002296:	e7fe      	b.n	8002296 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10a      	bne.n	80022b4 <xTaskCreateStatic+0x46>
	__asm volatile
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	61fb      	str	r3, [r7, #28]
}
 80022b0:	bf00      	nop
 80022b2:	e7fe      	b.n	80022b2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80022b4:	2354      	movs	r3, #84	; 0x54
 80022b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b54      	cmp	r3, #84	; 0x54
 80022bc:	d00a      	beq.n	80022d4 <xTaskCreateStatic+0x66>
	__asm volatile
 80022be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c2:	f383 8811 	msr	BASEPRI, r3
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	61bb      	str	r3, [r7, #24]
}
 80022d0:	bf00      	nop
 80022d2:	e7fe      	b.n	80022d2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80022d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01e      	beq.n	8002318 <xTaskCreateStatic+0xaa>
 80022da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80022f2:	2300      	movs	r3, #0
 80022f4:	9303      	str	r3, [sp, #12]
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	9302      	str	r3, [sp, #8]
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f850 	bl	80023b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002312:	f000 f8cd 	bl	80024b0 <prvAddNewTaskToReadyList>
 8002316:	e001      	b.n	800231c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800231c:	697b      	ldr	r3, [r7, #20]
	}
 800231e:	4618      	mov	r0, r3
 8002320:	3728      	adds	r7, #40	; 0x28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002326:	b580      	push	{r7, lr}
 8002328:	b08c      	sub	sp, #48	; 0x30
 800232a:	af04      	add	r7, sp, #16
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4618      	mov	r0, r3
 800233c:	f001 f98e 	bl	800365c <pvPortMalloc>
 8002340:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00e      	beq.n	8002366 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002348:	2054      	movs	r0, #84	; 0x54
 800234a:	f001 f987 	bl	800365c <pvPortMalloc>
 800234e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
 800235c:	e005      	b.n	800236a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800235e:	6978      	ldr	r0, [r7, #20]
 8002360:	f001 fa40 	bl	80037e4 <vPortFree>
 8002364:	e001      	b.n	800236a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d017      	beq.n	80023a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002378:	88fa      	ldrh	r2, [r7, #6]
 800237a:	2300      	movs	r3, #0
 800237c:	9303      	str	r3, [sp, #12]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	9302      	str	r3, [sp, #8]
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f80e 	bl	80023b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002394:	69f8      	ldr	r0, [r7, #28]
 8002396:	f000 f88b 	bl	80024b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800239a:	2301      	movs	r3, #1
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	e002      	b.n	80023a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
 80023a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80023a6:	69bb      	ldr	r3, [r7, #24]
	}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023c8:	3b01      	subs	r3, #1
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f023 0307 	bic.w	r3, r3, #7
 80023d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80023e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e6:	f383 8811 	msr	BASEPRI, r3
 80023ea:	f3bf 8f6f 	isb	sy
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	617b      	str	r3, [r7, #20]
}
 80023f4:	bf00      	nop
 80023f6:	e7fe      	b.n	80023f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	e012      	b.n	8002424 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	4413      	add	r3, r2
 8002404:	7819      	ldrb	r1, [r3, #0]
 8002406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	4413      	add	r3, r2
 800240c:	3334      	adds	r3, #52	; 0x34
 800240e:	460a      	mov	r2, r1
 8002410:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	4413      	add	r3, r2
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3301      	adds	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	d9e9      	bls.n	80023fe <prvInitialiseNewTask+0x4e>
 800242a:	e000      	b.n	800242e <prvInitialiseNewTask+0x7e>
		{
			break;
 800242c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	2b06      	cmp	r3, #6
 800243a:	d901      	bls.n	8002440 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800243c:	2306      	movs	r3, #6
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	2200      	movs	r2, #0
 8002450:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	3304      	adds	r3, #4
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff f921 	bl	800169e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245e:	3318      	adds	r3, #24
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff f91c 	bl	800169e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800246a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	f1c3 0207 	rsb	r2, r3, #7
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800247a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	2200      	movs	r2, #0
 8002480:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	68f9      	ldr	r1, [r7, #12]
 800248e:	69b8      	ldr	r0, [r7, #24]
 8002490:	f000 fef6 	bl	8003280 <pxPortInitialiseStack>
 8002494:	4602      	mov	r2, r0
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024a6:	bf00      	nop
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80024b8:	f000 ffd0 	bl	800345c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80024bc:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <prvAddNewTaskToReadyList+0xb8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3301      	adds	r3, #1
 80024c2:	4a29      	ldr	r2, [pc, #164]	; (8002568 <prvAddNewTaskToReadyList+0xb8>)
 80024c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <prvAddNewTaskToReadyList+0xbc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80024ce:	4a27      	ldr	r2, [pc, #156]	; (800256c <prvAddNewTaskToReadyList+0xbc>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <prvAddNewTaskToReadyList+0xb8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d110      	bne.n	80024fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80024dc:	f000 fbca 	bl	8002c74 <prvInitialiseTaskLists>
 80024e0:	e00d      	b.n	80024fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <prvAddNewTaskToReadyList+0xc0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <prvAddNewTaskToReadyList+0xbc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d802      	bhi.n	80024fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80024f8:	4a1c      	ldr	r2, [pc, #112]	; (800256c <prvAddNewTaskToReadyList+0xbc>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <prvAddNewTaskToReadyList+0xc4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3301      	adds	r3, #1
 8002504:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <prvAddNewTaskToReadyList+0xc4>)
 8002506:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	2201      	movs	r2, #1
 800250e:	409a      	lsls	r2, r3
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <prvAddNewTaskToReadyList+0xc8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4313      	orrs	r3, r2
 8002516:	4a18      	ldr	r2, [pc, #96]	; (8002578 <prvAddNewTaskToReadyList+0xc8>)
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4a15      	ldr	r2, [pc, #84]	; (800257c <prvAddNewTaskToReadyList+0xcc>)
 8002528:	441a      	add	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3304      	adds	r3, #4
 800252e:	4619      	mov	r1, r3
 8002530:	4610      	mov	r0, r2
 8002532:	f7ff f8c0 	bl	80016b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002536:	f000 ffc1 	bl	80034bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <prvAddNewTaskToReadyList+0xc0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00e      	beq.n	8002560 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <prvAddNewTaskToReadyList+0xbc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	429a      	cmp	r2, r3
 800254e:	d207      	bcs.n	8002560 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <prvAddNewTaskToReadyList+0xd0>)
 8002552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000380 	.word	0x20000380
 800256c:	20000280 	.word	0x20000280
 8002570:	2000038c 	.word	0x2000038c
 8002574:	2000039c 	.word	0x2000039c
 8002578:	20000388 	.word	0x20000388
 800257c:	20000284 	.word	0x20000284
 8002580:	e000ed04 	.word	0xe000ed04

08002584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d017      	beq.n	80025c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <vTaskDelay+0x60>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <vTaskDelay+0x30>
	__asm volatile
 800259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	60bb      	str	r3, [r7, #8]
}
 80025b0:	bf00      	nop
 80025b2:	e7fe      	b.n	80025b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80025b4:	f000 f87a 	bl	80026ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80025b8:	2100      	movs	r1, #0
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fdfa 	bl	80031b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80025c0:	f000 f882 	bl	80026c8 <xTaskResumeAll>
 80025c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d107      	bne.n	80025dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <vTaskDelay+0x64>)
 80025ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	200003a8 	.word	0x200003a8
 80025e8:	e000ed04 	.word	0xe000ed04

080025ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80025fa:	463a      	mov	r2, r7
 80025fc:	1d39      	adds	r1, r7, #4
 80025fe:	f107 0308 	add.w	r3, r7, #8
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd fda4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002608:	6839      	ldr	r1, [r7, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	9202      	str	r2, [sp, #8]
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2300      	movs	r3, #0
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2300      	movs	r3, #0
 8002618:	460a      	mov	r2, r1
 800261a:	491e      	ldr	r1, [pc, #120]	; (8002694 <vTaskStartScheduler+0xa8>)
 800261c:	481e      	ldr	r0, [pc, #120]	; (8002698 <vTaskStartScheduler+0xac>)
 800261e:	f7ff fe26 	bl	800226e <xTaskCreateStatic>
 8002622:	4603      	mov	r3, r0
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <vTaskStartScheduler+0xb0>)
 8002626:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002628:	4b1c      	ldr	r3, [pc, #112]	; (800269c <vTaskStartScheduler+0xb0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002630:	2301      	movs	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	e001      	b.n	800263a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d116      	bne.n	800266e <vTaskStartScheduler+0x82>
	__asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	613b      	str	r3, [r7, #16]
}
 8002652:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <vTaskStartScheduler+0xb4>)
 8002656:	f04f 32ff 	mov.w	r2, #4294967295
 800265a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <vTaskStartScheduler+0xb8>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <vTaskStartScheduler+0xbc>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002668:	f000 fe86 	bl	8003378 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800266c:	e00e      	b.n	800268c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d10a      	bne.n	800268c <vTaskStartScheduler+0xa0>
	__asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	60fb      	str	r3, [r7, #12]
}
 8002688:	bf00      	nop
 800268a:	e7fe      	b.n	800268a <vTaskStartScheduler+0x9e>
}
 800268c:	bf00      	nop
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	08003ad8 	.word	0x08003ad8
 8002698:	08002c45 	.word	0x08002c45
 800269c:	200003a4 	.word	0x200003a4
 80026a0:	200003a0 	.word	0x200003a0
 80026a4:	2000038c 	.word	0x2000038c
 80026a8:	20000384 	.word	0x20000384

080026ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <vTaskSuspendAll+0x18>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <vTaskSuspendAll+0x18>)
 80026b8:	6013      	str	r3, [r2, #0]
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	200003a8 	.word	0x200003a8

080026c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <xTaskResumeAll+0x114>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	603b      	str	r3, [r7, #0]
}
 80026f0:	bf00      	nop
 80026f2:	e7fe      	b.n	80026f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80026f4:	f000 feb2 	bl	800345c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80026f8:	4b38      	ldr	r3, [pc, #224]	; (80027dc <xTaskResumeAll+0x114>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	4a37      	ldr	r2, [pc, #220]	; (80027dc <xTaskResumeAll+0x114>)
 8002700:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002702:	4b36      	ldr	r3, [pc, #216]	; (80027dc <xTaskResumeAll+0x114>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d161      	bne.n	80027ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800270a:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <xTaskResumeAll+0x118>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d05d      	beq.n	80027ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002712:	e02e      	b.n	8002772 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002714:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <xTaskResumeAll+0x11c>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3318      	adds	r3, #24
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff f823 	bl	800176c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3304      	adds	r3, #4
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff f81e 	bl	800176c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	2201      	movs	r2, #1
 8002736:	409a      	lsls	r2, r3
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <xTaskResumeAll+0x120>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4313      	orrs	r3, r2
 800273e:	4a2a      	ldr	r2, [pc, #168]	; (80027e8 <xTaskResumeAll+0x120>)
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4a27      	ldr	r2, [pc, #156]	; (80027ec <xTaskResumeAll+0x124>)
 8002750:	441a      	add	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3304      	adds	r3, #4
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f7fe ffac 	bl	80016b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002762:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <xTaskResumeAll+0x128>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	429a      	cmp	r2, r3
 800276a:	d302      	bcc.n	8002772 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800276c:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <xTaskResumeAll+0x12c>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <xTaskResumeAll+0x11c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1cc      	bne.n	8002714 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002780:	f000 fb16 	bl	8002db0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002784:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <xTaskResumeAll+0x130>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d010      	beq.n	80027b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002790:	f000 f836 	bl	8002800 <xTaskIncrementTick>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800279a:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <xTaskResumeAll+0x12c>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f1      	bne.n	8002790 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <xTaskResumeAll+0x130>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <xTaskResumeAll+0x12c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80027ba:	2301      	movs	r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <xTaskResumeAll+0x134>)
 80027c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80027ce:	f000 fe75 	bl	80034bc <vPortExitCritical>

	return xAlreadyYielded;
 80027d2:	68bb      	ldr	r3, [r7, #8]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200003a8 	.word	0x200003a8
 80027e0:	20000380 	.word	0x20000380
 80027e4:	20000340 	.word	0x20000340
 80027e8:	20000388 	.word	0x20000388
 80027ec:	20000284 	.word	0x20000284
 80027f0:	20000280 	.word	0x20000280
 80027f4:	20000394 	.word	0x20000394
 80027f8:	20000390 	.word	0x20000390
 80027fc:	e000ed04 	.word	0xe000ed04

08002800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800280a:	4b51      	ldr	r3, [pc, #324]	; (8002950 <xTaskIncrementTick+0x150>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 808d 	bne.w	800292e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002814:	4b4f      	ldr	r3, [pc, #316]	; (8002954 <xTaskIncrementTick+0x154>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3301      	adds	r3, #1
 800281a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800281c:	4a4d      	ldr	r2, [pc, #308]	; (8002954 <xTaskIncrementTick+0x154>)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d120      	bne.n	800286a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002828:	4b4b      	ldr	r3, [pc, #300]	; (8002958 <xTaskIncrementTick+0x158>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <xTaskIncrementTick+0x48>
	__asm volatile
 8002832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002836:	f383 8811 	msr	BASEPRI, r3
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	603b      	str	r3, [r7, #0]
}
 8002844:	bf00      	nop
 8002846:	e7fe      	b.n	8002846 <xTaskIncrementTick+0x46>
 8002848:	4b43      	ldr	r3, [pc, #268]	; (8002958 <xTaskIncrementTick+0x158>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	4b43      	ldr	r3, [pc, #268]	; (800295c <xTaskIncrementTick+0x15c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a41      	ldr	r2, [pc, #260]	; (8002958 <xTaskIncrementTick+0x158>)
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	4a41      	ldr	r2, [pc, #260]	; (800295c <xTaskIncrementTick+0x15c>)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b40      	ldr	r3, [pc, #256]	; (8002960 <xTaskIncrementTick+0x160>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	4a3f      	ldr	r2, [pc, #252]	; (8002960 <xTaskIncrementTick+0x160>)
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	f000 faa3 	bl	8002db0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800286a:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <xTaskIncrementTick+0x164>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	429a      	cmp	r2, r3
 8002872:	d34d      	bcc.n	8002910 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002874:	4b38      	ldr	r3, [pc, #224]	; (8002958 <xTaskIncrementTick+0x158>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <xTaskIncrementTick+0x82>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <xTaskIncrementTick+0x84>
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002888:	4b36      	ldr	r3, [pc, #216]	; (8002964 <xTaskIncrementTick+0x164>)
 800288a:	f04f 32ff 	mov.w	r2, #4294967295
 800288e:	601a      	str	r2, [r3, #0]
					break;
 8002890:	e03e      	b.n	8002910 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002892:	4b31      	ldr	r3, [pc, #196]	; (8002958 <xTaskIncrementTick+0x158>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d203      	bcs.n	80028b2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80028aa:	4a2e      	ldr	r2, [pc, #184]	; (8002964 <xTaskIncrementTick+0x164>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6013      	str	r3, [r2, #0]
						break;
 80028b0:	e02e      	b.n	8002910 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3304      	adds	r3, #4
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe ff58 	bl	800176c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	3318      	adds	r3, #24
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe ff4f 	bl	800176c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	2201      	movs	r2, #1
 80028d4:	409a      	lsls	r2, r3
 80028d6:	4b24      	ldr	r3, [pc, #144]	; (8002968 <xTaskIncrementTick+0x168>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	4a22      	ldr	r2, [pc, #136]	; (8002968 <xTaskIncrementTick+0x168>)
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4a1f      	ldr	r2, [pc, #124]	; (800296c <xTaskIncrementTick+0x16c>)
 80028ee:	441a      	add	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3304      	adds	r3, #4
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f7fe fedd 	bl	80016b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <xTaskIncrementTick+0x170>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	429a      	cmp	r2, r3
 8002908:	d3b4      	bcc.n	8002874 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800290a:	2301      	movs	r3, #1
 800290c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800290e:	e7b1      	b.n	8002874 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <xTaskIncrementTick+0x170>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002916:	4915      	ldr	r1, [pc, #84]	; (800296c <xTaskIncrementTick+0x16c>)
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d907      	bls.n	8002938 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002928:	2301      	movs	r3, #1
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	e004      	b.n	8002938 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <xTaskIncrementTick+0x174>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3301      	adds	r3, #1
 8002934:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <xTaskIncrementTick+0x174>)
 8002936:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002938:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <xTaskIncrementTick+0x178>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002940:	2301      	movs	r3, #1
 8002942:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002944:	697b      	ldr	r3, [r7, #20]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200003a8 	.word	0x200003a8
 8002954:	20000384 	.word	0x20000384
 8002958:	20000338 	.word	0x20000338
 800295c:	2000033c 	.word	0x2000033c
 8002960:	20000398 	.word	0x20000398
 8002964:	200003a0 	.word	0x200003a0
 8002968:	20000388 	.word	0x20000388
 800296c:	20000284 	.word	0x20000284
 8002970:	20000280 	.word	0x20000280
 8002974:	20000390 	.word	0x20000390
 8002978:	20000394 	.word	0x20000394

0800297c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <vTaskSwitchContext+0xa0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800298a:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <vTaskSwitchContext+0xa4>)
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002990:	e03f      	b.n	8002a12 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002992:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <vTaskSwitchContext+0xa4>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <vTaskSwitchContext+0xa8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80029a6:	7afb      	ldrb	r3, [r7, #11]
 80029a8:	f1c3 031f 	rsb	r3, r3, #31
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	491e      	ldr	r1, [pc, #120]	; (8002a28 <vTaskSwitchContext+0xac>)
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	607b      	str	r3, [r7, #4]
}
 80029d4:	bf00      	nop
 80029d6:	e7fe      	b.n	80029d6 <vTaskSwitchContext+0x5a>
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <vTaskSwitchContext+0xac>)
 80029e4:	4413      	add	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	3308      	adds	r3, #8
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d104      	bne.n	8002a08 <vTaskSwitchContext+0x8c>
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <vTaskSwitchContext+0xb0>)
 8002a10:	6013      	str	r3, [r2, #0]
}
 8002a12:	bf00      	nop
 8002a14:	371c      	adds	r7, #28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	200003a8 	.word	0x200003a8
 8002a20:	20000394 	.word	0x20000394
 8002a24:	20000388 	.word	0x20000388
 8002a28:	20000284 	.word	0x20000284
 8002a2c:	20000280 	.word	0x20000280

08002a30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	60fb      	str	r3, [r7, #12]
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <vTaskPlaceOnEventList+0x44>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3318      	adds	r3, #24
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe fe4c 	bl	80016fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a64:	2101      	movs	r1, #1
 8002a66:	6838      	ldr	r0, [r7, #0]
 8002a68:	f000 fba4 	bl	80031b4 <prvAddCurrentTaskToDelayedList>
}
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000280 	.word	0x20000280

08002a78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10a      	bne.n	8002aa4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	60fb      	str	r3, [r7, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	e7fe      	b.n	8002aa2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	3318      	adds	r3, #24
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe fe5f 	bl	800176c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <xTaskRemoveFromEventList+0xac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11c      	bne.n	8002af0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fe56 	bl	800176c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <xTaskRemoveFromEventList+0xb0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <xTaskRemoveFromEventList+0xb0>)
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4a13      	ldr	r2, [pc, #76]	; (8002b2c <xTaskRemoveFromEventList+0xb4>)
 8002ae0:	441a      	add	r2, r3
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f7fe fde4 	bl	80016b6 <vListInsertEnd>
 8002aee:	e005      	b.n	8002afc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	3318      	adds	r3, #24
 8002af4:	4619      	mov	r1, r3
 8002af6:	480e      	ldr	r0, [pc, #56]	; (8002b30 <xTaskRemoveFromEventList+0xb8>)
 8002af8:	f7fe fddd 	bl	80016b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <xTaskRemoveFromEventList+0xbc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d905      	bls.n	8002b16 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <xTaskRemoveFromEventList+0xc0>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	e001      	b.n	8002b1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002b1a:	697b      	ldr	r3, [r7, #20]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	200003a8 	.word	0x200003a8
 8002b28:	20000388 	.word	0x20000388
 8002b2c:	20000284 	.word	0x20000284
 8002b30:	20000340 	.word	0x20000340
 8002b34:	20000280 	.word	0x20000280
 8002b38:	20000394 	.word	0x20000394

08002b3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <vTaskInternalSetTimeOutState+0x24>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <vTaskInternalSetTimeOutState+0x28>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	605a      	str	r2, [r3, #4]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000398 	.word	0x20000398
 8002b64:	20000384 	.word	0x20000384

08002b68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	613b      	str	r3, [r7, #16]
}
 8002b8a:	bf00      	nop
 8002b8c:	e7fe      	b.n	8002b8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	60fb      	str	r3, [r7, #12]
}
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002baa:	f000 fc57 	bl	800345c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002bae:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <xTaskCheckForTimeOut+0xbc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc6:	d102      	bne.n	8002bce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	e023      	b.n	8002c16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <xTaskCheckForTimeOut+0xc0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d007      	beq.n	8002bea <xTaskCheckForTimeOut+0x82>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d302      	bcc.n	8002bea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002be4:	2301      	movs	r3, #1
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	e015      	b.n	8002c16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d20b      	bcs.n	8002c0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	1ad2      	subs	r2, r2, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ff9b 	bl	8002b3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e004      	b.n	8002c16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002c12:	2301      	movs	r3, #1
 8002c14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002c16:	f000 fc51 	bl	80034bc <vPortExitCritical>

	return xReturn;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3720      	adds	r7, #32
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20000384 	.word	0x20000384
 8002c28:	20000398 	.word	0x20000398

08002c2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <vTaskMissedYield+0x14>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000394 	.word	0x20000394

08002c44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c4c:	f000 f852 	bl	8002cf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <prvIdleTask+0x28>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d9f9      	bls.n	8002c4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <prvIdleTask+0x2c>)
 8002c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c68:	e7f0      	b.n	8002c4c <prvIdleTask+0x8>
 8002c6a:	bf00      	nop
 8002c6c:	20000284 	.word	0x20000284
 8002c70:	e000ed04 	.word	0xe000ed04

08002c74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	e00c      	b.n	8002c9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <prvInitialiseTaskLists+0x60>)
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fce6 	bl	8001660 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3301      	adds	r3, #1
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b06      	cmp	r3, #6
 8002c9e:	d9ef      	bls.n	8002c80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ca0:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <prvInitialiseTaskLists+0x64>)
 8002ca2:	f7fe fcdd 	bl	8001660 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ca6:	480d      	ldr	r0, [pc, #52]	; (8002cdc <prvInitialiseTaskLists+0x68>)
 8002ca8:	f7fe fcda 	bl	8001660 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cac:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <prvInitialiseTaskLists+0x6c>)
 8002cae:	f7fe fcd7 	bl	8001660 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cb2:	480c      	ldr	r0, [pc, #48]	; (8002ce4 <prvInitialiseTaskLists+0x70>)
 8002cb4:	f7fe fcd4 	bl	8001660 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002cb8:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <prvInitialiseTaskLists+0x74>)
 8002cba:	f7fe fcd1 	bl	8001660 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <prvInitialiseTaskLists+0x78>)
 8002cc0:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <prvInitialiseTaskLists+0x64>)
 8002cc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <prvInitialiseTaskLists+0x7c>)
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <prvInitialiseTaskLists+0x68>)
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000284 	.word	0x20000284
 8002cd8:	20000310 	.word	0x20000310
 8002cdc:	20000324 	.word	0x20000324
 8002ce0:	20000340 	.word	0x20000340
 8002ce4:	20000354 	.word	0x20000354
 8002ce8:	2000036c 	.word	0x2000036c
 8002cec:	20000338 	.word	0x20000338
 8002cf0:	2000033c 	.word	0x2000033c

08002cf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cfa:	e019      	b.n	8002d30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002cfc:	f000 fbae 	bl	800345c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <prvCheckTasksWaitingTermination+0x50>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe fd2d 	bl	800176c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <prvCheckTasksWaitingTermination+0x54>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <prvCheckTasksWaitingTermination+0x54>)
 8002d1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <prvCheckTasksWaitingTermination+0x58>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <prvCheckTasksWaitingTermination+0x58>)
 8002d24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d26:	f000 fbc9 	bl	80034bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f810 	bl	8002d50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <prvCheckTasksWaitingTermination+0x58>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e1      	bne.n	8002cfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000354 	.word	0x20000354
 8002d48:	20000380 	.word	0x20000380
 8002d4c:	20000368 	.word	0x20000368

08002d50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d108      	bne.n	8002d74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fd3c 	bl	80037e4 <vPortFree>
				vPortFree( pxTCB );
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fd39 	bl	80037e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d72:	e018      	b.n	8002da6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d103      	bne.n	8002d86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fd30 	bl	80037e4 <vPortFree>
	}
 8002d84:	e00f      	b.n	8002da6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d00a      	beq.n	8002da6 <prvDeleteTCB+0x56>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	60fb      	str	r3, [r7, #12]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <prvDeleteTCB+0x54>
	}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <prvResetNextTaskUnblockTime+0x40>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <prvResetNextTaskUnblockTime+0x14>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <prvResetNextTaskUnblockTime+0x16>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <prvResetNextTaskUnblockTime+0x44>)
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002dd2:	e008      	b.n	8002de6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <prvResetNextTaskUnblockTime+0x40>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <prvResetNextTaskUnblockTime+0x44>)
 8002de4:	6013      	str	r3, [r2, #0]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	20000338 	.word	0x20000338
 8002df4:	200003a0 	.word	0x200003a0

08002df8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <xTaskGetSchedulerState+0x34>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d102      	bne.n	8002e0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e06:	2301      	movs	r3, #1
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	e008      	b.n	8002e1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <xTaskGetSchedulerState+0x38>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d102      	bne.n	8002e1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002e14:	2302      	movs	r3, #2
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	e001      	b.n	8002e1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002e1e:	687b      	ldr	r3, [r7, #4]
	}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	2000038c 	.word	0x2000038c
 8002e30:	200003a8 	.word	0x200003a8

08002e34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d06e      	beq.n	8002f28 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <xTaskPriorityInherit+0x100>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d25e      	bcs.n	8002f16 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	db06      	blt.n	8002e6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e60:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <xTaskPriorityInherit+0x100>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	f1c3 0207 	rsb	r2, r3, #7
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	6959      	ldr	r1, [r3, #20]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4a2e      	ldr	r2, [pc, #184]	; (8002f38 <xTaskPriorityInherit+0x104>)
 8002e80:	4413      	add	r3, r2
 8002e82:	4299      	cmp	r1, r3
 8002e84:	d101      	bne.n	8002e8a <xTaskPriorityInherit+0x56>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <xTaskPriorityInherit+0x58>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d03a      	beq.n	8002f06 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe fc69 	bl	800176c <uxListRemove>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d115      	bne.n	8002ecc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	4924      	ldr	r1, [pc, #144]	; (8002f38 <xTaskPriorityInherit+0x104>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <xTaskPriorityInherit+0x98>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	2201      	movs	r2, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <xTaskPriorityInherit+0x108>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <xTaskPriorityInherit+0x108>)
 8002eca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <xTaskPriorityInherit+0x100>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	2201      	movs	r2, #1
 8002edc:	409a      	lsls	r2, r3
 8002ede:	4b17      	ldr	r3, [pc, #92]	; (8002f3c <xTaskPriorityInherit+0x108>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <xTaskPriorityInherit+0x108>)
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <xTaskPriorityInherit+0x104>)
 8002ef6:	441a      	add	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	3304      	adds	r3, #4
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f7fe fbd9 	bl	80016b6 <vListInsertEnd>
 8002f04:	e004      	b.n	8002f10 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <xTaskPriorityInherit+0x100>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	e008      	b.n	8002f28 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <xTaskPriorityInherit+0x100>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d201      	bcs.n	8002f28 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002f24:	2301      	movs	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002f28:	68fb      	ldr	r3, [r7, #12]
	}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000280 	.word	0x20000280
 8002f38:	20000284 	.word	0x20000284
 8002f3c:	20000388 	.word	0x20000388

08002f40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d06e      	beq.n	8003034 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002f56:	4b3a      	ldr	r3, [pc, #232]	; (8003040 <xTaskPriorityDisinherit+0x100>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d00a      	beq.n	8002f76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	60fb      	str	r3, [r7, #12]
}
 8002f72:	bf00      	nop
 8002f74:	e7fe      	b.n	8002f74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	60bb      	str	r3, [r7, #8]
}
 8002f90:	bf00      	nop
 8002f92:	e7fe      	b.n	8002f92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d044      	beq.n	8003034 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d140      	bne.n	8003034 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fbd8 	bl	800176c <uxListRemove>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d115      	bne.n	8002fee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc6:	491f      	ldr	r1, [pc, #124]	; (8003044 <xTaskPriorityDisinherit+0x104>)
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <xTaskPriorityDisinherit+0xae>
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	2201      	movs	r2, #1
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	4b18      	ldr	r3, [pc, #96]	; (8003048 <xTaskPriorityDisinherit+0x108>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	4a17      	ldr	r2, [pc, #92]	; (8003048 <xTaskPriorityDisinherit+0x108>)
 8002fec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	f1c3 0207 	rsb	r2, r3, #7
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	2201      	movs	r2, #1
 8003008:	409a      	lsls	r2, r3
 800300a:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <xTaskPriorityDisinherit+0x108>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4313      	orrs	r3, r2
 8003010:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <xTaskPriorityDisinherit+0x108>)
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4a08      	ldr	r2, [pc, #32]	; (8003044 <xTaskPriorityDisinherit+0x104>)
 8003022:	441a      	add	r2, r3
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f7fe fb43 	bl	80016b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003030:	2301      	movs	r3, #1
 8003032:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003034:	697b      	ldr	r3, [r7, #20]
	}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000280 	.word	0x20000280
 8003044:	20000284 	.word	0x20000284
 8003048:	20000388 	.word	0x20000388

0800304c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800305a:	2301      	movs	r3, #1
 800305c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8088 	beq.w	8003176 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	60fb      	str	r3, [r7, #12]
}
 8003080:	bf00      	nop
 8003082:	e7fe      	b.n	8003082 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d902      	bls.n	8003094 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	e002      	b.n	800309a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d068      	beq.n	8003176 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d163      	bne.n	8003176 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d10a      	bne.n	80030ce <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	60bb      	str	r3, [r7, #8]
}
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	db04      	blt.n	80030ec <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f1c3 0207 	rsb	r2, r3, #7
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6959      	ldr	r1, [r3, #20]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4a22      	ldr	r2, [pc, #136]	; (8003184 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80030fc:	4413      	add	r3, r2
 80030fe:	4299      	cmp	r1, r3
 8003100:	d101      	bne.n	8003106 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d034      	beq.n	8003176 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	3304      	adds	r3, #4
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe fb2b 	bl	800176c <uxListRemove>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d115      	bne.n	8003148 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	4918      	ldr	r1, [pc, #96]	; (8003184 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	2201      	movs	r2, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43da      	mvns	r2, r3
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4013      	ands	r3, r2
 8003144:	4a10      	ldr	r2, [pc, #64]	; (8003188 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003146:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	2201      	movs	r2, #1
 800314e:	409a      	lsls	r2, r3
 8003150:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4313      	orrs	r3, r2
 8003156:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4a07      	ldr	r2, [pc, #28]	; (8003184 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003168:	441a      	add	r2, r3
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	3304      	adds	r3, #4
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f7fe faa0 	bl	80016b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003176:	bf00      	nop
 8003178:	3720      	adds	r7, #32
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000280 	.word	0x20000280
 8003184:	20000284 	.word	0x20000284
 8003188:	20000388 	.word	0x20000388

0800318c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003190:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d004      	beq.n	80031a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800319e:	3201      	adds	r2, #1
 80031a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80031a2:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80031a4:	681b      	ldr	r3, [r3, #0]
	}
 80031a6:	4618      	mov	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000280 	.word	0x20000280

080031b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80031be:	4b29      	ldr	r3, [pc, #164]	; (8003264 <prvAddCurrentTaskToDelayedList+0xb0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031c4:	4b28      	ldr	r3, [pc, #160]	; (8003268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3304      	adds	r3, #4
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe face 	bl	800176c <uxListRemove>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80031d6:	4b24      	ldr	r3, [pc, #144]	; (8003268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	2201      	movs	r2, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43da      	mvns	r2, r3
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <prvAddCurrentTaskToDelayedList+0xb8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4013      	ands	r3, r2
 80031ea:	4a20      	ldr	r2, [pc, #128]	; (800326c <prvAddCurrentTaskToDelayedList+0xb8>)
 80031ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d10a      	bne.n	800320c <prvAddCurrentTaskToDelayedList+0x58>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3304      	adds	r3, #4
 8003202:	4619      	mov	r1, r3
 8003204:	481a      	ldr	r0, [pc, #104]	; (8003270 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003206:	f7fe fa56 	bl	80016b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800320a:	e026      	b.n	800325a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003214:	4b14      	ldr	r3, [pc, #80]	; (8003268 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	429a      	cmp	r2, r3
 8003222:	d209      	bcs.n	8003238 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3304      	adds	r3, #4
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f7fe fa63 	bl	80016fc <vListInsert>
}
 8003236:	e010      	b.n	800325a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <prvAddCurrentTaskToDelayedList+0xc4>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3304      	adds	r3, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f7fe fa59 	bl	80016fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <prvAddCurrentTaskToDelayedList+0xc8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	429a      	cmp	r2, r3
 8003252:	d202      	bcs.n	800325a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003254:	4a09      	ldr	r2, [pc, #36]	; (800327c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	6013      	str	r3, [r2, #0]
}
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000384 	.word	0x20000384
 8003268:	20000280 	.word	0x20000280
 800326c:	20000388 	.word	0x20000388
 8003270:	2000036c 	.word	0x2000036c
 8003274:	2000033c 	.word	0x2000033c
 8003278:	20000338 	.word	0x20000338
 800327c:	200003a0 	.word	0x200003a0

08003280 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3b04      	subs	r3, #4
 8003290:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3b04      	subs	r3, #4
 800329e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f023 0201 	bic.w	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3b04      	subs	r3, #4
 80032ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80032b0:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <pxPortInitialiseStack+0x54>)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	3b14      	subs	r3, #20
 80032ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3b20      	subs	r3, #32
 80032c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80032c8:	68fb      	ldr	r3, [r7, #12]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	080032d9 	.word	0x080032d9

080032d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <prvTaskExitError+0x54>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d00a      	beq.n	8003302 <prvTaskExitError+0x2a>
	__asm volatile
 80032ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f0:	f383 8811 	msr	BASEPRI, r3
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	60fb      	str	r3, [r7, #12]
}
 80032fe:	bf00      	nop
 8003300:	e7fe      	b.n	8003300 <prvTaskExitError+0x28>
	__asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	60bb      	str	r3, [r7, #8]
}
 8003314:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003316:	bf00      	nop
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0fc      	beq.n	8003318 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	2000000c 	.word	0x2000000c

08003330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <pxCurrentTCBConst2>)
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	6808      	ldr	r0, [r1, #0]
 8003336:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800333a:	f380 8809 	msr	PSP, r0
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f04f 0000 	mov.w	r0, #0
 8003346:	f380 8811 	msr	BASEPRI, r0
 800334a:	f04e 0e0d 	orr.w	lr, lr, #13
 800334e:	4770      	bx	lr

08003350 <pxCurrentTCBConst2>:
 8003350:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop

08003358 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003358:	4806      	ldr	r0, [pc, #24]	; (8003374 <prvPortStartFirstTask+0x1c>)
 800335a:	6800      	ldr	r0, [r0, #0]
 800335c:	6800      	ldr	r0, [r0, #0]
 800335e:	f380 8808 	msr	MSP, r0
 8003362:	b662      	cpsie	i
 8003364:	b661      	cpsie	f
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	df00      	svc	0
 8003370:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003372:	bf00      	nop
 8003374:	e000ed08 	.word	0xe000ed08

08003378 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800337e:	4b32      	ldr	r3, [pc, #200]	; (8003448 <xPortStartScheduler+0xd0>)
 8003380:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	22ff      	movs	r2, #255	; 0xff
 800338e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	4b2a      	ldr	r3, [pc, #168]	; (800344c <xPortStartScheduler+0xd4>)
 80033a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80033a6:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <xPortStartScheduler+0xd8>)
 80033a8:	2207      	movs	r2, #7
 80033aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033ac:	e009      	b.n	80033c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80033ae:	4b28      	ldr	r3, [pc, #160]	; (8003450 <xPortStartScheduler+0xd8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	4a26      	ldr	r2, [pc, #152]	; (8003450 <xPortStartScheduler+0xd8>)
 80033b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b80      	cmp	r3, #128	; 0x80
 80033cc:	d0ef      	beq.n	80033ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80033ce:	4b20      	ldr	r3, [pc, #128]	; (8003450 <xPortStartScheduler+0xd8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f1c3 0307 	rsb	r3, r3, #7
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d00a      	beq.n	80033f0 <xPortStartScheduler+0x78>
	__asm volatile
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	60bb      	str	r3, [r7, #8]
}
 80033ec:	bf00      	nop
 80033ee:	e7fe      	b.n	80033ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033f0:	4b17      	ldr	r3, [pc, #92]	; (8003450 <xPortStartScheduler+0xd8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	4a16      	ldr	r2, [pc, #88]	; (8003450 <xPortStartScheduler+0xd8>)
 80033f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <xPortStartScheduler+0xd8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003402:	4a13      	ldr	r2, [pc, #76]	; (8003450 <xPortStartScheduler+0xd8>)
 8003404:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <xPortStartScheduler+0xdc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a10      	ldr	r2, [pc, #64]	; (8003454 <xPortStartScheduler+0xdc>)
 8003414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003418:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <xPortStartScheduler+0xdc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a0d      	ldr	r2, [pc, #52]	; (8003454 <xPortStartScheduler+0xdc>)
 8003420:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003424:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003426:	f000 f8b9 	bl	800359c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <xPortStartScheduler+0xe0>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003430:	f7ff ff92 	bl	8003358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003434:	f7ff faa2 	bl	800297c <vTaskSwitchContext>
	prvTaskExitError();
 8003438:	f7ff ff4e 	bl	80032d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	e000e400 	.word	0xe000e400
 800344c:	200003ac 	.word	0x200003ac
 8003450:	200003b0 	.word	0x200003b0
 8003454:	e000ed20 	.word	0xe000ed20
 8003458:	2000000c 	.word	0x2000000c

0800345c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
	__asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	607b      	str	r3, [r7, #4]
}
 8003474:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003476:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <vPortEnterCritical+0x58>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <vPortEnterCritical+0x58>)
 800347e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <vPortEnterCritical+0x58>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d10f      	bne.n	80034a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <vPortEnterCritical+0x5c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	603b      	str	r3, [r7, #0]
}
 80034a4:	bf00      	nop
 80034a6:	e7fe      	b.n	80034a6 <vPortEnterCritical+0x4a>
	}
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	2000000c 	.word	0x2000000c
 80034b8:	e000ed04 	.word	0xe000ed04

080034bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <vPortExitCritical+0x4c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <vPortExitCritical+0x24>
	__asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	607b      	str	r3, [r7, #4]
}
 80034dc:	bf00      	nop
 80034de:	e7fe      	b.n	80034de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <vPortExitCritical+0x4c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	4a08      	ldr	r2, [pc, #32]	; (8003508 <vPortExitCritical+0x4c>)
 80034e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80034ea:	4b07      	ldr	r3, [pc, #28]	; (8003508 <vPortExitCritical+0x4c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d105      	bne.n	80034fe <vPortExitCritical+0x42>
 80034f2:	2300      	movs	r3, #0
 80034f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	f383 8811 	msr	BASEPRI, r3
}
 80034fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	2000000c 	.word	0x2000000c
 800350c:	00000000 	.word	0x00000000

08003510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003510:	f3ef 8009 	mrs	r0, PSP
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <pxCurrentTCBConst>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003520:	6010      	str	r0, [r2, #0]
 8003522:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003526:	f04f 0050 	mov.w	r0, #80	; 0x50
 800352a:	f380 8811 	msr	BASEPRI, r0
 800352e:	f7ff fa25 	bl	800297c <vTaskSwitchContext>
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	f380 8811 	msr	BASEPRI, r0
 800353a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800353e:	6819      	ldr	r1, [r3, #0]
 8003540:	6808      	ldr	r0, [r1, #0]
 8003542:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003546:	f380 8809 	msr	PSP, r0
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	4770      	bx	lr

08003550 <pxCurrentTCBConst>:
 8003550:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop

08003558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
	__asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	607b      	str	r3, [r7, #4]
}
 8003570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003572:	f7ff f945 	bl	8002800 <xTaskIncrementTick>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <SysTick_Handler+0x40>)
 800357e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	2300      	movs	r3, #0
 8003586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	f383 8811 	msr	BASEPRI, r3
}
 800358e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	e000ed04 	.word	0xe000ed04

0800359c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <vPortSetupTimerInterrupt+0x30>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <vPortSetupTimerInterrupt+0x34>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <vPortSetupTimerInterrupt+0x38>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <vPortSetupTimerInterrupt+0x3c>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	4a08      	ldr	r2, [pc, #32]	; (80035dc <vPortSetupTimerInterrupt+0x40>)
 80035ba:	3b01      	subs	r3, #1
 80035bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80035be:	4b03      	ldr	r3, [pc, #12]	; (80035cc <vPortSetupTimerInterrupt+0x30>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr
 80035cc:	e000e010 	.word	0xe000e010
 80035d0:	e000e018 	.word	0xe000e018
 80035d4:	20000000 	.word	0x20000000
 80035d8:	10624dd3 	.word	0x10624dd3
 80035dc:	e000e014 	.word	0xe000e014

080035e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80035e6:	f3ef 8305 	mrs	r3, IPSR
 80035ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b0f      	cmp	r3, #15
 80035f0:	d914      	bls.n	800361c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80035f2:	4a16      	ldr	r2, [pc, #88]	; (800364c <vPortValidateInterruptPriority+0x6c>)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80035fc:	4b14      	ldr	r3, [pc, #80]	; (8003650 <vPortValidateInterruptPriority+0x70>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	7afa      	ldrb	r2, [r7, #11]
 8003602:	429a      	cmp	r2, r3
 8003604:	d20a      	bcs.n	800361c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	607b      	str	r3, [r7, #4]
}
 8003618:	bf00      	nop
 800361a:	e7fe      	b.n	800361a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800361c:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <vPortValidateInterruptPriority+0x74>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <vPortValidateInterruptPriority+0x78>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d90a      	bls.n	8003642 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	603b      	str	r3, [r7, #0]
}
 800363e:	bf00      	nop
 8003640:	e7fe      	b.n	8003640 <vPortValidateInterruptPriority+0x60>
	}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	e000e3f0 	.word	0xe000e3f0
 8003650:	200003ac 	.word	0x200003ac
 8003654:	e000ed0c 	.word	0xe000ed0c
 8003658:	200003b0 	.word	0x200003b0

0800365c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003664:	2300      	movs	r3, #0
 8003666:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003668:	f7ff f820 	bl	80026ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800366c:	4b58      	ldr	r3, [pc, #352]	; (80037d0 <pvPortMalloc+0x174>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003674:	f000 f910 	bl	8003898 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003678:	4b56      	ldr	r3, [pc, #344]	; (80037d4 <pvPortMalloc+0x178>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	f040 808e 	bne.w	80037a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01d      	beq.n	80036c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800368c:	2208      	movs	r2, #8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	2b00      	cmp	r3, #0
 800369c:	d014      	beq.n	80036c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f023 0307 	bic.w	r3, r3, #7
 80036a4:	3308      	adds	r3, #8
 80036a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <pvPortMalloc+0x6c>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	617b      	str	r3, [r7, #20]
}
 80036c4:	bf00      	nop
 80036c6:	e7fe      	b.n	80036c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d069      	beq.n	80037a2 <pvPortMalloc+0x146>
 80036ce:	4b42      	ldr	r3, [pc, #264]	; (80037d8 <pvPortMalloc+0x17c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d864      	bhi.n	80037a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80036d8:	4b40      	ldr	r3, [pc, #256]	; (80037dc <pvPortMalloc+0x180>)
 80036da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80036dc:	4b3f      	ldr	r3, [pc, #252]	; (80037dc <pvPortMalloc+0x180>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036e2:	e004      	b.n	80036ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d903      	bls.n	8003700 <pvPortMalloc+0xa4>
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f1      	bne.n	80036e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003700:	4b33      	ldr	r3, [pc, #204]	; (80037d0 <pvPortMalloc+0x174>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003706:	429a      	cmp	r2, r3
 8003708:	d04b      	beq.n	80037a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2208      	movs	r2, #8
 8003710:	4413      	add	r3, r2
 8003712:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	1ad2      	subs	r2, r2, r3
 8003724:	2308      	movs	r3, #8
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	429a      	cmp	r2, r3
 800372a:	d91f      	bls.n	800376c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <pvPortMalloc+0xf8>
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	613b      	str	r3, [r7, #16]
}
 8003750:	bf00      	nop
 8003752:	e7fe      	b.n	8003752 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	1ad2      	subs	r2, r2, r3
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003766:	69b8      	ldr	r0, [r7, #24]
 8003768:	f000 f8f8 	bl	800395c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <pvPortMalloc+0x17c>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <pvPortMalloc+0x17c>)
 8003778:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800377a:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <pvPortMalloc+0x17c>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <pvPortMalloc+0x184>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d203      	bcs.n	800378e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003786:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <pvPortMalloc+0x17c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <pvPortMalloc+0x184>)
 800378c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <pvPortMalloc+0x178>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	431a      	orrs	r2, r3
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80037a2:	f7fe ff91 	bl	80026c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <pvPortMalloc+0x16a>
	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	60fb      	str	r3, [r7, #12]
}
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <pvPortMalloc+0x168>
	return pvReturn;
 80037c6:	69fb      	ldr	r3, [r7, #28]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3728      	adds	r7, #40	; 0x28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000fbc 	.word	0x20000fbc
 80037d4:	20000fc8 	.word	0x20000fc8
 80037d8:	20000fc0 	.word	0x20000fc0
 80037dc:	20000fb4 	.word	0x20000fb4
 80037e0:	20000fc4 	.word	0x20000fc4

080037e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d048      	beq.n	8003888 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80037f6:	2308      	movs	r3, #8
 80037f8:	425b      	negs	r3, r3
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4413      	add	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	4b21      	ldr	r3, [pc, #132]	; (8003890 <vPortFree+0xac>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10a      	bne.n	8003828 <vPortFree+0x44>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	60fb      	str	r3, [r7, #12]
}
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <vPortFree+0x62>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60bb      	str	r3, [r7, #8]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <vPortFree+0xac>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d019      	beq.n	8003888 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d115      	bne.n	8003888 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <vPortFree+0xac>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	43db      	mvns	r3, r3
 8003866:	401a      	ands	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800386c:	f7fe ff1e 	bl	80026ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	4b07      	ldr	r3, [pc, #28]	; (8003894 <vPortFree+0xb0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4413      	add	r3, r2
 800387a:	4a06      	ldr	r2, [pc, #24]	; (8003894 <vPortFree+0xb0>)
 800387c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800387e:	6938      	ldr	r0, [r7, #16]
 8003880:	f000 f86c 	bl	800395c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003884:	f7fe ff20 	bl	80026c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003888:	bf00      	nop
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000fc8 	.word	0x20000fc8
 8003894:	20000fc0 	.word	0x20000fc0

08003898 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800389e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80038a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80038a4:	4b27      	ldr	r3, [pc, #156]	; (8003944 <prvHeapInit+0xac>)
 80038a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3307      	adds	r3, #7
 80038b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0307 	bic.w	r3, r3, #7
 80038be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <prvHeapInit+0xac>)
 80038c8:	4413      	add	r3, r2
 80038ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <prvHeapInit+0xb0>)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80038d6:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <prvHeapInit+0xb0>)
 80038d8:	2200      	movs	r2, #0
 80038da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4413      	add	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80038e4:	2208      	movs	r2, #8
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0307 	bic.w	r3, r3, #7
 80038f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <prvHeapInit+0xb4>)
 80038f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80038fa:	4b14      	ldr	r3, [pc, #80]	; (800394c <prvHeapInit+0xb4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2200      	movs	r2, #0
 8003900:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <prvHeapInit+0xb4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	1ad2      	subs	r2, r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <prvHeapInit+0xb4>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <prvHeapInit+0xb8>)
 8003926:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a09      	ldr	r2, [pc, #36]	; (8003954 <prvHeapInit+0xbc>)
 800392e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <prvHeapInit+0xc0>)
 8003932:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003936:	601a      	str	r2, [r3, #0]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	200003b4 	.word	0x200003b4
 8003948:	20000fb4 	.word	0x20000fb4
 800394c:	20000fbc 	.word	0x20000fbc
 8003950:	20000fc4 	.word	0x20000fc4
 8003954:	20000fc0 	.word	0x20000fc0
 8003958:	20000fc8 	.word	0x20000fc8

0800395c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003964:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <prvInsertBlockIntoFreeList+0xa8>)
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e002      	b.n	8003970 <prvInsertBlockIntoFreeList+0x14>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	d8f7      	bhi.n	800396a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	4413      	add	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	429a      	cmp	r2, r3
 800398a:	d108      	bne.n	800399e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	441a      	add	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	441a      	add	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d118      	bne.n	80039e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <prvInsertBlockIntoFreeList+0xac>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d00d      	beq.n	80039da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	441a      	add	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e008      	b.n	80039ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <prvInsertBlockIntoFreeList+0xac>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e003      	b.n	80039ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d002      	beq.n	80039fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	20000fb4 	.word	0x20000fb4
 8003a08:	20000fbc 	.word	0x20000fbc

08003a0c <__libc_init_array>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	2600      	movs	r6, #0
 8003a10:	4d0c      	ldr	r5, [pc, #48]	; (8003a44 <__libc_init_array+0x38>)
 8003a12:	4c0d      	ldr	r4, [pc, #52]	; (8003a48 <__libc_init_array+0x3c>)
 8003a14:	1b64      	subs	r4, r4, r5
 8003a16:	10a4      	asrs	r4, r4, #2
 8003a18:	42a6      	cmp	r6, r4
 8003a1a:	d109      	bne.n	8003a30 <__libc_init_array+0x24>
 8003a1c:	f000 f830 	bl	8003a80 <_init>
 8003a20:	2600      	movs	r6, #0
 8003a22:	4d0a      	ldr	r5, [pc, #40]	; (8003a4c <__libc_init_array+0x40>)
 8003a24:	4c0a      	ldr	r4, [pc, #40]	; (8003a50 <__libc_init_array+0x44>)
 8003a26:	1b64      	subs	r4, r4, r5
 8003a28:	10a4      	asrs	r4, r4, #2
 8003a2a:	42a6      	cmp	r6, r4
 8003a2c:	d105      	bne.n	8003a3a <__libc_init_array+0x2e>
 8003a2e:	bd70      	pop	{r4, r5, r6, pc}
 8003a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a34:	4798      	blx	r3
 8003a36:	3601      	adds	r6, #1
 8003a38:	e7ee      	b.n	8003a18 <__libc_init_array+0xc>
 8003a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3e:	4798      	blx	r3
 8003a40:	3601      	adds	r6, #1
 8003a42:	e7f2      	b.n	8003a2a <__libc_init_array+0x1e>
 8003a44:	08003af8 	.word	0x08003af8
 8003a48:	08003af8 	.word	0x08003af8
 8003a4c:	08003af8 	.word	0x08003af8
 8003a50:	08003afc 	.word	0x08003afc

08003a54 <memcpy>:
 8003a54:	440a      	add	r2, r1
 8003a56:	4291      	cmp	r1, r2
 8003a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a5c:	d100      	bne.n	8003a60 <memcpy+0xc>
 8003a5e:	4770      	bx	lr
 8003a60:	b510      	push	{r4, lr}
 8003a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a66:	4291      	cmp	r1, r2
 8003a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a6c:	d1f9      	bne.n	8003a62 <memcpy+0xe>
 8003a6e:	bd10      	pop	{r4, pc}

08003a70 <memset>:
 8003a70:	4603      	mov	r3, r0
 8003a72:	4402      	add	r2, r0
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d100      	bne.n	8003a7a <memset+0xa>
 8003a78:	4770      	bx	lr
 8003a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7e:	e7f9      	b.n	8003a74 <memset+0x4>

08003a80 <_init>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	bf00      	nop
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr

08003a8c <_fini>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	bf00      	nop
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr

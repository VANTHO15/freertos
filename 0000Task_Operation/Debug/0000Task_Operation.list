
0000Task_Operation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000427c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b8  080044b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080044b8  080044b8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044b8  080044b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080044c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001070  20000074  08004534  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010e4  08004534  000210e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e16  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d8f  00000000  00000000  00032eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00035c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00036d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a230  00000000  00000000  00037cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011195  00000000  00000000  00051f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093d9e  00000000  00000000  00063095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6e33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d10  00000000  00000000  000f6e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004374 	.word	0x08004374

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004374 	.word	0x08004374

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	200000e4 	.word	0x200000e4

08000180 <__io_putchar>:
* @brief Retargets the C library printf function to the USART.
* @param None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8000188:	1d39      	adds	r1, r7, #4
 800018a:	2364      	movs	r3, #100	; 0x64
 800018c:	2201      	movs	r2, #1
 800018e:	4804      	ldr	r0, [pc, #16]	; (80001a0 <__io_putchar+0x20>)
 8000190:	f001 fcf5 	bl	8001b7e <HAL_UART_Transmit>
	return ch;
 8000194:	687b      	ldr	r3, [r7, #4]
}
 8000196:	4618      	mov	r0, r3
 8000198:	3708      	adds	r7, #8
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	20001044 	.word	0x20001044

080001a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a4:	b5b0      	push	{r4, r5, r7, lr}
 80001a6:	b08e      	sub	sp, #56	; 0x38
 80001a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001aa:	f000 fb3f 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ae:	f000 f833 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b2:	f000 f8a1 	bl	80002f8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001b6:	f000 f875 	bl	80002a4 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001ba:	4b13      	ldr	r3, [pc, #76]	; (8000208 <main+0x64>)
 80001bc:	f107 041c 	add.w	r4, r7, #28
 80001c0:	461d      	mov	r5, r3
 80001c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001ce:	f107 031c 	add.w	r3, r7, #28
 80001d2:	2100      	movs	r1, #0
 80001d4:	4618      	mov	r0, r3
 80001d6:	f001 fe5b 	bl	8001e90 <osThreadCreate>
 80001da:	4603      	mov	r3, r0
 80001dc:	4a0b      	ldr	r2, [pc, #44]	; (800020c <main+0x68>)
 80001de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
    osThreadDef(Task1, TaskvanTho, osPriorityNormal, 1, 128);
 80001e0:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <main+0x6c>)
 80001e2:	463c      	mov	r4, r7
 80001e4:	461d      	mov	r5, r3
 80001e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    VanThoTaskHandle = osThreadCreate(osThread(Task1), NULL);
 80001f2:	463b      	mov	r3, r7
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 fe4a 	bl	8001e90 <osThreadCreate>
 80001fc:	4603      	mov	r3, r0
 80001fe:	4a05      	ldr	r2, [pc, #20]	; (8000214 <main+0x70>)
 8000200:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000202:	f001 fe3e 	bl	8001e82 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000206:	e7fe      	b.n	8000206 <main+0x62>
 8000208:	080043a0 	.word	0x080043a0
 800020c:	2000103c 	.word	0x2000103c
 8000210:	080043bc 	.word	0x080043bc
 8000214:	20001040 	.word	0x20001040

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	; 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 f93c 	bl	80034a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023a:	2301      	movs	r3, #1
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024c:	2302      	movs	r3, #2
 800024e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000256:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800025a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fdab 	bl	8000dbc <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800026c:	f000 f910 	bl	8000490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2302      	movs	r3, #2
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 f816 	bl	80012bc <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000296:	f000 f8fb 	bl	8000490 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002aa:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <MX_USART1_UART_Init+0x50>)
 80002ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ae:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002ca:	220c      	movs	r2, #12
 80002cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002da:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002dc:	f001 fc02 	bl	8001ae4 <HAL_UART_Init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002e6:	f000 f8d3 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20001044 	.word	0x20001044
 80002f4:	40013800 	.word	0x40013800

080002f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b088      	sub	sp, #32
 80002fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fe:	f107 0310 	add.w	r3, r7, #16
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800030c:	4b27      	ldr	r3, [pc, #156]	; (80003ac <MX_GPIO_Init+0xb4>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a26      	ldr	r2, [pc, #152]	; (80003ac <MX_GPIO_Init+0xb4>)
 8000312:	f043 0320 	orr.w	r3, r3, #32
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b24      	ldr	r3, [pc, #144]	; (80003ac <MX_GPIO_Init+0xb4>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0320 	and.w	r3, r3, #32
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <MX_GPIO_Init+0xb4>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a20      	ldr	r2, [pc, #128]	; (80003ac <MX_GPIO_Init+0xb4>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <MX_GPIO_Init+0xb4>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0304 	and.w	r3, r3, #4
 8000338:	60bb      	str	r3, [r7, #8]
 800033a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <MX_GPIO_Init+0xb4>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a1a      	ldr	r2, [pc, #104]	; (80003ac <MX_GPIO_Init+0xb4>)
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b18      	ldr	r3, [pc, #96]	; (80003ac <MX_GPIO_Init+0xb4>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0308 	and.w	r3, r3, #8
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2108      	movs	r1, #8
 8000358:	4815      	ldr	r0, [pc, #84]	; (80003b0 <MX_GPIO_Init+0xb8>)
 800035a:	f000 fcfd 	bl	8000d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000364:	4813      	ldr	r0, [pc, #76]	; (80003b4 <MX_GPIO_Init+0xbc>)
 8000366:	f000 fcf7 	bl	8000d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800036a:	2308      	movs	r3, #8
 800036c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036e:	2301      	movs	r3, #1
 8000370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000376:	2302      	movs	r3, #2
 8000378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	4619      	mov	r1, r3
 8000380:	480b      	ldr	r0, [pc, #44]	; (80003b0 <MX_GPIO_Init+0xb8>)
 8000382:	f000 fb65 	bl	8000a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8000386:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800038a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038c:	2301      	movs	r3, #1
 800038e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000394:	2302      	movs	r3, #2
 8000396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	4619      	mov	r1, r3
 800039e:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_GPIO_Init+0xbc>)
 80003a0:	f000 fb56 	bl	8000a50 <HAL_GPIO_Init>

}
 80003a4:	bf00      	nop
 80003a6:	3720      	adds	r7, #32
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40010800 	.word	0x40010800
 80003b4:	40010c00 	.word	0x40010c00

080003b8 <TaskvanTho>:

/* USER CODE BEGIN 4 */
void TaskvanTho(void const * argument)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint32_t j=0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80003c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c8:	480d      	ldr	r0, [pc, #52]	; (8000400 <TaskvanTho+0x48>)
 80003ca:	f000 fcdd 	bl	8000d88 <HAL_GPIO_TogglePin>
	j++;
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	3301      	adds	r3, #1
 80003d2:	60fb      	str	r3, [r7, #12]
    osDelay(1000);
 80003d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d8:	f001 fda6 	bl	8001f28 <osDelay>
    if(j ==5)
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	2b05      	cmp	r3, #5
 80003e0:	d104      	bne.n	80003ec <TaskvanTho+0x34>
    {
    	vTaskSuspend(VanThoTaskHandle);
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <TaskvanTho+0x4c>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 f8b0 	bl	800254c <vTaskSuspend>
    }
    if(j == 8)
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	2b08      	cmp	r3, #8
 80003f0:	d1e8      	bne.n	80003c4 <TaskvanTho+0xc>
    {
    	vTaskDelete(defaultTaskHandle);
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <TaskvanTho+0x50>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 ffe4 	bl	80023c4 <vTaskDelete>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80003fc:	e7e2      	b.n	80003c4 <TaskvanTho+0xc>
 80003fe:	bf00      	nop
 8000400:	40010c00 	.word	0x40010c00
 8000404:	20001040 	.word	0x20001040
 8000408:	2000103c 	.word	0x2000103c

0800040c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t j=0;
 8000414:	2300      	movs	r3, #0
 8000416:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800041c:	480f      	ldr	r0, [pc, #60]	; (800045c <StartDefaultTask+0x50>)
 800041e:	f000 fcb3 	bl	8000d88 <HAL_GPIO_TogglePin>
	printf("hello van tho 15 %d \n", j);
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	4619      	mov	r1, r3
 8000426:	480e      	ldr	r0, [pc, #56]	; (8000460 <StartDefaultTask+0x54>)
 8000428:	f003 f844 	bl	80034b4 <iprintf>
	j++;
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	3301      	adds	r3, #1
 8000430:	73fb      	strb	r3, [r7, #15]
    osDelay(1000);
 8000432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000436:	f001 fd77 	bl	8001f28 <osDelay>
    if(j ==5)
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	2b05      	cmp	r3, #5
 800043e:	d104      	bne.n	800044a <StartDefaultTask+0x3e>
    {
    	vTaskSuspend(VanThoTaskHandle);
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <StartDefaultTask+0x58>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4618      	mov	r0, r3
 8000446:	f002 f881 	bl	800254c <vTaskSuspend>
    }
    if(j == 8)
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	2b08      	cmp	r3, #8
 800044e:	d1e3      	bne.n	8000418 <StartDefaultTask+0xc>
    {
    	vTaskDelete(defaultTaskHandle);
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <StartDefaultTask+0x5c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4618      	mov	r0, r3
 8000456:	f001 ffb5 	bl	80023c4 <vTaskDelete>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800045a:	e7dd      	b.n	8000418 <StartDefaultTask+0xc>
 800045c:	40010c00 	.word	0x40010c00
 8000460:	080043d8 	.word	0x080043d8
 8000464:	20001040 	.word	0x20001040
 8000468:	2000103c 	.word	0x2000103c

0800046c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d101      	bne.n	8000482 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800047e:	f000 f9eb 	bl	8000858 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40000800 	.word	0x40000800

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000498:	e7fe      	b.n	8000498 <Error_Handler+0x8>
	...

0800049c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <HAL_MspInit+0x68>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a17      	ldr	r2, [pc, #92]	; (8000504 <HAL_MspInit+0x68>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <HAL_MspInit+0x68>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <HAL_MspInit+0x68>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a11      	ldr	r2, [pc, #68]	; (8000504 <HAL_MspInit+0x68>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <HAL_MspInit+0x68>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	210f      	movs	r1, #15
 80004d6:	f06f 0001 	mvn.w	r0, #1
 80004da:	f000 fa8e 	bl	80009fa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <HAL_MspInit+0x6c>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <HAL_MspInit+0x6c>)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	bf00      	nop
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000
 8000508:	40010000 	.word	0x40010000

0800050c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <HAL_UART_MspInit+0x8c>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d131      	bne.n	8000590 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <HAL_UART_MspInit+0x90>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a1a      	ldr	r2, [pc, #104]	; (800059c <HAL_UART_MspInit+0x90>)
 8000532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <HAL_UART_MspInit+0x90>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_UART_MspInit+0x90>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a14      	ldr	r2, [pc, #80]	; (800059c <HAL_UART_MspInit+0x90>)
 800054a:	f043 0304 	orr.w	r3, r3, #4
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_UART_MspInit+0x90>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0304 	and.w	r3, r3, #4
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800055c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000560:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000562:	2302      	movs	r3, #2
 8000564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000566:	2303      	movs	r3, #3
 8000568:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	4619      	mov	r1, r3
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <HAL_UART_MspInit+0x94>)
 8000572:	f000 fa6d 	bl	8000a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	4619      	mov	r1, r3
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <HAL_UART_MspInit+0x94>)
 800058c:	f000 fa60 	bl	8000a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40013800 	.word	0x40013800
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010800 	.word	0x40010800

080005a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08c      	sub	sp, #48	; 0x30
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	201e      	movs	r0, #30
 80005ba:	f000 fa1e 	bl	80009fa <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005be:	201e      	movs	r0, #30
 80005c0:	f000 fa37 	bl	8000a32 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <HAL_InitTick+0xa0>)
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <HAL_InitTick+0xa0>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	61d3      	str	r3, [r2, #28]
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <HAL_InitTick+0xa0>)
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005dc:	f107 0210 	add.w	r2, r7, #16
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 ffe4 	bl	80015b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80005ec:	f000 ffba 	bl	8001564 <HAL_RCC_GetPCLK1Freq>
 80005f0:	4603      	mov	r3, r0
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <HAL_InitTick+0xa4>)
 80005fa:	fba2 2303 	umull	r2, r3, r2, r3
 80005fe:	0c9b      	lsrs	r3, r3, #18
 8000600:	3b01      	subs	r3, #1
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_InitTick+0xa8>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <HAL_InitTick+0xac>)
 8000608:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <HAL_InitTick+0xa8>)
 800060c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000610:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <HAL_InitTick+0xa8>)
 8000614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000616:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_InitTick+0xa8>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <HAL_InitTick+0xa8>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <HAL_InitTick+0xa8>)
 8000626:	f001 f813 	bl	8001650 <HAL_TIM_Base_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d104      	bne.n	800063a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <HAL_InitTick+0xa8>)
 8000632:	f001 f865 	bl	8001700 <HAL_TIM_Base_Start_IT>
 8000636:	4603      	mov	r3, r0
 8000638:	e000      	b.n	800063c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3730      	adds	r7, #48	; 0x30
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000
 8000648:	431bde83 	.word	0x431bde83
 800064c:	20001088 	.word	0x20001088
 8000650:	40000800 	.word	0x40000800

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
	...

08000680 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <TIM4_IRQHandler+0x10>)
 8000686:	f001 f88d 	bl	80017a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20001088 	.word	0x20001088

08000694 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	e00a      	b.n	80006bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006a6:	f3af 8000 	nop.w
 80006aa:	4601      	mov	r1, r0
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	60ba      	str	r2, [r7, #8]
 80006b2:	b2ca      	uxtb	r2, r1
 80006b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbf0      	blt.n	80006a6 <_read+0x12>
	}

return len;
 80006c4:	687b      	ldr	r3, [r7, #4]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	e009      	b.n	80006f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	60ba      	str	r2, [r7, #8]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fd49 	bl	8000180 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dbf1      	blt.n	80006e0 <_write+0x12>
	}
	return len;
 80006fc:	687b      	ldr	r3, [r7, #4]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <_close>:

int _close(int file)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
	return -1;
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800072c:	605a      	str	r2, [r3, #4]
	return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <_isatty>:

int _isatty(int file)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	return 1;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800074e:	b480      	push	{r7}
 8000750:	b085      	sub	sp, #20
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
	return 0;
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
	...

08000768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000770:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <_sbrk+0x5c>)
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <_sbrk+0x60>)
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d102      	bne.n	800078a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <_sbrk+0x64>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <_sbrk+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	429a      	cmp	r2, r3
 8000796:	d207      	bcs.n	80007a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000798:	f002 fe5a 	bl	8003450 <__errno>
 800079c:	4603      	mov	r3, r0
 800079e:	220c      	movs	r2, #12
 80007a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	e009      	b.n	80007bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <_sbrk+0x64>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <_sbrk+0x64>)
 80007b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ba:	68fb      	ldr	r3, [r7, #12]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20005000 	.word	0x20005000
 80007c8:	00000400 	.word	0x00000400
 80007cc:	200002e4 	.word	0x200002e4
 80007d0:	200010e8 	.word	0x200010e8

080007d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007e2:	490d      	ldr	r1, [pc, #52]	; (8000818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e8:	e002      	b.n	80007f0 <LoopCopyDataInit>

080007ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ee:	3304      	adds	r3, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f4:	d3f9      	bcc.n	80007ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007f8:	4c0a      	ldr	r4, [pc, #40]	; (8000824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007fc:	e001      	b.n	8000802 <LoopFillZerobss>

080007fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000800:	3204      	adds	r2, #4

08000802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000804:	d3fb      	bcc.n	80007fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000806:	f7ff ffe5 	bl	80007d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800080a:	f002 fe27 	bl	800345c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080e:	f7ff fcc9 	bl	80001a4 <main>
  bx lr
 8000812:	4770      	bx	lr
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800081c:	080044c0 	.word	0x080044c0
  ldr r2, =_sbss
 8000820:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000824:	200010e4 	.word	0x200010e4

08000828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_2_IRQHandler>
	...

0800082c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_Init+0x28>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <HAL_Init+0x28>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800083c:	2003      	movs	r0, #3
 800083e:	f000 f8d1 	bl	80009e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000842:	200f      	movs	r0, #15
 8000844:	f7ff feae 	bl	80005a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000848:	f7ff fe28 	bl	800049c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40022000 	.word	0x40022000

08000858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x1c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_IncTick+0x20>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a03      	ldr	r2, [pc, #12]	; (8000878 <HAL_IncTick+0x20>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	20000008 	.word	0x20000008
 8000878:	200010d0 	.word	0x200010d0

0800087c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return uwTick;
 8000880:	4b02      	ldr	r3, [pc, #8]	; (800088c <HAL_GetTick+0x10>)
 8000882:	681b      	ldr	r3, [r3, #0]
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	200010d0 	.word	0x200010d0

08000890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	60d3      	str	r3, [r2, #12]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <__NVIC_GetPriorityGrouping+0x18>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	f003 0307 	and.w	r3, r3, #7
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	2b00      	cmp	r3, #0
 8000904:	db0b      	blt.n	800091e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 021f 	and.w	r2, r3, #31
 800090c:	4906      	ldr	r1, [pc, #24]	; (8000928 <__NVIC_EnableIRQ+0x34>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	095b      	lsrs	r3, r3, #5
 8000914:	2001      	movs	r0, #1
 8000916:	fa00 f202 	lsl.w	r2, r0, r2
 800091a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	; (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	; 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff4f 	bl	8000890 <__NVIC_SetPriorityGrouping>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a0c:	f7ff ff64 	bl	80008d8 <__NVIC_GetPriorityGrouping>
 8000a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f7ff ffb2 	bl	8000980 <NVIC_EncodePriority>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff81 	bl	800092c <__NVIC_SetPriority>
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff57 	bl	80008f4 <__NVIC_EnableIRQ>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b08b      	sub	sp, #44	; 0x2c
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a62:	e169      	b.n	8000d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a64:	2201      	movs	r2, #1
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	f040 8158 	bne.w	8000d32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	4a9a      	ldr	r2, [pc, #616]	; (8000cf0 <HAL_GPIO_Init+0x2a0>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d05e      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000a8c:	4a98      	ldr	r2, [pc, #608]	; (8000cf0 <HAL_GPIO_Init+0x2a0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d875      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000a92:	4a98      	ldr	r2, [pc, #608]	; (8000cf4 <HAL_GPIO_Init+0x2a4>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d058      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000a98:	4a96      	ldr	r2, [pc, #600]	; (8000cf4 <HAL_GPIO_Init+0x2a4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d86f      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000a9e:	4a96      	ldr	r2, [pc, #600]	; (8000cf8 <HAL_GPIO_Init+0x2a8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d052      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000aa4:	4a94      	ldr	r2, [pc, #592]	; (8000cf8 <HAL_GPIO_Init+0x2a8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d869      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000aaa:	4a94      	ldr	r2, [pc, #592]	; (8000cfc <HAL_GPIO_Init+0x2ac>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d04c      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000ab0:	4a92      	ldr	r2, [pc, #584]	; (8000cfc <HAL_GPIO_Init+0x2ac>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d863      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000ab6:	4a92      	ldr	r2, [pc, #584]	; (8000d00 <HAL_GPIO_Init+0x2b0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d046      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000abc:	4a90      	ldr	r2, [pc, #576]	; (8000d00 <HAL_GPIO_Init+0x2b0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d85d      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	d82a      	bhi.n	8000b1c <HAL_GPIO_Init+0xcc>
 8000ac6:	2b12      	cmp	r3, #18
 8000ac8:	d859      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000aca:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <HAL_GPIO_Init+0x80>)
 8000acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad0:	08000b4b 	.word	0x08000b4b
 8000ad4:	08000b25 	.word	0x08000b25
 8000ad8:	08000b37 	.word	0x08000b37
 8000adc:	08000b79 	.word	0x08000b79
 8000ae0:	08000b7f 	.word	0x08000b7f
 8000ae4:	08000b7f 	.word	0x08000b7f
 8000ae8:	08000b7f 	.word	0x08000b7f
 8000aec:	08000b7f 	.word	0x08000b7f
 8000af0:	08000b7f 	.word	0x08000b7f
 8000af4:	08000b7f 	.word	0x08000b7f
 8000af8:	08000b7f 	.word	0x08000b7f
 8000afc:	08000b7f 	.word	0x08000b7f
 8000b00:	08000b7f 	.word	0x08000b7f
 8000b04:	08000b7f 	.word	0x08000b7f
 8000b08:	08000b7f 	.word	0x08000b7f
 8000b0c:	08000b7f 	.word	0x08000b7f
 8000b10:	08000b7f 	.word	0x08000b7f
 8000b14:	08000b2d 	.word	0x08000b2d
 8000b18:	08000b41 	.word	0x08000b41
 8000b1c:	4a79      	ldr	r2, [pc, #484]	; (8000d04 <HAL_GPIO_Init+0x2b4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b22:	e02c      	b.n	8000b7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e029      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	3304      	adds	r3, #4
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e024      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	623b      	str	r3, [r7, #32]
          break;
 8000b3e:	e01f      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	330c      	adds	r3, #12
 8000b46:	623b      	str	r3, [r7, #32]
          break;
 8000b48:	e01a      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b52:	2304      	movs	r3, #4
 8000b54:	623b      	str	r3, [r7, #32]
          break;
 8000b56:	e013      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d105      	bne.n	8000b6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b60:	2308      	movs	r3, #8
 8000b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	611a      	str	r2, [r3, #16]
          break;
 8000b6a:	e009      	b.n	8000b80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	615a      	str	r2, [r3, #20]
          break;
 8000b76:	e003      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
          break;
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          break;
 8000b7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	2bff      	cmp	r3, #255	; 0xff
 8000b84:	d801      	bhi.n	8000b8a <HAL_GPIO_Init+0x13a>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	e001      	b.n	8000b8e <HAL_GPIO_Init+0x13e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	2bff      	cmp	r3, #255	; 0xff
 8000b94:	d802      	bhi.n	8000b9c <HAL_GPIO_Init+0x14c>
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	3b08      	subs	r3, #8
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	210f      	movs	r1, #15
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	6a39      	ldr	r1, [r7, #32]
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f000 80b1 	beq.w	8000d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd0:	4b4d      	ldr	r3, [pc, #308]	; (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a4c      	ldr	r2, [pc, #304]	; (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b4a      	ldr	r3, [pc, #296]	; (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000be8:	4a48      	ldr	r2, [pc, #288]	; (8000d0c <HAL_GPIO_Init+0x2bc>)
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	3302      	adds	r3, #2
 8000bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	220f      	movs	r2, #15
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a40      	ldr	r2, [pc, #256]	; (8000d10 <HAL_GPIO_Init+0x2c0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d013      	beq.n	8000c3c <HAL_GPIO_Init+0x1ec>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a3f      	ldr	r2, [pc, #252]	; (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d00d      	beq.n	8000c38 <HAL_GPIO_Init+0x1e8>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	; (8000d18 <HAL_GPIO_Init+0x2c8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d007      	beq.n	8000c34 <HAL_GPIO_Init+0x1e4>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a3d      	ldr	r2, [pc, #244]	; (8000d1c <HAL_GPIO_Init+0x2cc>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <HAL_GPIO_Init+0x1e0>
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e006      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c30:	2304      	movs	r3, #4
 8000c32:	e004      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e002      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c40:	f002 0203 	and.w	r2, r2, #3
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	4093      	lsls	r3, r2
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c4e:	492f      	ldr	r1, [pc, #188]	; (8000d0c <HAL_GPIO_Init+0x2bc>)
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3302      	adds	r3, #2
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	492c      	ldr	r1, [pc, #176]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4928      	ldr	r1, [pc, #160]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4922      	ldr	r1, [pc, #136]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	491e      	ldr	r1, [pc, #120]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	4918      	ldr	r1, [pc, #96]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	608b      	str	r3, [r1, #8]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4914      	ldr	r1, [pc, #80]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d021      	beq.n	8000d24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	490e      	ldr	r1, [pc, #56]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	60cb      	str	r3, [r1, #12]
 8000cec:	e021      	b.n	8000d32 <HAL_GPIO_Init+0x2e2>
 8000cee:	bf00      	nop
 8000cf0:	10320000 	.word	0x10320000
 8000cf4:	10310000 	.word	0x10310000
 8000cf8:	10220000 	.word	0x10220000
 8000cfc:	10210000 	.word	0x10210000
 8000d00:	10120000 	.word	0x10120000
 8000d04:	10110000 	.word	0x10110000
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	40010800 	.word	0x40010800
 8000d14:	40010c00 	.word	0x40010c00
 8000d18:	40011000 	.word	0x40011000
 8000d1c:	40011400 	.word	0x40011400
 8000d20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_GPIO_Init+0x304>)
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	4909      	ldr	r1, [pc, #36]	; (8000d54 <HAL_GPIO_Init+0x304>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	3301      	adds	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f47f ae8e 	bne.w	8000a64 <HAL_GPIO_Init+0x14>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	372c      	adds	r7, #44	; 0x2c
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40010400 	.word	0x40010400

08000d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]
 8000d64:	4613      	mov	r3, r2
 8000d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d68:	787b      	ldrb	r3, [r7, #1]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d74:	e003      	b.n	8000d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	041a      	lsls	r2, r3, #16
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	611a      	str	r2, [r3, #16]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d9a:	887a      	ldrh	r2, [r7, #2]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	041a      	lsls	r2, r3, #16
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	43d9      	mvns	r1, r3
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	400b      	ands	r3, r1
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	611a      	str	r2, [r3, #16]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
	...

08000dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e26c      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8087 	beq.w	8000eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ddc:	4b92      	ldr	r3, [pc, #584]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d00c      	beq.n	8000e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de8:	4b8f      	ldr	r3, [pc, #572]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d112      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5e>
 8000df4:	4b8c      	ldr	r3, [pc, #560]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e00:	d10b      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e02:	4b89      	ldr	r3, [pc, #548]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d06c      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x12c>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d168      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e246      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e22:	d106      	bne.n	8000e32 <HAL_RCC_OscConfig+0x76>
 8000e24:	4b80      	ldr	r3, [pc, #512]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a7f      	ldr	r2, [pc, #508]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e02e      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x98>
 8000e3a:	4b7b      	ldr	r3, [pc, #492]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a7a      	ldr	r2, [pc, #488]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b78      	ldr	r3, [pc, #480]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a77      	ldr	r2, [pc, #476]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e01d      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0xbc>
 8000e5e:	4b72      	ldr	r3, [pc, #456]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a71      	ldr	r2, [pc, #452]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b6f      	ldr	r3, [pc, #444]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a6e      	ldr	r2, [pc, #440]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e00b      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e78:	4b6b      	ldr	r3, [pc, #428]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a6a      	ldr	r2, [pc, #424]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b68      	ldr	r3, [pc, #416]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a67      	ldr	r2, [pc, #412]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d013      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fcf0 	bl	800087c <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fcec 	bl	800087c <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	; 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e1fa      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f0      	beq.n	8000ea0 <HAL_RCC_OscConfig+0xe4>
 8000ebe:	e014      	b.n	8000eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fcdc 	bl	800087c <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fcd8 	bl	800087c <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e1e6      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eda:	4b53      	ldr	r3, [pc, #332]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x10c>
 8000ee6:	e000      	b.n	8000eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d063      	beq.n	8000fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00b      	beq.n	8000f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f02:	4b49      	ldr	r3, [pc, #292]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d11c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x18c>
 8000f0e:	4b46      	ldr	r3, [pc, #280]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d116      	bne.n	8000f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	4b43      	ldr	r3, [pc, #268]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d005      	beq.n	8000f32 <HAL_RCC_OscConfig+0x176>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d001      	beq.n	8000f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e1ba      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f32:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4939      	ldr	r1, [pc, #228]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f46:	e03a      	b.n	8000fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d020      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <HAL_RCC_OscConfig+0x270>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fc91 	bl	800087c <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fc8d 	bl	800087c <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e19b      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4927      	ldr	r1, [pc, #156]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	600b      	str	r3, [r1, #0]
 8000f90:	e015      	b.n	8000fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <HAL_RCC_OscConfig+0x270>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fc70 	bl	800087c <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fc6c 	bl	800087c <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e17a      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d03a      	beq.n	8001040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d019      	beq.n	8001006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_RCC_OscConfig+0x274>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fc50 	bl	800087c <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe0:	f7ff fc4c 	bl	800087c <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e15a      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 fb08 	bl	8001614 <RCC_Delay>
 8001004:	e01c      	b.n	8001040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_RCC_OscConfig+0x274>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100c:	f7ff fc36 	bl	800087c <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001012:	e00f      	b.n	8001034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001014:	f7ff fc32 	bl	800087c <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d908      	bls.n	8001034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e140      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	42420000 	.word	0x42420000
 8001030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001034:	4b9e      	ldr	r3, [pc, #632]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1e9      	bne.n	8001014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80a6 	beq.w	800119a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001052:	4b97      	ldr	r3, [pc, #604]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10d      	bne.n	800107a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b94      	ldr	r3, [pc, #592]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a93      	ldr	r2, [pc, #588]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b91      	ldr	r3, [pc, #580]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001076:	2301      	movs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107a:	4b8e      	ldr	r3, [pc, #568]	; (80012b4 <HAL_RCC_OscConfig+0x4f8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001082:	2b00      	cmp	r3, #0
 8001084:	d118      	bne.n	80010b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001086:	4b8b      	ldr	r3, [pc, #556]	; (80012b4 <HAL_RCC_OscConfig+0x4f8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a8a      	ldr	r2, [pc, #552]	; (80012b4 <HAL_RCC_OscConfig+0x4f8>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001092:	f7ff fbf3 	bl	800087c <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109a:	f7ff fbef 	bl	800087c <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	; 0x64
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e0fd      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	4b81      	ldr	r3, [pc, #516]	; (80012b4 <HAL_RCC_OscConfig+0x4f8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x312>
 80010c0:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4a7a      	ldr	r2, [pc, #488]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6213      	str	r3, [r2, #32]
 80010cc:	e02d      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x334>
 80010d6:	4b76      	ldr	r3, [pc, #472]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a75      	ldr	r2, [pc, #468]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6213      	str	r3, [r2, #32]
 80010e2:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a72      	ldr	r2, [pc, #456]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	f023 0304 	bic.w	r3, r3, #4
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	e01c      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d10c      	bne.n	8001112 <HAL_RCC_OscConfig+0x356>
 80010f8:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	4a6c      	ldr	r2, [pc, #432]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6213      	str	r3, [r2, #32]
 8001104:	4b6a      	ldr	r3, [pc, #424]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a69      	ldr	r2, [pc, #420]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6213      	str	r3, [r2, #32]
 8001110:	e00b      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 8001112:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4a66      	ldr	r2, [pc, #408]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	6213      	str	r3, [r2, #32]
 800111e:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a63      	ldr	r2, [pc, #396]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	f023 0304 	bic.w	r3, r3, #4
 8001128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d015      	beq.n	800115e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fba3 	bl	800087c <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff fb9f 	bl	800087c <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e0ab      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001150:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0ee      	beq.n	800113a <HAL_RCC_OscConfig+0x37e>
 800115c:	e014      	b.n	8001188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115e:	f7ff fb8d 	bl	800087c <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001164:	e00a      	b.n	800117c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001166:	f7ff fb89 	bl	800087c <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f241 3288 	movw	r2, #5000	; 0x1388
 8001174:	4293      	cmp	r3, r2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e095      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800117c:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1ee      	bne.n	8001166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d105      	bne.n	800119a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118e:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a47      	ldr	r2, [pc, #284]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 8081 	beq.w	80012a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a4:	4b42      	ldr	r3, [pc, #264]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d061      	beq.n	8001274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d146      	bne.n	8001246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b8:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <HAL_RCC_OscConfig+0x4fc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fb5d 	bl	800087c <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fb59 	bl	800087c <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e067      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f0      	bne.n	80011c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ec:	d108      	bne.n	8001200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ee:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	492d      	ldr	r1, [pc, #180]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a19      	ldr	r1, [r3, #32]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	430b      	orrs	r3, r1
 8001212:	4927      	ldr	r1, [pc, #156]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <HAL_RCC_OscConfig+0x4fc>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fb2d 	bl	800087c <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff fb29 	bl	800087c <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e037      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x46a>
 8001244:	e02f      	b.n	80012a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HAL_RCC_OscConfig+0x4fc>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fb16 	bl	800087c <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001254:	f7ff fb12 	bl	800087c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e020      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x498>
 8001272:	e018      	b.n	80012a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e013      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x4f4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	429a      	cmp	r2, r3
 8001292:	d106      	bne.n	80012a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129e:	429a      	cmp	r2, r3
 80012a0:	d001      	beq.n	80012a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40007000 	.word	0x40007000
 80012b8:	42420060 	.word	0x42420060

080012bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0d0      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d0:	4b6a      	ldr	r3, [pc, #424]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d910      	bls.n	8001300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b67      	ldr	r3, [pc, #412]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 0207 	bic.w	r2, r3, #7
 80012e6:	4965      	ldr	r1, [pc, #404]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ee:	4b63      	ldr	r3, [pc, #396]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0b8      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d020      	beq.n	800134e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001318:	4b59      	ldr	r3, [pc, #356]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a58      	ldr	r2, [pc, #352]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a52      	ldr	r2, [pc, #328]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800133a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800133c:	4b50      	ldr	r3, [pc, #320]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	494d      	ldr	r1, [pc, #308]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d040      	beq.n	80013dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d115      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e07f      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e073      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e06b      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139a:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f023 0203 	bic.w	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4936      	ldr	r1, [pc, #216]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013ac:	f7ff fa66 	bl	800087c <HAL_GetTick>
 80013b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b4:	f7ff fa62 	bl	800087c <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e053      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 020c 	and.w	r2, r3, #12
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	429a      	cmp	r2, r3
 80013da:	d1eb      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013dc:	4b27      	ldr	r3, [pc, #156]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d210      	bcs.n	800140c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 0207 	bic.w	r2, r3, #7
 80013f2:	4922      	ldr	r1, [pc, #136]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e032      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4916      	ldr	r1, [pc, #88]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	4313      	orrs	r3, r2
 8001428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	490e      	ldr	r1, [pc, #56]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800144a:	f000 f821 	bl	8001490 <HAL_RCC_GetSysClockFreq>
 800144e:	4602      	mov	r2, r0
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	490a      	ldr	r1, [pc, #40]	; (8001484 <HAL_RCC_ClockConfig+0x1c8>)
 800145c:	5ccb      	ldrb	r3, [r1, r3]
 800145e:	fa22 f303 	lsr.w	r3, r2, r3
 8001462:	4a09      	ldr	r2, [pc, #36]	; (8001488 <HAL_RCC_ClockConfig+0x1cc>)
 8001464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_RCC_ClockConfig+0x1d0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f89a 	bl	80005a4 <HAL_InitTick>

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40022000 	.word	0x40022000
 8001480:	40021000 	.word	0x40021000
 8001484:	08004408 	.word	0x08004408
 8001488:	20000000 	.word	0x20000000
 800148c:	20000004 	.word	0x20000004

08001490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001490:	b490      	push	{r4, r7}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001498:	1d3c      	adds	r4, r7, #4
 800149a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014a0:	f240 2301 	movw	r3, #513	; 0x201
 80014a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d002      	beq.n	80014d0 <HAL_RCC_GetSysClockFreq+0x40>
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d003      	beq.n	80014d6 <HAL_RCC_GetSysClockFreq+0x46>
 80014ce:	e02d      	b.n	800152c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014d2:	623b      	str	r3, [r7, #32]
      break;
 80014d4:	e02d      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	0c9b      	lsrs	r3, r3, #18
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014e2:	4413      	add	r3, r2
 80014e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	0c5b      	lsrs	r3, r3, #17
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001502:	4413      	add	r3, r2
 8001504:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001508:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb8>)
 800150e:	fb02 f203 	mul.w	r2, r2, r3
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	fbb2 f3f3 	udiv	r3, r2, r3
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
 800151a:	e004      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	623b      	str	r3, [r7, #32]
      break;
 800152a:	e002      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb8>)
 800152e:	623b      	str	r3, [r7, #32]
      break;
 8001530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001532:	6a3b      	ldr	r3, [r7, #32]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bc90      	pop	{r4, r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	080043f0 	.word	0x080043f0
 8001544:	40021000 	.word	0x40021000
 8001548:	007a1200 	.word	0x007a1200
 800154c:	003d0900 	.word	0x003d0900

08001550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <HAL_RCC_GetHCLKFreq+0x10>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000000 	.word	0x20000000

08001564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001568:	f7ff fff2 	bl	8001550 <HAL_RCC_GetHCLKFreq>
 800156c:	4602      	mov	r2, r0
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	4903      	ldr	r1, [pc, #12]	; (8001588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800157a:	5ccb      	ldrb	r3, [r1, r3]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	08004418 	.word	0x08004418

0800158c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001590:	f7ff ffde 	bl	8001550 <HAL_RCC_GetHCLKFreq>
 8001594:	4602      	mov	r2, r0
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	0adb      	lsrs	r3, r3, #11
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	4903      	ldr	r1, [pc, #12]	; (80015b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015a2:	5ccb      	ldrb	r3, [r1, r3]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021000 	.word	0x40021000
 80015b0:	08004418 	.word	0x08004418

080015b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	220f      	movs	r2, #15
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_RCC_GetClockConfig+0x58>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0203 	and.w	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_RCC_GetClockConfig+0x58>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_RCC_GetClockConfig+0x58>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_RCC_GetClockConfig+0x58>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0207 	and.w	r2, r3, #7
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000
 8001610:	40022000 	.word	0x40022000

08001614 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <RCC_Delay+0x34>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <RCC_Delay+0x38>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0a5b      	lsrs	r3, r3, #9
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001630:	bf00      	nop
  }
  while (Delay --);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	60fa      	str	r2, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f9      	bne.n	8001630 <RCC_Delay+0x1c>
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	20000000 	.word	0x20000000
 800164c:	10624dd3 	.word	0x10624dd3

08001650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e041      	b.n	80016e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f839 	bl	80016ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3304      	adds	r3, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4610      	mov	r0, r2
 8001690:	f000 f9b4 	bl	80019fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d001      	beq.n	8001718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e03a      	b.n	800178e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a18      	ldr	r2, [pc, #96]	; (8001798 <HAL_TIM_Base_Start_IT+0x98>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d00e      	beq.n	8001758 <HAL_TIM_Base_Start_IT+0x58>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001742:	d009      	beq.n	8001758 <HAL_TIM_Base_Start_IT+0x58>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_TIM_Base_Start_IT+0x9c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d004      	beq.n	8001758 <HAL_TIM_Base_Start_IT+0x58>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d111      	bne.n	800177c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b06      	cmp	r3, #6
 8001768:	d010      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800177a:	e007      	b.n	800178c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	40012c00 	.word	0x40012c00
 800179c:	40000400 	.word	0x40000400
 80017a0:	40000800 	.word	0x40000800

080017a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d122      	bne.n	8001800 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d11b      	bne.n	8001800 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f06f 0202 	mvn.w	r2, #2
 80017d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f8ed 	bl	80019c6 <HAL_TIM_IC_CaptureCallback>
 80017ec:	e005      	b.n	80017fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f8e0 	bl	80019b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f8ef 	bl	80019d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b04      	cmp	r3, #4
 800180c:	d122      	bne.n	8001854 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b04      	cmp	r3, #4
 800181a:	d11b      	bne.n	8001854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f06f 0204 	mvn.w	r2, #4
 8001824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2202      	movs	r2, #2
 800182a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f8c3 	bl	80019c6 <HAL_TIM_IC_CaptureCallback>
 8001840:	e005      	b.n	800184e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f8b6 	bl	80019b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f8c5 	bl	80019d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b08      	cmp	r3, #8
 8001860:	d122      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b08      	cmp	r3, #8
 800186e:	d11b      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f06f 0208 	mvn.w	r2, #8
 8001878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2204      	movs	r2, #4
 800187e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f899 	bl	80019c6 <HAL_TIM_IC_CaptureCallback>
 8001894:	e005      	b.n	80018a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f88c 	bl	80019b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f89b 	bl	80019d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b10      	cmp	r3, #16
 80018b4:	d122      	bne.n	80018fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	2b10      	cmp	r3, #16
 80018c2:	d11b      	bne.n	80018fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0210 	mvn.w	r2, #16
 80018cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2208      	movs	r2, #8
 80018d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f86f 	bl	80019c6 <HAL_TIM_IC_CaptureCallback>
 80018e8:	e005      	b.n	80018f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f862 	bl	80019b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f871 	bl	80019d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b01      	cmp	r3, #1
 8001908:	d10e      	bne.n	8001928 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d107      	bne.n	8001928 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f06f 0201 	mvn.w	r2, #1
 8001920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7fe fda2 	bl	800046c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001932:	2b80      	cmp	r3, #128	; 0x80
 8001934:	d10e      	bne.n	8001954 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001940:	2b80      	cmp	r3, #128	; 0x80
 8001942:	d107      	bne.n	8001954 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800194c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f8bf 	bl	8001ad2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195e:	2b40      	cmp	r3, #64	; 0x40
 8001960:	d10e      	bne.n	8001980 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800196c:	2b40      	cmp	r3, #64	; 0x40
 800196e:	d107      	bne.n	8001980 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f835 	bl	80019ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	2b20      	cmp	r3, #32
 800198c:	d10e      	bne.n	80019ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	2b20      	cmp	r3, #32
 800199a:	d107      	bne.n	80019ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f06f 0220 	mvn.w	r2, #32
 80019a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f88a 	bl	8001ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a29      	ldr	r2, [pc, #164]	; (8001ab4 <TIM_Base_SetConfig+0xb8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d00b      	beq.n	8001a2c <TIM_Base_SetConfig+0x30>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1a:	d007      	beq.n	8001a2c <TIM_Base_SetConfig+0x30>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a26      	ldr	r2, [pc, #152]	; (8001ab8 <TIM_Base_SetConfig+0xbc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d003      	beq.n	8001a2c <TIM_Base_SetConfig+0x30>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a25      	ldr	r2, [pc, #148]	; (8001abc <TIM_Base_SetConfig+0xc0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d108      	bne.n	8001a3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <TIM_Base_SetConfig+0xb8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00b      	beq.n	8001a5e <TIM_Base_SetConfig+0x62>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4c:	d007      	beq.n	8001a5e <TIM_Base_SetConfig+0x62>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <TIM_Base_SetConfig+0xbc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d003      	beq.n	8001a5e <TIM_Base_SetConfig+0x62>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a18      	ldr	r2, [pc, #96]	; (8001abc <TIM_Base_SetConfig+0xc0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d108      	bne.n	8001a70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <TIM_Base_SetConfig+0xb8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d103      	bne.n	8001aa4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	615a      	str	r2, [r3, #20]
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	40012c00 	.word	0x40012c00
 8001ab8:	40000400 	.word	0x40000400
 8001abc:	40000800 	.word	0x40000800

08001ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e03f      	b.n	8001b76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe fcfe 	bl	800050c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2224      	movs	r2, #36	; 0x24
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f905 	bl	8001d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b08a      	sub	sp, #40	; 0x28
 8001b82:	af02      	add	r7, sp, #8
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	d17c      	bne.n	8001c98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_UART_Transmit+0x2c>
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e075      	b.n	8001c9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_UART_Transmit+0x3e>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e06e      	b.n	8001c9a <HAL_UART_Transmit+0x11c>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2221      	movs	r2, #33	; 0x21
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bd2:	f7fe fe53 	bl	800087c <HAL_GetTick>
 8001bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	88fa      	ldrh	r2, [r7, #6]
 8001bdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	88fa      	ldrh	r2, [r7, #6]
 8001be2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bec:	d108      	bne.n	8001c00 <HAL_UART_Transmit+0x82>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d104      	bne.n	8001c00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	e003      	b.n	8001c08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c10:	e02a      	b.n	8001c68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 f840 	bl	8001ca2 <UART_WaitOnFlagUntilTimeout>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e036      	b.n	8001c9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10b      	bne.n	8001c4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	3302      	adds	r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	e007      	b.n	8001c5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	3301      	adds	r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1cf      	bne.n	8001c12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2140      	movs	r1, #64	; 0x40
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f810 	bl	8001ca2 <UART_WaitOnFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e006      	b.n	8001c9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e000      	b.n	8001c9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
  }
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb2:	e02c      	b.n	8001d0e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cba:	d028      	beq.n	8001d0e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cc2:	f7fe fddb 	bl	800087c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d21d      	bcs.n	8001d0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ce0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e00f      	b.n	8001d2e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d0c3      	beq.n	8001cb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d72:	f023 030c 	bic.w	r3, r3, #12
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2c      	ldr	r2, [pc, #176]	; (8001e4c <UART_SetConfig+0x114>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d103      	bne.n	8001da8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001da0:	f7ff fbf4 	bl	800158c <HAL_RCC_GetPCLK2Freq>
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	e002      	b.n	8001dae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001da8:	f7ff fbdc 	bl	8001564 <HAL_RCC_GetPCLK1Freq>
 8001dac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	009a      	lsls	r2, r3, #2
 8001db8:	441a      	add	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <UART_SetConfig+0x118>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	0119      	lsls	r1, r3, #4
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009a      	lsls	r2, r3, #2
 8001dd8:	441a      	add	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <UART_SetConfig+0x118>)
 8001de6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	2064      	movs	r0, #100	; 0x64
 8001dee:	fb00 f303 	mul.w	r3, r0, r3
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	3332      	adds	r3, #50	; 0x32
 8001df8:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <UART_SetConfig+0x118>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e04:	4419      	add	r1, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009a      	lsls	r2, r3, #2
 8001e10:	441a      	add	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <UART_SetConfig+0x118>)
 8001e1e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2064      	movs	r0, #100	; 0x64
 8001e26:	fb00 f303 	mul.w	r3, r0, r3
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	3332      	adds	r3, #50	; 0x32
 8001e30:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <UART_SetConfig+0x118>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	f003 020f 	and.w	r2, r3, #15
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	440a      	add	r2, r1
 8001e42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	51eb851f 	.word	0x51eb851f

08001e54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e66:	2b84      	cmp	r3, #132	; 0x84
 8001e68:	d005      	beq.n	8001e76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	3303      	adds	r3, #3
 8001e74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e86:	f000 fbf3 	bl	8002670 <vTaskStartScheduler>
  
  return osOK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af04      	add	r7, sp, #16
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d020      	beq.n	8001ee4 <osThreadCreate+0x54>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d01c      	beq.n	8001ee4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685c      	ldr	r4, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681d      	ldr	r5, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691e      	ldr	r6, [r3, #16]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ffc9 	bl	8001e54 <makeFreeRtosPriority>
 8001ec2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ecc:	9202      	str	r2, [sp, #8]
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	9100      	str	r1, [sp, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	4632      	mov	r2, r6
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f000 f8e8 	bl	80020ae <xTaskCreateStatic>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	e01c      	b.n	8001f1e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685c      	ldr	r4, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ef0:	b29e      	uxth	r6, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ffab 	bl	8001e54 <makeFreeRtosPriority>
 8001efe:	4602      	mov	r2, r0
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	9200      	str	r2, [sp, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4632      	mov	r2, r6
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f000 f929 	bl	8002166 <xTaskCreate>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e000      	b.n	8001f20 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f28 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <osDelay+0x16>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	e000      	b.n	8001f40 <osDelay+0x18>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 facf 	bl	80024e4 <vTaskDelay>
  
  return osOK;
 8001f46:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f103 0208 	add.w	r2, r3, #8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f103 0208 	add.w	r2, r3, #8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f103 0208 	add.w	r2, r3, #8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	601a      	str	r2, [r3, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002002:	d103      	bne.n	800200c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e00c      	b.n	8002026 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3308      	adds	r3, #8
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	e002      	b.n	800201a <vListInsert+0x2e>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	429a      	cmp	r2, r3
 8002024:	d2f6      	bcs.n	8002014 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	601a      	str	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6892      	ldr	r2, [r2, #8]
 8002072:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6852      	ldr	r2, [r2, #4]
 800207c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	d103      	bne.n	8002090 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	1e5a      	subs	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b08e      	sub	sp, #56	; 0x38
 80020b2:	af04      	add	r7, sp, #16
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80020bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10a      	bne.n	80020d8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020d4:	bf00      	nop
 80020d6:	e7fe      	b.n	80020d6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80020d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10a      	bne.n	80020f4 <xTaskCreateStatic+0x46>
	__asm volatile
 80020de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e2:	f383 8811 	msr	BASEPRI, r3
 80020e6:	f3bf 8f6f 	isb	sy
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	61fb      	str	r3, [r7, #28]
}
 80020f0:	bf00      	nop
 80020f2:	e7fe      	b.n	80020f2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80020f4:	2354      	movs	r3, #84	; 0x54
 80020f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b54      	cmp	r3, #84	; 0x54
 80020fc:	d00a      	beq.n	8002114 <xTaskCreateStatic+0x66>
	__asm volatile
 80020fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002102:	f383 8811 	msr	BASEPRI, r3
 8002106:	f3bf 8f6f 	isb	sy
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	61bb      	str	r3, [r7, #24]
}
 8002110:	bf00      	nop
 8002112:	e7fe      	b.n	8002112 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01e      	beq.n	8002158 <xTaskCreateStatic+0xaa>
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01b      	beq.n	8002158 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002128:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	2202      	movs	r2, #2
 800212e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002132:	2300      	movs	r3, #0
 8002134:	9303      	str	r3, [sp, #12]
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	9302      	str	r3, [sp, #8]
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f850 	bl	80021f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002152:	f000 f8cd 	bl	80022f0 <prvAddNewTaskToReadyList>
 8002156:	e001      	b.n	800215c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800215c:	697b      	ldr	r3, [r7, #20]
	}
 800215e:	4618      	mov	r0, r3
 8002160:	3728      	adds	r7, #40	; 0x28
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002166:	b580      	push	{r7, lr}
 8002168:	b08c      	sub	sp, #48	; 0x30
 800216a:	af04      	add	r7, sp, #16
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	4613      	mov	r3, r2
 8002174:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4618      	mov	r0, r3
 800217c:	f000 ff90 	bl	80030a0 <pvPortMalloc>
 8002180:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002188:	2054      	movs	r0, #84	; 0x54
 800218a:	f000 ff89 	bl	80030a0 <pvPortMalloc>
 800218e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
 800219c:	e005      	b.n	80021aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f001 f842 	bl	8003228 <vPortFree>
 80021a4:	e001      	b.n	80021aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d017      	beq.n	80021e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021b8:	88fa      	ldrh	r2, [r7, #6]
 80021ba:	2300      	movs	r3, #0
 80021bc:	9303      	str	r3, [sp, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	9302      	str	r3, [sp, #8]
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f80e 	bl	80021f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021d4:	69f8      	ldr	r0, [r7, #28]
 80021d6:	f000 f88b 	bl	80022f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80021da:	2301      	movs	r3, #1
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	e002      	b.n	80021e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
 80021e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80021e6:	69bb      	ldr	r3, [r7, #24]
	}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002208:	3b01      	subs	r3, #1
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f023 0307 	bic.w	r3, r3, #7
 8002216:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002226:	f383 8811 	msr	BASEPRI, r3
 800222a:	f3bf 8f6f 	isb	sy
 800222e:	f3bf 8f4f 	dsb	sy
 8002232:	617b      	str	r3, [r7, #20]
}
 8002234:	bf00      	nop
 8002236:	e7fe      	b.n	8002236 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	e012      	b.n	8002264 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4413      	add	r3, r2
 8002244:	7819      	ldrb	r1, [r3, #0]
 8002246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	4413      	add	r3, r2
 800224c:	3334      	adds	r3, #52	; 0x34
 800224e:	460a      	mov	r2, r1
 8002250:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	4413      	add	r3, r2
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3301      	adds	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	d9e9      	bls.n	800223e <prvInitialiseNewTask+0x4e>
 800226a:	e000      	b.n	800226e <prvInitialiseNewTask+0x7e>
		{
			break;
 800226c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	2b06      	cmp	r3, #6
 800227a:	d901      	bls.n	8002280 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800227c:	2306      	movs	r3, #6
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002284:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	2200      	movs	r2, #0
 8002290:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	3304      	adds	r3, #4
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fe79 	bl	8001f8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229e:	3318      	adds	r3, #24
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fe74 	bl	8001f8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	f1c3 0207 	rsb	r2, r3, #7
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80022bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022be:	2200      	movs	r2, #0
 80022c0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	68f9      	ldr	r1, [r7, #12]
 80022ce:	69b8      	ldr	r0, [r7, #24]
 80022d0:	f000 fd30 	bl	8002d34 <pxPortInitialiseStack>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022e6:	bf00      	nop
 80022e8:	3720      	adds	r7, #32
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80022f8:	f000 fe10 	bl	8002f1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <prvAddNewTaskToReadyList+0xb8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <prvAddNewTaskToReadyList+0xb8>)
 8002304:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002306:	4b29      	ldr	r3, [pc, #164]	; (80023ac <prvAddNewTaskToReadyList+0xbc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d109      	bne.n	8002322 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800230e:	4a27      	ldr	r2, [pc, #156]	; (80023ac <prvAddNewTaskToReadyList+0xbc>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <prvAddNewTaskToReadyList+0xb8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d110      	bne.n	800233e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800231c:	f000 fbe2 	bl	8002ae4 <prvInitialiseTaskLists>
 8002320:	e00d      	b.n	800233e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002322:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <prvAddNewTaskToReadyList+0xc0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800232a:	4b20      	ldr	r3, [pc, #128]	; (80023ac <prvAddNewTaskToReadyList+0xbc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	429a      	cmp	r2, r3
 8002336:	d802      	bhi.n	800233e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002338:	4a1c      	ldr	r2, [pc, #112]	; (80023ac <prvAddNewTaskToReadyList+0xbc>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <prvAddNewTaskToReadyList+0xc4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3301      	adds	r3, #1
 8002344:	4a1b      	ldr	r2, [pc, #108]	; (80023b4 <prvAddNewTaskToReadyList+0xc4>)
 8002346:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	2201      	movs	r2, #1
 800234e:	409a      	lsls	r2, r3
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <prvAddNewTaskToReadyList+0xc8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4313      	orrs	r3, r2
 8002356:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <prvAddNewTaskToReadyList+0xc8>)
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4a15      	ldr	r2, [pc, #84]	; (80023bc <prvAddNewTaskToReadyList+0xcc>)
 8002368:	441a      	add	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3304      	adds	r3, #4
 800236e:	4619      	mov	r1, r3
 8002370:	4610      	mov	r0, r2
 8002372:	f7ff fe18 	bl	8001fa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002376:	f000 fe01 	bl	8002f7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <prvAddNewTaskToReadyList+0xc0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00e      	beq.n	80023a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <prvAddNewTaskToReadyList+0xbc>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	429a      	cmp	r2, r3
 800238e:	d207      	bcs.n	80023a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <prvAddNewTaskToReadyList+0xd0>)
 8002392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	200003e8 	.word	0x200003e8
 80023ac:	200002e8 	.word	0x200002e8
 80023b0:	200003f4 	.word	0x200003f4
 80023b4:	20000404 	.word	0x20000404
 80023b8:	200003f0 	.word	0x200003f0
 80023bc:	200002ec 	.word	0x200002ec
 80023c0:	e000ed04 	.word	0xe000ed04

080023c4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80023cc:	f000 fda6 	bl	8002f1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <vTaskDelete+0x18>
 80023d6:	4b39      	ldr	r3, [pc, #228]	; (80024bc <vTaskDelete+0xf8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	e000      	b.n	80023de <vTaskDelete+0x1a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3304      	adds	r3, #4
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fe39 	bl	800205c <uxListRemove>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d115      	bne.n	800241c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f4:	4932      	ldr	r1, [pc, #200]	; (80024c0 <vTaskDelete+0xfc>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <vTaskDelete+0x58>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	2201      	movs	r2, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43da      	mvns	r2, r3
 8002412:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <vTaskDelete+0x100>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4013      	ands	r3, r2
 8002418:	4a2a      	ldr	r2, [pc, #168]	; (80024c4 <vTaskDelete+0x100>)
 800241a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3318      	adds	r3, #24
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fe17 	bl	800205c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <vTaskDelete+0x104>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <vTaskDelete+0x104>)
 8002436:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002438:	4b20      	ldr	r3, [pc, #128]	; (80024bc <vTaskDelete+0xf8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	429a      	cmp	r2, r3
 8002440:	d10b      	bne.n	800245a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3304      	adds	r3, #4
 8002446:	4619      	mov	r1, r3
 8002448:	4820      	ldr	r0, [pc, #128]	; (80024cc <vTaskDelete+0x108>)
 800244a:	f7ff fdac 	bl	8001fa6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <vTaskDelete+0x10c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <vTaskDelete+0x10c>)
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e009      	b.n	800246e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <vTaskDelete+0x110>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3b01      	subs	r3, #1
 8002460:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <vTaskDelete+0x110>)
 8002462:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fbab 	bl	8002bc0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800246a:	f000 fbd9 	bl	8002c20 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800246e:	f000 fd85 	bl	8002f7c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <vTaskDelete+0x114>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d01b      	beq.n	80024b2 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <vTaskDelete+0xf8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	429a      	cmp	r2, r3
 8002482:	d116      	bne.n	80024b2 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <vTaskDelete+0x118>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <vTaskDelete+0xde>
	__asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	60bb      	str	r3, [r7, #8]
}
 800249e:	bf00      	nop
 80024a0:	e7fe      	b.n	80024a0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <vTaskDelete+0x11c>)
 80024a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200002e8 	.word	0x200002e8
 80024c0:	200002ec 	.word	0x200002ec
 80024c4:	200003f0 	.word	0x200003f0
 80024c8:	20000404 	.word	0x20000404
 80024cc:	200003bc 	.word	0x200003bc
 80024d0:	200003d0 	.word	0x200003d0
 80024d4:	200003e8 	.word	0x200003e8
 80024d8:	200003f4 	.word	0x200003f4
 80024dc:	20000410 	.word	0x20000410
 80024e0:	e000ed04 	.word	0xe000ed04

080024e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d017      	beq.n	8002526 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <vTaskDelay+0x60>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <vTaskDelay+0x30>
	__asm volatile
 80024fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	60bb      	str	r3, [r7, #8]
}
 8002510:	bf00      	nop
 8002512:	e7fe      	b.n	8002512 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002514:	f000 f90c 	bl	8002730 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002518:	2100      	movs	r1, #0
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fba4 	bl	8002c68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002520:	f000 f914 	bl	800274c <xTaskResumeAll>
 8002524:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <vTaskDelay+0x64>)
 800252e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000410 	.word	0x20000410
 8002548:	e000ed04 	.word	0xe000ed04

0800254c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002554:	f000 fce2 	bl	8002f1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <vTaskSuspend+0x18>
 800255e:	4b3c      	ldr	r3, [pc, #240]	; (8002650 <vTaskSuspend+0x104>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	e000      	b.n	8002566 <vTaskSuspend+0x1a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	3304      	adds	r3, #4
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fd75 	bl	800205c <uxListRemove>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d115      	bne.n	80025a4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257c:	4935      	ldr	r1, [pc, #212]	; (8002654 <vTaskSuspend+0x108>)
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10a      	bne.n	80025a4 <vTaskSuspend+0x58>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	2201      	movs	r2, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43da      	mvns	r2, r3
 800259a:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <vTaskSuspend+0x10c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4013      	ands	r3, r2
 80025a0:	4a2d      	ldr	r2, [pc, #180]	; (8002658 <vTaskSuspend+0x10c>)
 80025a2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3318      	adds	r3, #24
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fd53 	bl	800205c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3304      	adds	r3, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	4827      	ldr	r0, [pc, #156]	; (800265c <vTaskSuspend+0x110>)
 80025be:	f7ff fcf2 	bl	8001fa6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d103      	bne.n	80025d6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80025d6:	f000 fcd1 	bl	8002f7c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <vTaskSuspend+0x114>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80025e2:	f000 fc9b 	bl	8002f1c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80025e6:	f000 fb1b 	bl	8002c20 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80025ea:	f000 fcc7 	bl	8002f7c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <vTaskSuspend+0x104>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d127      	bne.n	8002648 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <vTaskSuspend+0x114>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d017      	beq.n	8002630 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <vTaskSuspend+0x118>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <vTaskSuspend+0xd2>
	__asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	60bb      	str	r3, [r7, #8]
}
 800261a:	bf00      	nop
 800261c:	e7fe      	b.n	800261c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <vTaskSuspend+0x11c>)
 8002620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800262e:	e00b      	b.n	8002648 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <vTaskSuspend+0x110>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <vTaskSuspend+0x120>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d103      	bne.n	8002644 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <vTaskSuspend+0x104>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
	}
 8002642:	e001      	b.n	8002648 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8002644:	f000 f9dc 	bl	8002a00 <vTaskSwitchContext>
	}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200002e8 	.word	0x200002e8
 8002654:	200002ec 	.word	0x200002ec
 8002658:	200003f0 	.word	0x200003f0
 800265c:	200003d4 	.word	0x200003d4
 8002660:	200003f4 	.word	0x200003f4
 8002664:	20000410 	.word	0x20000410
 8002668:	e000ed04 	.word	0xe000ed04
 800266c:	200003e8 	.word	0x200003e8

08002670 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800267e:	463a      	mov	r2, r7
 8002680:	1d39      	adds	r1, r7, #4
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd fd62 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	9202      	str	r2, [sp, #8]
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2300      	movs	r3, #0
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2300      	movs	r3, #0
 800269c:	460a      	mov	r2, r1
 800269e:	491e      	ldr	r1, [pc, #120]	; (8002718 <vTaskStartScheduler+0xa8>)
 80026a0:	481e      	ldr	r0, [pc, #120]	; (800271c <vTaskStartScheduler+0xac>)
 80026a2:	f7ff fd04 	bl	80020ae <xTaskCreateStatic>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <vTaskStartScheduler+0xb0>)
 80026aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80026ac:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <vTaskStartScheduler+0xb0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80026b4:	2301      	movs	r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e001      	b.n	80026be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d116      	bne.n	80026f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	613b      	str	r3, [r7, #16]
}
 80026d6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <vTaskStartScheduler+0xb4>)
 80026da:	f04f 32ff 	mov.w	r2, #4294967295
 80026de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <vTaskStartScheduler+0xb8>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <vTaskStartScheduler+0xbc>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80026ec:	f000 fba4 	bl	8002e38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80026f0:	e00e      	b.n	8002710 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d10a      	bne.n	8002710 <vTaskStartScheduler+0xa0>
	__asm volatile
 80026fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fe:	f383 8811 	msr	BASEPRI, r3
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	60fb      	str	r3, [r7, #12]
}
 800270c:	bf00      	nop
 800270e:	e7fe      	b.n	800270e <vTaskStartScheduler+0x9e>
}
 8002710:	bf00      	nop
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	08004400 	.word	0x08004400
 800271c:	08002ab5 	.word	0x08002ab5
 8002720:	2000040c 	.word	0x2000040c
 8002724:	20000408 	.word	0x20000408
 8002728:	200003f4 	.word	0x200003f4
 800272c:	200003ec 	.word	0x200003ec

08002730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <vTaskSuspendAll+0x18>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	4a03      	ldr	r2, [pc, #12]	; (8002748 <vTaskSuspendAll+0x18>)
 800273c:	6013      	str	r3, [r2, #0]
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000410 	.word	0x20000410

0800274c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <xTaskResumeAll+0x114>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <xTaskResumeAll+0x2c>
	__asm volatile
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	603b      	str	r3, [r7, #0]
}
 8002774:	bf00      	nop
 8002776:	e7fe      	b.n	8002776 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002778:	f000 fbd0 	bl	8002f1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800277c:	4b38      	ldr	r3, [pc, #224]	; (8002860 <xTaskResumeAll+0x114>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3b01      	subs	r3, #1
 8002782:	4a37      	ldr	r2, [pc, #220]	; (8002860 <xTaskResumeAll+0x114>)
 8002784:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002786:	4b36      	ldr	r3, [pc, #216]	; (8002860 <xTaskResumeAll+0x114>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d161      	bne.n	8002852 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800278e:	4b35      	ldr	r3, [pc, #212]	; (8002864 <xTaskResumeAll+0x118>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d05d      	beq.n	8002852 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002796:	e02e      	b.n	80027f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002798:	4b33      	ldr	r3, [pc, #204]	; (8002868 <xTaskResumeAll+0x11c>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3318      	adds	r3, #24
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fc59 	bl	800205c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3304      	adds	r3, #4
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fc54 	bl	800205c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	2201      	movs	r2, #1
 80027ba:	409a      	lsls	r2, r3
 80027bc:	4b2b      	ldr	r3, [pc, #172]	; (800286c <xTaskResumeAll+0x120>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	4a2a      	ldr	r2, [pc, #168]	; (800286c <xTaskResumeAll+0x120>)
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4a27      	ldr	r2, [pc, #156]	; (8002870 <xTaskResumeAll+0x124>)
 80027d4:	441a      	add	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3304      	adds	r3, #4
 80027da:	4619      	mov	r1, r3
 80027dc:	4610      	mov	r0, r2
 80027de:	f7ff fbe2 	bl	8001fa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e6:	4b23      	ldr	r3, [pc, #140]	; (8002874 <xTaskResumeAll+0x128>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d302      	bcc.n	80027f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <xTaskResumeAll+0x12c>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027f6:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <xTaskResumeAll+0x11c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1cc      	bne.n	8002798 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002804:	f000 fa0c 	bl	8002c20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002808:	4b1c      	ldr	r3, [pc, #112]	; (800287c <xTaskResumeAll+0x130>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d010      	beq.n	8002836 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002814:	f000 f836 	bl	8002884 <xTaskIncrementTick>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <xTaskResumeAll+0x12c>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f1      	bne.n	8002814 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <xTaskResumeAll+0x130>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <xTaskResumeAll+0x12c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800283e:	2301      	movs	r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <xTaskResumeAll+0x134>)
 8002844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	f3bf 8f4f 	dsb	sy
 800284e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002852:	f000 fb93 	bl	8002f7c <vPortExitCritical>

	return xAlreadyYielded;
 8002856:	68bb      	ldr	r3, [r7, #8]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000410 	.word	0x20000410
 8002864:	200003e8 	.word	0x200003e8
 8002868:	200003a8 	.word	0x200003a8
 800286c:	200003f0 	.word	0x200003f0
 8002870:	200002ec 	.word	0x200002ec
 8002874:	200002e8 	.word	0x200002e8
 8002878:	200003fc 	.word	0x200003fc
 800287c:	200003f8 	.word	0x200003f8
 8002880:	e000ed04 	.word	0xe000ed04

08002884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800288e:	4b51      	ldr	r3, [pc, #324]	; (80029d4 <xTaskIncrementTick+0x150>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 808d 	bne.w	80029b2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002898:	4b4f      	ldr	r3, [pc, #316]	; (80029d8 <xTaskIncrementTick+0x154>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80028a0:	4a4d      	ldr	r2, [pc, #308]	; (80029d8 <xTaskIncrementTick+0x154>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d120      	bne.n	80028ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80028ac:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <xTaskIncrementTick+0x158>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <xTaskIncrementTick+0x48>
	__asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	603b      	str	r3, [r7, #0]
}
 80028c8:	bf00      	nop
 80028ca:	e7fe      	b.n	80028ca <xTaskIncrementTick+0x46>
 80028cc:	4b43      	ldr	r3, [pc, #268]	; (80029dc <xTaskIncrementTick+0x158>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b43      	ldr	r3, [pc, #268]	; (80029e0 <xTaskIncrementTick+0x15c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a41      	ldr	r2, [pc, #260]	; (80029dc <xTaskIncrementTick+0x158>)
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4a41      	ldr	r2, [pc, #260]	; (80029e0 <xTaskIncrementTick+0x15c>)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b40      	ldr	r3, [pc, #256]	; (80029e4 <xTaskIncrementTick+0x160>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	4a3f      	ldr	r2, [pc, #252]	; (80029e4 <xTaskIncrementTick+0x160>)
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	f000 f999 	bl	8002c20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80028ee:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <xTaskIncrementTick+0x164>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d34d      	bcc.n	8002994 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028f8:	4b38      	ldr	r3, [pc, #224]	; (80029dc <xTaskIncrementTick+0x158>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <xTaskIncrementTick+0x82>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <xTaskIncrementTick+0x84>
 8002906:	2300      	movs	r3, #0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d004      	beq.n	8002916 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800290c:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <xTaskIncrementTick+0x164>)
 800290e:	f04f 32ff 	mov.w	r2, #4294967295
 8002912:	601a      	str	r2, [r3, #0]
					break;
 8002914:	e03e      	b.n	8002994 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002916:	4b31      	ldr	r3, [pc, #196]	; (80029dc <xTaskIncrementTick+0x158>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	d203      	bcs.n	8002936 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800292e:	4a2e      	ldr	r2, [pc, #184]	; (80029e8 <xTaskIncrementTick+0x164>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6013      	str	r3, [r2, #0]
						break;
 8002934:	e02e      	b.n	8002994 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3304      	adds	r3, #4
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fb8e 	bl	800205c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	d004      	beq.n	8002952 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	3318      	adds	r3, #24
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fb85 	bl	800205c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	2201      	movs	r2, #1
 8002958:	409a      	lsls	r2, r3
 800295a:	4b24      	ldr	r3, [pc, #144]	; (80029ec <xTaskIncrementTick+0x168>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4313      	orrs	r3, r2
 8002960:	4a22      	ldr	r2, [pc, #136]	; (80029ec <xTaskIncrementTick+0x168>)
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <xTaskIncrementTick+0x16c>)
 8002972:	441a      	add	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	3304      	adds	r3, #4
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f7ff fb13 	bl	8001fa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <xTaskIncrementTick+0x170>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	429a      	cmp	r2, r3
 800298c:	d3b4      	bcc.n	80028f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800298e:	2301      	movs	r3, #1
 8002990:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002992:	e7b1      	b.n	80028f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002994:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <xTaskIncrementTick+0x170>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299a:	4915      	ldr	r1, [pc, #84]	; (80029f0 <xTaskIncrementTick+0x16c>)
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d907      	bls.n	80029bc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80029ac:	2301      	movs	r3, #1
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e004      	b.n	80029bc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <xTaskIncrementTick+0x174>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <xTaskIncrementTick+0x174>)
 80029ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <xTaskIncrementTick+0x178>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80029c4:	2301      	movs	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80029c8:	697b      	ldr	r3, [r7, #20]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000410 	.word	0x20000410
 80029d8:	200003ec 	.word	0x200003ec
 80029dc:	200003a0 	.word	0x200003a0
 80029e0:	200003a4 	.word	0x200003a4
 80029e4:	20000400 	.word	0x20000400
 80029e8:	20000408 	.word	0x20000408
 80029ec:	200003f0 	.word	0x200003f0
 80029f0:	200002ec 	.word	0x200002ec
 80029f4:	200002e8 	.word	0x200002e8
 80029f8:	200003f8 	.word	0x200003f8
 80029fc:	200003fc 	.word	0x200003fc

08002a00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a06:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <vTaskSwitchContext+0xa0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002a0e:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <vTaskSwitchContext+0xa4>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002a14:	e03f      	b.n	8002a96 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002a16:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <vTaskSwitchContext+0xa4>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <vTaskSwitchContext+0xa8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	fab3 f383 	clz	r3, r3
 8002a28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002a2a:	7afb      	ldrb	r3, [r7, #11]
 8002a2c:	f1c3 031f 	rsb	r3, r3, #31
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	491e      	ldr	r1, [pc, #120]	; (8002aac <vTaskSwitchContext+0xac>)
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	607b      	str	r3, [r7, #4]
}
 8002a58:	bf00      	nop
 8002a5a:	e7fe      	b.n	8002a5a <vTaskSwitchContext+0x5a>
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4a11      	ldr	r2, [pc, #68]	; (8002aac <vTaskSwitchContext+0xac>)
 8002a68:	4413      	add	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d104      	bne.n	8002a8c <vTaskSwitchContext+0x8c>
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <vTaskSwitchContext+0xb0>)
 8002a94:	6013      	str	r3, [r2, #0]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	20000410 	.word	0x20000410
 8002aa4:	200003fc 	.word	0x200003fc
 8002aa8:	200003f0 	.word	0x200003f0
 8002aac:	200002ec 	.word	0x200002ec
 8002ab0:	200002e8 	.word	0x200002e8

08002ab4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002abc:	f000 f852 	bl	8002b64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <prvIdleTask+0x28>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d9f9      	bls.n	8002abc <prvIdleTask+0x8>
			{
				taskYIELD();
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <prvIdleTask+0x2c>)
 8002aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002ad8:	e7f0      	b.n	8002abc <prvIdleTask+0x8>
 8002ada:	bf00      	nop
 8002adc:	200002ec 	.word	0x200002ec
 8002ae0:	e000ed04 	.word	0xe000ed04

08002ae4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	e00c      	b.n	8002b0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <prvInitialiseTaskLists+0x60>)
 8002afc:	4413      	add	r3, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fa26 	bl	8001f50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3301      	adds	r3, #1
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	d9ef      	bls.n	8002af0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b10:	480d      	ldr	r0, [pc, #52]	; (8002b48 <prvInitialiseTaskLists+0x64>)
 8002b12:	f7ff fa1d 	bl	8001f50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b16:	480d      	ldr	r0, [pc, #52]	; (8002b4c <prvInitialiseTaskLists+0x68>)
 8002b18:	f7ff fa1a 	bl	8001f50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b1c:	480c      	ldr	r0, [pc, #48]	; (8002b50 <prvInitialiseTaskLists+0x6c>)
 8002b1e:	f7ff fa17 	bl	8001f50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b22:	480c      	ldr	r0, [pc, #48]	; (8002b54 <prvInitialiseTaskLists+0x70>)
 8002b24:	f7ff fa14 	bl	8001f50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b28:	480b      	ldr	r0, [pc, #44]	; (8002b58 <prvInitialiseTaskLists+0x74>)
 8002b2a:	f7ff fa11 	bl	8001f50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <prvInitialiseTaskLists+0x78>)
 8002b30:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <prvInitialiseTaskLists+0x64>)
 8002b32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <prvInitialiseTaskLists+0x7c>)
 8002b36:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <prvInitialiseTaskLists+0x68>)
 8002b38:	601a      	str	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200002ec 	.word	0x200002ec
 8002b48:	20000378 	.word	0x20000378
 8002b4c:	2000038c 	.word	0x2000038c
 8002b50:	200003a8 	.word	0x200003a8
 8002b54:	200003bc 	.word	0x200003bc
 8002b58:	200003d4 	.word	0x200003d4
 8002b5c:	200003a0 	.word	0x200003a0
 8002b60:	200003a4 	.word	0x200003a4

08002b64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b6a:	e019      	b.n	8002ba0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002b6c:	f000 f9d6 	bl	8002f1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <prvCheckTasksWaitingTermination+0x50>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fa6d 	bl	800205c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <prvCheckTasksWaitingTermination+0x54>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <prvCheckTasksWaitingTermination+0x54>)
 8002b8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <prvCheckTasksWaitingTermination+0x58>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <prvCheckTasksWaitingTermination+0x58>)
 8002b94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b96:	f000 f9f1 	bl	8002f7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f810 	bl	8002bc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <prvCheckTasksWaitingTermination+0x58>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e1      	bne.n	8002b6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200003bc 	.word	0x200003bc
 8002bb8:	200003e8 	.word	0x200003e8
 8002bbc:	200003d0 	.word	0x200003d0

08002bc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d108      	bne.n	8002be4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fb26 	bl	8003228 <vPortFree>
				vPortFree( pxTCB );
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fb23 	bl	8003228 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002be2:	e018      	b.n	8002c16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d103      	bne.n	8002bf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fb1a 	bl	8003228 <vPortFree>
	}
 8002bf4:	e00f      	b.n	8002c16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d00a      	beq.n	8002c16 <prvDeleteTCB+0x56>
	__asm volatile
 8002c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	60fb      	str	r3, [r7, #12]
}
 8002c12:	bf00      	nop
 8002c14:	e7fe      	b.n	8002c14 <prvDeleteTCB+0x54>
	}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <prvResetNextTaskUnblockTime+0x40>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <prvResetNextTaskUnblockTime+0x14>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <prvResetNextTaskUnblockTime+0x16>
 8002c34:	2300      	movs	r3, #0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d004      	beq.n	8002c44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <prvResetNextTaskUnblockTime+0x44>)
 8002c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c42:	e008      	b.n	8002c56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <prvResetNextTaskUnblockTime+0x40>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <prvResetNextTaskUnblockTime+0x44>)
 8002c54:	6013      	str	r3, [r2, #0]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	200003a0 	.word	0x200003a0
 8002c64:	20000408 	.word	0x20000408

08002c68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002c72:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c78:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff f9ec 	bl	800205c <uxListRemove>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10b      	bne.n	8002ca2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	2201      	movs	r2, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	4a20      	ldr	r2, [pc, #128]	; (8002d20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ca0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d10a      	bne.n	8002cc0 <prvAddCurrentTaskToDelayedList+0x58>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	481a      	ldr	r0, [pc, #104]	; (8002d24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002cba:	f7ff f974 	bl	8001fa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002cbe:	e026      	b.n	8002d0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002cc8:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d209      	bcs.n	8002cec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f7ff f981 	bl	8001fec <vListInsert>
}
 8002cea:	e010      	b.n	8002d0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f7ff f977 	bl	8001fec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d202      	bcs.n	8002d0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002d08:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6013      	str	r3, [r2, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200003ec 	.word	0x200003ec
 8002d1c:	200002e8 	.word	0x200002e8
 8002d20:	200003f0 	.word	0x200003f0
 8002d24:	200003d4 	.word	0x200003d4
 8002d28:	200003a4 	.word	0x200003a4
 8002d2c:	200003a0 	.word	0x200003a0
 8002d30:	20000408 	.word	0x20000408

08002d34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3b04      	subs	r3, #4
 8002d44:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3b04      	subs	r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f023 0201 	bic.w	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3b04      	subs	r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d64:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <pxPortInitialiseStack+0x54>)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3b14      	subs	r3, #20
 8002d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3b20      	subs	r3, #32
 8002d7a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	08002d8d 	.word	0x08002d8d

08002d8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <prvTaskExitError+0x54>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9e:	d00a      	beq.n	8002db6 <prvTaskExitError+0x2a>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	60fb      	str	r3, [r7, #12]
}
 8002db2:	bf00      	nop
 8002db4:	e7fe      	b.n	8002db4 <prvTaskExitError+0x28>
	__asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	60bb      	str	r3, [r7, #8]
}
 8002dc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002dca:	bf00      	nop
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0fc      	beq.n	8002dcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002dd2:	bf00      	nop
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	2000000c 	.word	0x2000000c
	...

08002df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <pxCurrentTCBConst2>)
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	6808      	ldr	r0, [r1, #0]
 8002df6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002dfa:	f380 8809 	msr	PSP, r0
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f04f 0000 	mov.w	r0, #0
 8002e06:	f380 8811 	msr	BASEPRI, r0
 8002e0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002e0e:	4770      	bx	lr

08002e10 <pxCurrentTCBConst2>:
 8002e10:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop

08002e18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002e18:	4806      	ldr	r0, [pc, #24]	; (8002e34 <prvPortStartFirstTask+0x1c>)
 8002e1a:	6800      	ldr	r0, [r0, #0]
 8002e1c:	6800      	ldr	r0, [r0, #0]
 8002e1e:	f380 8808 	msr	MSP, r0
 8002e22:	b662      	cpsie	i
 8002e24:	b661      	cpsie	f
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	df00      	svc	0
 8002e30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002e32:	bf00      	nop
 8002e34:	e000ed08 	.word	0xe000ed08

08002e38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e3e:	4b32      	ldr	r3, [pc, #200]	; (8002f08 <xPortStartScheduler+0xd0>)
 8002e40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	22ff      	movs	r2, #255	; 0xff
 8002e4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <xPortStartScheduler+0xd4>)
 8002e64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e66:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <xPortStartScheduler+0xd8>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e6c:	e009      	b.n	8002e82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002e6e:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <xPortStartScheduler+0xd8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <xPortStartScheduler+0xd8>)
 8002e76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b80      	cmp	r3, #128	; 0x80
 8002e8c:	d0ef      	beq.n	8002e6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e8e:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <xPortStartScheduler+0xd8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f1c3 0307 	rsb	r3, r3, #7
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d00a      	beq.n	8002eb0 <xPortStartScheduler+0x78>
	__asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	60bb      	str	r3, [r7, #8]
}
 8002eac:	bf00      	nop
 8002eae:	e7fe      	b.n	8002eae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002eb0:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <xPortStartScheduler+0xd8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	4a16      	ldr	r2, [pc, #88]	; (8002f10 <xPortStartScheduler+0xd8>)
 8002eb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <xPortStartScheduler+0xd8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ec2:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <xPortStartScheduler+0xd8>)
 8002ec4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <xPortStartScheduler+0xdc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <xPortStartScheduler+0xdc>)
 8002ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ed8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <xPortStartScheduler+0xdc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a0d      	ldr	r2, [pc, #52]	; (8002f14 <xPortStartScheduler+0xdc>)
 8002ee0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ee4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002ee6:	f000 f8b9 	bl	800305c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <xPortStartScheduler+0xe0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ef0:	f7ff ff92 	bl	8002e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002ef4:	f7ff fd84 	bl	8002a00 <vTaskSwitchContext>
	prvTaskExitError();
 8002ef8:	f7ff ff48 	bl	8002d8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	e000e400 	.word	0xe000e400
 8002f0c:	20000414 	.word	0x20000414
 8002f10:	20000418 	.word	0x20000418
 8002f14:	e000ed20 	.word	0xe000ed20
 8002f18:	2000000c 	.word	0x2000000c

08002f1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	607b      	str	r3, [r7, #4]
}
 8002f34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <vPortEnterCritical+0x58>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <vPortEnterCritical+0x58>)
 8002f3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <vPortEnterCritical+0x58>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d10f      	bne.n	8002f68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <vPortEnterCritical+0x5c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <vPortEnterCritical+0x4c>
	__asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	603b      	str	r3, [r7, #0]
}
 8002f64:	bf00      	nop
 8002f66:	e7fe      	b.n	8002f66 <vPortEnterCritical+0x4a>
	}
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	2000000c 	.word	0x2000000c
 8002f78:	e000ed04 	.word	0xe000ed04

08002f7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <vPortExitCritical+0x4c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <vPortExitCritical+0x24>
	__asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	607b      	str	r3, [r7, #4]
}
 8002f9c:	bf00      	nop
 8002f9e:	e7fe      	b.n	8002f9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <vPortExitCritical+0x4c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	4a08      	ldr	r2, [pc, #32]	; (8002fc8 <vPortExitCritical+0x4c>)
 8002fa8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <vPortExitCritical+0x4c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <vPortExitCritical+0x42>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fbc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	2000000c 	.word	0x2000000c
 8002fcc:	00000000 	.word	0x00000000

08002fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002fd0:	f3ef 8009 	mrs	r0, PSP
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <pxCurrentTCBConst>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002fe0:	6010      	str	r0, [r2, #0]
 8002fe2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002fe6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002fea:	f380 8811 	msr	BASEPRI, r0
 8002fee:	f7ff fd07 	bl	8002a00 <vTaskSwitchContext>
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f380 8811 	msr	BASEPRI, r0
 8002ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	6808      	ldr	r0, [r1, #0]
 8003002:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003006:	f380 8809 	msr	PSP, r0
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	4770      	bx	lr

08003010 <pxCurrentTCBConst>:
 8003010:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop

08003018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	607b      	str	r3, [r7, #4]
}
 8003030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003032:	f7ff fc27 	bl	8002884 <xTaskIncrementTick>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <SysTick_Handler+0x40>)
 800303e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	2300      	movs	r3, #0
 8003046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	f383 8811 	msr	BASEPRI, r3
}
 800304e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	e000ed04 	.word	0xe000ed04

0800305c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <vPortSetupTimerInterrupt+0x30>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <vPortSetupTimerInterrupt+0x34>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <vPortSetupTimerInterrupt+0x38>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a09      	ldr	r2, [pc, #36]	; (8003098 <vPortSetupTimerInterrupt+0x3c>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	4a08      	ldr	r2, [pc, #32]	; (800309c <vPortSetupTimerInterrupt+0x40>)
 800307a:	3b01      	subs	r3, #1
 800307c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800307e:	4b03      	ldr	r3, [pc, #12]	; (800308c <vPortSetupTimerInterrupt+0x30>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	e000e010 	.word	0xe000e010
 8003090:	e000e018 	.word	0xe000e018
 8003094:	20000000 	.word	0x20000000
 8003098:	10624dd3 	.word	0x10624dd3
 800309c:	e000e014 	.word	0xe000e014

080030a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80030ac:	f7ff fb40 	bl	8002730 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80030b0:	4b58      	ldr	r3, [pc, #352]	; (8003214 <pvPortMalloc+0x174>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80030b8:	f000 f910 	bl	80032dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030bc:	4b56      	ldr	r3, [pc, #344]	; (8003218 <pvPortMalloc+0x178>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 808e 	bne.w	80031e6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01d      	beq.n	800310c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80030d0:	2208      	movs	r2, #8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d014      	beq.n	800310c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f023 0307 	bic.w	r3, r3, #7
 80030e8:	3308      	adds	r3, #8
 80030ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <pvPortMalloc+0x6c>
	__asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	617b      	str	r3, [r7, #20]
}
 8003108:	bf00      	nop
 800310a:	e7fe      	b.n	800310a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d069      	beq.n	80031e6 <pvPortMalloc+0x146>
 8003112:	4b42      	ldr	r3, [pc, #264]	; (800321c <pvPortMalloc+0x17c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	429a      	cmp	r2, r3
 800311a:	d864      	bhi.n	80031e6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800311c:	4b40      	ldr	r3, [pc, #256]	; (8003220 <pvPortMalloc+0x180>)
 800311e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003120:	4b3f      	ldr	r3, [pc, #252]	; (8003220 <pvPortMalloc+0x180>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003126:	e004      	b.n	8003132 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	429a      	cmp	r2, r3
 800313a:	d903      	bls.n	8003144 <pvPortMalloc+0xa4>
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f1      	bne.n	8003128 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003144:	4b33      	ldr	r3, [pc, #204]	; (8003214 <pvPortMalloc+0x174>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314a:	429a      	cmp	r2, r3
 800314c:	d04b      	beq.n	80031e6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2208      	movs	r2, #8
 8003154:	4413      	add	r3, r2
 8003156:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1ad2      	subs	r2, r2, r3
 8003168:	2308      	movs	r3, #8
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	429a      	cmp	r2, r3
 800316e:	d91f      	bls.n	80031b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <pvPortMalloc+0xf8>
	__asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	613b      	str	r3, [r7, #16]
}
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	1ad2      	subs	r2, r2, r3
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031aa:	69b8      	ldr	r0, [r7, #24]
 80031ac:	f000 f8f8 	bl	80033a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <pvPortMalloc+0x17c>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	4a18      	ldr	r2, [pc, #96]	; (800321c <pvPortMalloc+0x17c>)
 80031bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <pvPortMalloc+0x17c>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <pvPortMalloc+0x184>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d203      	bcs.n	80031d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <pvPortMalloc+0x17c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a15      	ldr	r2, [pc, #84]	; (8003224 <pvPortMalloc+0x184>)
 80031d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <pvPortMalloc+0x178>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	431a      	orrs	r2, r3
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80031e6:	f7ff fab1 	bl	800274c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <pvPortMalloc+0x16a>
	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	60fb      	str	r3, [r7, #12]
}
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <pvPortMalloc+0x168>
	return pvReturn;
 800320a:	69fb      	ldr	r3, [r7, #28]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3728      	adds	r7, #40	; 0x28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20001024 	.word	0x20001024
 8003218:	20001030 	.word	0x20001030
 800321c:	20001028 	.word	0x20001028
 8003220:	2000101c 	.word	0x2000101c
 8003224:	2000102c 	.word	0x2000102c

08003228 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d048      	beq.n	80032cc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800323a:	2308      	movs	r3, #8
 800323c:	425b      	negs	r3, r3
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4413      	add	r3, r2
 8003242:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <vPortFree+0xac>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4013      	ands	r3, r2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <vPortFree+0x44>
	__asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	60fb      	str	r3, [r7, #12]
}
 8003268:	bf00      	nop
 800326a:	e7fe      	b.n	800326a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <vPortFree+0x62>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	60bb      	str	r3, [r7, #8]
}
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <vPortFree+0xac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d019      	beq.n	80032cc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d115      	bne.n	80032cc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <vPortFree+0xac>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	401a      	ands	r2, r3
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80032b0:	f7ff fa3e 	bl	8002730 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <vPortFree+0xb0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4413      	add	r3, r2
 80032be:	4a06      	ldr	r2, [pc, #24]	; (80032d8 <vPortFree+0xb0>)
 80032c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032c2:	6938      	ldr	r0, [r7, #16]
 80032c4:	f000 f86c 	bl	80033a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80032c8:	f7ff fa40 	bl	800274c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80032cc:	bf00      	nop
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20001030 	.word	0x20001030
 80032d8:	20001028 	.word	0x20001028

080032dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <prvHeapInit+0xac>)
 80032ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00c      	beq.n	8003310 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3307      	adds	r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0307 	bic.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <prvHeapInit+0xac>)
 800330c:	4413      	add	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003314:	4a1d      	ldr	r2, [pc, #116]	; (800338c <prvHeapInit+0xb0>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800331a:	4b1c      	ldr	r3, [pc, #112]	; (800338c <prvHeapInit+0xb0>)
 800331c:	2200      	movs	r2, #0
 800331e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4413      	add	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003328:	2208      	movs	r2, #8
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0307 	bic.w	r3, r3, #7
 8003336:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a15      	ldr	r2, [pc, #84]	; (8003390 <prvHeapInit+0xb4>)
 800333c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <prvHeapInit+0xb4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <prvHeapInit+0xb4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	1ad2      	subs	r2, r2, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <prvHeapInit+0xb4>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <prvHeapInit+0xb8>)
 800336a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4a09      	ldr	r2, [pc, #36]	; (8003398 <prvHeapInit+0xbc>)
 8003372:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <prvHeapInit+0xc0>)
 8003376:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800337a:	601a      	str	r2, [r3, #0]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	2000041c 	.word	0x2000041c
 800338c:	2000101c 	.word	0x2000101c
 8003390:	20001024 	.word	0x20001024
 8003394:	2000102c 	.word	0x2000102c
 8003398:	20001028 	.word	0x20001028
 800339c:	20001030 	.word	0x20001030

080033a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033a8:	4b27      	ldr	r3, [pc, #156]	; (8003448 <prvInsertBlockIntoFreeList+0xa8>)
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	e002      	b.n	80033b4 <prvInsertBlockIntoFreeList+0x14>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d8f7      	bhi.n	80033ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	4413      	add	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d108      	bne.n	80033e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	441a      	add	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	441a      	add	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d118      	bne.n	8003428 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b14      	ldr	r3, [pc, #80]	; (800344c <prvInsertBlockIntoFreeList+0xac>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d00d      	beq.n	800341e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	441a      	add	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e008      	b.n	8003430 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <prvInsertBlockIntoFreeList+0xac>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	e003      	b.n	8003430 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	d002      	beq.n	800343e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	2000101c 	.word	0x2000101c
 800344c:	20001024 	.word	0x20001024

08003450 <__errno>:
 8003450:	4b01      	ldr	r3, [pc, #4]	; (8003458 <__errno+0x8>)
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000010 	.word	0x20000010

0800345c <__libc_init_array>:
 800345c:	b570      	push	{r4, r5, r6, lr}
 800345e:	2600      	movs	r6, #0
 8003460:	4d0c      	ldr	r5, [pc, #48]	; (8003494 <__libc_init_array+0x38>)
 8003462:	4c0d      	ldr	r4, [pc, #52]	; (8003498 <__libc_init_array+0x3c>)
 8003464:	1b64      	subs	r4, r4, r5
 8003466:	10a4      	asrs	r4, r4, #2
 8003468:	42a6      	cmp	r6, r4
 800346a:	d109      	bne.n	8003480 <__libc_init_array+0x24>
 800346c:	f000 ff82 	bl	8004374 <_init>
 8003470:	2600      	movs	r6, #0
 8003472:	4d0a      	ldr	r5, [pc, #40]	; (800349c <__libc_init_array+0x40>)
 8003474:	4c0a      	ldr	r4, [pc, #40]	; (80034a0 <__libc_init_array+0x44>)
 8003476:	1b64      	subs	r4, r4, r5
 8003478:	10a4      	asrs	r4, r4, #2
 800347a:	42a6      	cmp	r6, r4
 800347c:	d105      	bne.n	800348a <__libc_init_array+0x2e>
 800347e:	bd70      	pop	{r4, r5, r6, pc}
 8003480:	f855 3b04 	ldr.w	r3, [r5], #4
 8003484:	4798      	blx	r3
 8003486:	3601      	adds	r6, #1
 8003488:	e7ee      	b.n	8003468 <__libc_init_array+0xc>
 800348a:	f855 3b04 	ldr.w	r3, [r5], #4
 800348e:	4798      	blx	r3
 8003490:	3601      	adds	r6, #1
 8003492:	e7f2      	b.n	800347a <__libc_init_array+0x1e>
 8003494:	080044b8 	.word	0x080044b8
 8003498:	080044b8 	.word	0x080044b8
 800349c:	080044b8 	.word	0x080044b8
 80034a0:	080044bc 	.word	0x080044bc

080034a4 <memset>:
 80034a4:	4603      	mov	r3, r0
 80034a6:	4402      	add	r2, r0
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d100      	bne.n	80034ae <memset+0xa>
 80034ac:	4770      	bx	lr
 80034ae:	f803 1b01 	strb.w	r1, [r3], #1
 80034b2:	e7f9      	b.n	80034a8 <memset+0x4>

080034b4 <iprintf>:
 80034b4:	b40f      	push	{r0, r1, r2, r3}
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <iprintf+0x2c>)
 80034b8:	b513      	push	{r0, r1, r4, lr}
 80034ba:	681c      	ldr	r4, [r3, #0]
 80034bc:	b124      	cbz	r4, 80034c8 <iprintf+0x14>
 80034be:	69a3      	ldr	r3, [r4, #24]
 80034c0:	b913      	cbnz	r3, 80034c8 <iprintf+0x14>
 80034c2:	4620      	mov	r0, r4
 80034c4:	f000 f866 	bl	8003594 <__sinit>
 80034c8:	ab05      	add	r3, sp, #20
 80034ca:	4620      	mov	r0, r4
 80034cc:	9a04      	ldr	r2, [sp, #16]
 80034ce:	68a1      	ldr	r1, [r4, #8]
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	f000 f981 	bl	80037d8 <_vfiprintf_r>
 80034d6:	b002      	add	sp, #8
 80034d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034dc:	b004      	add	sp, #16
 80034de:	4770      	bx	lr
 80034e0:	20000010 	.word	0x20000010

080034e4 <std>:
 80034e4:	2300      	movs	r3, #0
 80034e6:	b510      	push	{r4, lr}
 80034e8:	4604      	mov	r4, r0
 80034ea:	e9c0 3300 	strd	r3, r3, [r0]
 80034ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034f2:	6083      	str	r3, [r0, #8]
 80034f4:	8181      	strh	r1, [r0, #12]
 80034f6:	6643      	str	r3, [r0, #100]	; 0x64
 80034f8:	81c2      	strh	r2, [r0, #14]
 80034fa:	6183      	str	r3, [r0, #24]
 80034fc:	4619      	mov	r1, r3
 80034fe:	2208      	movs	r2, #8
 8003500:	305c      	adds	r0, #92	; 0x5c
 8003502:	f7ff ffcf 	bl	80034a4 <memset>
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <std+0x38>)
 8003508:	6224      	str	r4, [r4, #32]
 800350a:	6263      	str	r3, [r4, #36]	; 0x24
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <std+0x3c>)
 800350e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <std+0x40>)
 8003512:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <std+0x44>)
 8003516:	6323      	str	r3, [r4, #48]	; 0x30
 8003518:	bd10      	pop	{r4, pc}
 800351a:	bf00      	nop
 800351c:	08003d85 	.word	0x08003d85
 8003520:	08003da7 	.word	0x08003da7
 8003524:	08003ddf 	.word	0x08003ddf
 8003528:	08003e03 	.word	0x08003e03

0800352c <_cleanup_r>:
 800352c:	4901      	ldr	r1, [pc, #4]	; (8003534 <_cleanup_r+0x8>)
 800352e:	f000 b8af 	b.w	8003690 <_fwalk_reent>
 8003532:	bf00      	nop
 8003534:	080040dd 	.word	0x080040dd

08003538 <__sfmoreglue>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	2568      	movs	r5, #104	; 0x68
 800353c:	1e4a      	subs	r2, r1, #1
 800353e:	4355      	muls	r5, r2
 8003540:	460e      	mov	r6, r1
 8003542:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003546:	f000 f8c5 	bl	80036d4 <_malloc_r>
 800354a:	4604      	mov	r4, r0
 800354c:	b140      	cbz	r0, 8003560 <__sfmoreglue+0x28>
 800354e:	2100      	movs	r1, #0
 8003550:	e9c0 1600 	strd	r1, r6, [r0]
 8003554:	300c      	adds	r0, #12
 8003556:	60a0      	str	r0, [r4, #8]
 8003558:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800355c:	f7ff ffa2 	bl	80034a4 <memset>
 8003560:	4620      	mov	r0, r4
 8003562:	bd70      	pop	{r4, r5, r6, pc}

08003564 <__sfp_lock_acquire>:
 8003564:	4801      	ldr	r0, [pc, #4]	; (800356c <__sfp_lock_acquire+0x8>)
 8003566:	f000 b8b3 	b.w	80036d0 <__retarget_lock_acquire_recursive>
 800356a:	bf00      	nop
 800356c:	200010dc 	.word	0x200010dc

08003570 <__sfp_lock_release>:
 8003570:	4801      	ldr	r0, [pc, #4]	; (8003578 <__sfp_lock_release+0x8>)
 8003572:	f000 b8ae 	b.w	80036d2 <__retarget_lock_release_recursive>
 8003576:	bf00      	nop
 8003578:	200010dc 	.word	0x200010dc

0800357c <__sinit_lock_acquire>:
 800357c:	4801      	ldr	r0, [pc, #4]	; (8003584 <__sinit_lock_acquire+0x8>)
 800357e:	f000 b8a7 	b.w	80036d0 <__retarget_lock_acquire_recursive>
 8003582:	bf00      	nop
 8003584:	200010d7 	.word	0x200010d7

08003588 <__sinit_lock_release>:
 8003588:	4801      	ldr	r0, [pc, #4]	; (8003590 <__sinit_lock_release+0x8>)
 800358a:	f000 b8a2 	b.w	80036d2 <__retarget_lock_release_recursive>
 800358e:	bf00      	nop
 8003590:	200010d7 	.word	0x200010d7

08003594 <__sinit>:
 8003594:	b510      	push	{r4, lr}
 8003596:	4604      	mov	r4, r0
 8003598:	f7ff fff0 	bl	800357c <__sinit_lock_acquire>
 800359c:	69a3      	ldr	r3, [r4, #24]
 800359e:	b11b      	cbz	r3, 80035a8 <__sinit+0x14>
 80035a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035a4:	f7ff bff0 	b.w	8003588 <__sinit_lock_release>
 80035a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035ac:	6523      	str	r3, [r4, #80]	; 0x50
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <__sinit+0x68>)
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <__sinit+0x6c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80035b6:	42a3      	cmp	r3, r4
 80035b8:	bf08      	it	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	4620      	mov	r0, r4
 80035be:	bf08      	it	eq
 80035c0:	61a3      	streq	r3, [r4, #24]
 80035c2:	f000 f81f 	bl	8003604 <__sfp>
 80035c6:	6060      	str	r0, [r4, #4]
 80035c8:	4620      	mov	r0, r4
 80035ca:	f000 f81b 	bl	8003604 <__sfp>
 80035ce:	60a0      	str	r0, [r4, #8]
 80035d0:	4620      	mov	r0, r4
 80035d2:	f000 f817 	bl	8003604 <__sfp>
 80035d6:	2200      	movs	r2, #0
 80035d8:	2104      	movs	r1, #4
 80035da:	60e0      	str	r0, [r4, #12]
 80035dc:	6860      	ldr	r0, [r4, #4]
 80035de:	f7ff ff81 	bl	80034e4 <std>
 80035e2:	2201      	movs	r2, #1
 80035e4:	2109      	movs	r1, #9
 80035e6:	68a0      	ldr	r0, [r4, #8]
 80035e8:	f7ff ff7c 	bl	80034e4 <std>
 80035ec:	2202      	movs	r2, #2
 80035ee:	2112      	movs	r1, #18
 80035f0:	68e0      	ldr	r0, [r4, #12]
 80035f2:	f7ff ff77 	bl	80034e4 <std>
 80035f6:	2301      	movs	r3, #1
 80035f8:	61a3      	str	r3, [r4, #24]
 80035fa:	e7d1      	b.n	80035a0 <__sinit+0xc>
 80035fc:	08004420 	.word	0x08004420
 8003600:	0800352d 	.word	0x0800352d

08003604 <__sfp>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	4607      	mov	r7, r0
 8003608:	f7ff ffac 	bl	8003564 <__sfp_lock_acquire>
 800360c:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <__sfp+0x84>)
 800360e:	681e      	ldr	r6, [r3, #0]
 8003610:	69b3      	ldr	r3, [r6, #24]
 8003612:	b913      	cbnz	r3, 800361a <__sfp+0x16>
 8003614:	4630      	mov	r0, r6
 8003616:	f7ff ffbd 	bl	8003594 <__sinit>
 800361a:	3648      	adds	r6, #72	; 0x48
 800361c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003620:	3b01      	subs	r3, #1
 8003622:	d503      	bpl.n	800362c <__sfp+0x28>
 8003624:	6833      	ldr	r3, [r6, #0]
 8003626:	b30b      	cbz	r3, 800366c <__sfp+0x68>
 8003628:	6836      	ldr	r6, [r6, #0]
 800362a:	e7f7      	b.n	800361c <__sfp+0x18>
 800362c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003630:	b9d5      	cbnz	r5, 8003668 <__sfp+0x64>
 8003632:	4b16      	ldr	r3, [pc, #88]	; (800368c <__sfp+0x88>)
 8003634:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003638:	60e3      	str	r3, [r4, #12]
 800363a:	6665      	str	r5, [r4, #100]	; 0x64
 800363c:	f000 f847 	bl	80036ce <__retarget_lock_init_recursive>
 8003640:	f7ff ff96 	bl	8003570 <__sfp_lock_release>
 8003644:	2208      	movs	r2, #8
 8003646:	4629      	mov	r1, r5
 8003648:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800364c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003650:	6025      	str	r5, [r4, #0]
 8003652:	61a5      	str	r5, [r4, #24]
 8003654:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003658:	f7ff ff24 	bl	80034a4 <memset>
 800365c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003660:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003664:	4620      	mov	r0, r4
 8003666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003668:	3468      	adds	r4, #104	; 0x68
 800366a:	e7d9      	b.n	8003620 <__sfp+0x1c>
 800366c:	2104      	movs	r1, #4
 800366e:	4638      	mov	r0, r7
 8003670:	f7ff ff62 	bl	8003538 <__sfmoreglue>
 8003674:	4604      	mov	r4, r0
 8003676:	6030      	str	r0, [r6, #0]
 8003678:	2800      	cmp	r0, #0
 800367a:	d1d5      	bne.n	8003628 <__sfp+0x24>
 800367c:	f7ff ff78 	bl	8003570 <__sfp_lock_release>
 8003680:	230c      	movs	r3, #12
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	e7ee      	b.n	8003664 <__sfp+0x60>
 8003686:	bf00      	nop
 8003688:	08004420 	.word	0x08004420
 800368c:	ffff0001 	.word	0xffff0001

08003690 <_fwalk_reent>:
 8003690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003694:	4606      	mov	r6, r0
 8003696:	4688      	mov	r8, r1
 8003698:	2700      	movs	r7, #0
 800369a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800369e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036a2:	f1b9 0901 	subs.w	r9, r9, #1
 80036a6:	d505      	bpl.n	80036b4 <_fwalk_reent+0x24>
 80036a8:	6824      	ldr	r4, [r4, #0]
 80036aa:	2c00      	cmp	r4, #0
 80036ac:	d1f7      	bne.n	800369e <_fwalk_reent+0xe>
 80036ae:	4638      	mov	r0, r7
 80036b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036b4:	89ab      	ldrh	r3, [r5, #12]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d907      	bls.n	80036ca <_fwalk_reent+0x3a>
 80036ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036be:	3301      	adds	r3, #1
 80036c0:	d003      	beq.n	80036ca <_fwalk_reent+0x3a>
 80036c2:	4629      	mov	r1, r5
 80036c4:	4630      	mov	r0, r6
 80036c6:	47c0      	blx	r8
 80036c8:	4307      	orrs	r7, r0
 80036ca:	3568      	adds	r5, #104	; 0x68
 80036cc:	e7e9      	b.n	80036a2 <_fwalk_reent+0x12>

080036ce <__retarget_lock_init_recursive>:
 80036ce:	4770      	bx	lr

080036d0 <__retarget_lock_acquire_recursive>:
 80036d0:	4770      	bx	lr

080036d2 <__retarget_lock_release_recursive>:
 80036d2:	4770      	bx	lr

080036d4 <_malloc_r>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	1ccd      	adds	r5, r1, #3
 80036d8:	f025 0503 	bic.w	r5, r5, #3
 80036dc:	3508      	adds	r5, #8
 80036de:	2d0c      	cmp	r5, #12
 80036e0:	bf38      	it	cc
 80036e2:	250c      	movcc	r5, #12
 80036e4:	2d00      	cmp	r5, #0
 80036e6:	4606      	mov	r6, r0
 80036e8:	db01      	blt.n	80036ee <_malloc_r+0x1a>
 80036ea:	42a9      	cmp	r1, r5
 80036ec:	d903      	bls.n	80036f6 <_malloc_r+0x22>
 80036ee:	230c      	movs	r3, #12
 80036f0:	6033      	str	r3, [r6, #0]
 80036f2:	2000      	movs	r0, #0
 80036f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f6:	f000 fdb1 	bl	800425c <__malloc_lock>
 80036fa:	4921      	ldr	r1, [pc, #132]	; (8003780 <_malloc_r+0xac>)
 80036fc:	680a      	ldr	r2, [r1, #0]
 80036fe:	4614      	mov	r4, r2
 8003700:	b99c      	cbnz	r4, 800372a <_malloc_r+0x56>
 8003702:	4f20      	ldr	r7, [pc, #128]	; (8003784 <_malloc_r+0xb0>)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	b923      	cbnz	r3, 8003712 <_malloc_r+0x3e>
 8003708:	4621      	mov	r1, r4
 800370a:	4630      	mov	r0, r6
 800370c:	f000 fb2a 	bl	8003d64 <_sbrk_r>
 8003710:	6038      	str	r0, [r7, #0]
 8003712:	4629      	mov	r1, r5
 8003714:	4630      	mov	r0, r6
 8003716:	f000 fb25 	bl	8003d64 <_sbrk_r>
 800371a:	1c43      	adds	r3, r0, #1
 800371c:	d123      	bne.n	8003766 <_malloc_r+0x92>
 800371e:	230c      	movs	r3, #12
 8003720:	4630      	mov	r0, r6
 8003722:	6033      	str	r3, [r6, #0]
 8003724:	f000 fda0 	bl	8004268 <__malloc_unlock>
 8003728:	e7e3      	b.n	80036f2 <_malloc_r+0x1e>
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	1b5b      	subs	r3, r3, r5
 800372e:	d417      	bmi.n	8003760 <_malloc_r+0x8c>
 8003730:	2b0b      	cmp	r3, #11
 8003732:	d903      	bls.n	800373c <_malloc_r+0x68>
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	441c      	add	r4, r3
 8003738:	6025      	str	r5, [r4, #0]
 800373a:	e004      	b.n	8003746 <_malloc_r+0x72>
 800373c:	6863      	ldr	r3, [r4, #4]
 800373e:	42a2      	cmp	r2, r4
 8003740:	bf0c      	ite	eq
 8003742:	600b      	streq	r3, [r1, #0]
 8003744:	6053      	strne	r3, [r2, #4]
 8003746:	4630      	mov	r0, r6
 8003748:	f000 fd8e 	bl	8004268 <__malloc_unlock>
 800374c:	f104 000b 	add.w	r0, r4, #11
 8003750:	1d23      	adds	r3, r4, #4
 8003752:	f020 0007 	bic.w	r0, r0, #7
 8003756:	1ac2      	subs	r2, r0, r3
 8003758:	d0cc      	beq.n	80036f4 <_malloc_r+0x20>
 800375a:	1a1b      	subs	r3, r3, r0
 800375c:	50a3      	str	r3, [r4, r2]
 800375e:	e7c9      	b.n	80036f4 <_malloc_r+0x20>
 8003760:	4622      	mov	r2, r4
 8003762:	6864      	ldr	r4, [r4, #4]
 8003764:	e7cc      	b.n	8003700 <_malloc_r+0x2c>
 8003766:	1cc4      	adds	r4, r0, #3
 8003768:	f024 0403 	bic.w	r4, r4, #3
 800376c:	42a0      	cmp	r0, r4
 800376e:	d0e3      	beq.n	8003738 <_malloc_r+0x64>
 8003770:	1a21      	subs	r1, r4, r0
 8003772:	4630      	mov	r0, r6
 8003774:	f000 faf6 	bl	8003d64 <_sbrk_r>
 8003778:	3001      	adds	r0, #1
 800377a:	d1dd      	bne.n	8003738 <_malloc_r+0x64>
 800377c:	e7cf      	b.n	800371e <_malloc_r+0x4a>
 800377e:	bf00      	nop
 8003780:	20001034 	.word	0x20001034
 8003784:	20001038 	.word	0x20001038

08003788 <__sfputc_r>:
 8003788:	6893      	ldr	r3, [r2, #8]
 800378a:	b410      	push	{r4}
 800378c:	3b01      	subs	r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	6093      	str	r3, [r2, #8]
 8003792:	da07      	bge.n	80037a4 <__sfputc_r+0x1c>
 8003794:	6994      	ldr	r4, [r2, #24]
 8003796:	42a3      	cmp	r3, r4
 8003798:	db01      	blt.n	800379e <__sfputc_r+0x16>
 800379a:	290a      	cmp	r1, #10
 800379c:	d102      	bne.n	80037a4 <__sfputc_r+0x1c>
 800379e:	bc10      	pop	{r4}
 80037a0:	f000 bb34 	b.w	8003e0c <__swbuf_r>
 80037a4:	6813      	ldr	r3, [r2, #0]
 80037a6:	1c58      	adds	r0, r3, #1
 80037a8:	6010      	str	r0, [r2, #0]
 80037aa:	7019      	strb	r1, [r3, #0]
 80037ac:	4608      	mov	r0, r1
 80037ae:	bc10      	pop	{r4}
 80037b0:	4770      	bx	lr

080037b2 <__sfputs_r>:
 80037b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b4:	4606      	mov	r6, r0
 80037b6:	460f      	mov	r7, r1
 80037b8:	4614      	mov	r4, r2
 80037ba:	18d5      	adds	r5, r2, r3
 80037bc:	42ac      	cmp	r4, r5
 80037be:	d101      	bne.n	80037c4 <__sfputs_r+0x12>
 80037c0:	2000      	movs	r0, #0
 80037c2:	e007      	b.n	80037d4 <__sfputs_r+0x22>
 80037c4:	463a      	mov	r2, r7
 80037c6:	4630      	mov	r0, r6
 80037c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037cc:	f7ff ffdc 	bl	8003788 <__sfputc_r>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d1f3      	bne.n	80037bc <__sfputs_r+0xa>
 80037d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037d8 <_vfiprintf_r>:
 80037d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037dc:	460d      	mov	r5, r1
 80037de:	4614      	mov	r4, r2
 80037e0:	4698      	mov	r8, r3
 80037e2:	4606      	mov	r6, r0
 80037e4:	b09d      	sub	sp, #116	; 0x74
 80037e6:	b118      	cbz	r0, 80037f0 <_vfiprintf_r+0x18>
 80037e8:	6983      	ldr	r3, [r0, #24]
 80037ea:	b90b      	cbnz	r3, 80037f0 <_vfiprintf_r+0x18>
 80037ec:	f7ff fed2 	bl	8003594 <__sinit>
 80037f0:	4b89      	ldr	r3, [pc, #548]	; (8003a18 <_vfiprintf_r+0x240>)
 80037f2:	429d      	cmp	r5, r3
 80037f4:	d11b      	bne.n	800382e <_vfiprintf_r+0x56>
 80037f6:	6875      	ldr	r5, [r6, #4]
 80037f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037fa:	07d9      	lsls	r1, r3, #31
 80037fc:	d405      	bmi.n	800380a <_vfiprintf_r+0x32>
 80037fe:	89ab      	ldrh	r3, [r5, #12]
 8003800:	059a      	lsls	r2, r3, #22
 8003802:	d402      	bmi.n	800380a <_vfiprintf_r+0x32>
 8003804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003806:	f7ff ff63 	bl	80036d0 <__retarget_lock_acquire_recursive>
 800380a:	89ab      	ldrh	r3, [r5, #12]
 800380c:	071b      	lsls	r3, r3, #28
 800380e:	d501      	bpl.n	8003814 <_vfiprintf_r+0x3c>
 8003810:	692b      	ldr	r3, [r5, #16]
 8003812:	b9eb      	cbnz	r3, 8003850 <_vfiprintf_r+0x78>
 8003814:	4629      	mov	r1, r5
 8003816:	4630      	mov	r0, r6
 8003818:	f000 fb5c 	bl	8003ed4 <__swsetup_r>
 800381c:	b1c0      	cbz	r0, 8003850 <_vfiprintf_r+0x78>
 800381e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003820:	07dc      	lsls	r4, r3, #31
 8003822:	d50e      	bpl.n	8003842 <_vfiprintf_r+0x6a>
 8003824:	f04f 30ff 	mov.w	r0, #4294967295
 8003828:	b01d      	add	sp, #116	; 0x74
 800382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800382e:	4b7b      	ldr	r3, [pc, #492]	; (8003a1c <_vfiprintf_r+0x244>)
 8003830:	429d      	cmp	r5, r3
 8003832:	d101      	bne.n	8003838 <_vfiprintf_r+0x60>
 8003834:	68b5      	ldr	r5, [r6, #8]
 8003836:	e7df      	b.n	80037f8 <_vfiprintf_r+0x20>
 8003838:	4b79      	ldr	r3, [pc, #484]	; (8003a20 <_vfiprintf_r+0x248>)
 800383a:	429d      	cmp	r5, r3
 800383c:	bf08      	it	eq
 800383e:	68f5      	ldreq	r5, [r6, #12]
 8003840:	e7da      	b.n	80037f8 <_vfiprintf_r+0x20>
 8003842:	89ab      	ldrh	r3, [r5, #12]
 8003844:	0598      	lsls	r0, r3, #22
 8003846:	d4ed      	bmi.n	8003824 <_vfiprintf_r+0x4c>
 8003848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800384a:	f7ff ff42 	bl	80036d2 <__retarget_lock_release_recursive>
 800384e:	e7e9      	b.n	8003824 <_vfiprintf_r+0x4c>
 8003850:	2300      	movs	r3, #0
 8003852:	9309      	str	r3, [sp, #36]	; 0x24
 8003854:	2320      	movs	r3, #32
 8003856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800385a:	2330      	movs	r3, #48	; 0x30
 800385c:	f04f 0901 	mov.w	r9, #1
 8003860:	f8cd 800c 	str.w	r8, [sp, #12]
 8003864:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003a24 <_vfiprintf_r+0x24c>
 8003868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800386c:	4623      	mov	r3, r4
 800386e:	469a      	mov	sl, r3
 8003870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003874:	b10a      	cbz	r2, 800387a <_vfiprintf_r+0xa2>
 8003876:	2a25      	cmp	r2, #37	; 0x25
 8003878:	d1f9      	bne.n	800386e <_vfiprintf_r+0x96>
 800387a:	ebba 0b04 	subs.w	fp, sl, r4
 800387e:	d00b      	beq.n	8003898 <_vfiprintf_r+0xc0>
 8003880:	465b      	mov	r3, fp
 8003882:	4622      	mov	r2, r4
 8003884:	4629      	mov	r1, r5
 8003886:	4630      	mov	r0, r6
 8003888:	f7ff ff93 	bl	80037b2 <__sfputs_r>
 800388c:	3001      	adds	r0, #1
 800388e:	f000 80aa 	beq.w	80039e6 <_vfiprintf_r+0x20e>
 8003892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003894:	445a      	add	r2, fp
 8003896:	9209      	str	r2, [sp, #36]	; 0x24
 8003898:	f89a 3000 	ldrb.w	r3, [sl]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80a2 	beq.w	80039e6 <_vfiprintf_r+0x20e>
 80038a2:	2300      	movs	r3, #0
 80038a4:	f04f 32ff 	mov.w	r2, #4294967295
 80038a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038ac:	f10a 0a01 	add.w	sl, sl, #1
 80038b0:	9304      	str	r3, [sp, #16]
 80038b2:	9307      	str	r3, [sp, #28]
 80038b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038b8:	931a      	str	r3, [sp, #104]	; 0x68
 80038ba:	4654      	mov	r4, sl
 80038bc:	2205      	movs	r2, #5
 80038be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038c2:	4858      	ldr	r0, [pc, #352]	; (8003a24 <_vfiprintf_r+0x24c>)
 80038c4:	f000 fcbc 	bl	8004240 <memchr>
 80038c8:	9a04      	ldr	r2, [sp, #16]
 80038ca:	b9d8      	cbnz	r0, 8003904 <_vfiprintf_r+0x12c>
 80038cc:	06d1      	lsls	r1, r2, #27
 80038ce:	bf44      	itt	mi
 80038d0:	2320      	movmi	r3, #32
 80038d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038d6:	0713      	lsls	r3, r2, #28
 80038d8:	bf44      	itt	mi
 80038da:	232b      	movmi	r3, #43	; 0x2b
 80038dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038e0:	f89a 3000 	ldrb.w	r3, [sl]
 80038e4:	2b2a      	cmp	r3, #42	; 0x2a
 80038e6:	d015      	beq.n	8003914 <_vfiprintf_r+0x13c>
 80038e8:	4654      	mov	r4, sl
 80038ea:	2000      	movs	r0, #0
 80038ec:	f04f 0c0a 	mov.w	ip, #10
 80038f0:	9a07      	ldr	r2, [sp, #28]
 80038f2:	4621      	mov	r1, r4
 80038f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038f8:	3b30      	subs	r3, #48	; 0x30
 80038fa:	2b09      	cmp	r3, #9
 80038fc:	d94e      	bls.n	800399c <_vfiprintf_r+0x1c4>
 80038fe:	b1b0      	cbz	r0, 800392e <_vfiprintf_r+0x156>
 8003900:	9207      	str	r2, [sp, #28]
 8003902:	e014      	b.n	800392e <_vfiprintf_r+0x156>
 8003904:	eba0 0308 	sub.w	r3, r0, r8
 8003908:	fa09 f303 	lsl.w	r3, r9, r3
 800390c:	4313      	orrs	r3, r2
 800390e:	46a2      	mov	sl, r4
 8003910:	9304      	str	r3, [sp, #16]
 8003912:	e7d2      	b.n	80038ba <_vfiprintf_r+0xe2>
 8003914:	9b03      	ldr	r3, [sp, #12]
 8003916:	1d19      	adds	r1, r3, #4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	9103      	str	r1, [sp, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	bfbb      	ittet	lt
 8003920:	425b      	neglt	r3, r3
 8003922:	f042 0202 	orrlt.w	r2, r2, #2
 8003926:	9307      	strge	r3, [sp, #28]
 8003928:	9307      	strlt	r3, [sp, #28]
 800392a:	bfb8      	it	lt
 800392c:	9204      	strlt	r2, [sp, #16]
 800392e:	7823      	ldrb	r3, [r4, #0]
 8003930:	2b2e      	cmp	r3, #46	; 0x2e
 8003932:	d10c      	bne.n	800394e <_vfiprintf_r+0x176>
 8003934:	7863      	ldrb	r3, [r4, #1]
 8003936:	2b2a      	cmp	r3, #42	; 0x2a
 8003938:	d135      	bne.n	80039a6 <_vfiprintf_r+0x1ce>
 800393a:	9b03      	ldr	r3, [sp, #12]
 800393c:	3402      	adds	r4, #2
 800393e:	1d1a      	adds	r2, r3, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	9203      	str	r2, [sp, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	bfb8      	it	lt
 8003948:	f04f 33ff 	movlt.w	r3, #4294967295
 800394c:	9305      	str	r3, [sp, #20]
 800394e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003a34 <_vfiprintf_r+0x25c>
 8003952:	2203      	movs	r2, #3
 8003954:	4650      	mov	r0, sl
 8003956:	7821      	ldrb	r1, [r4, #0]
 8003958:	f000 fc72 	bl	8004240 <memchr>
 800395c:	b140      	cbz	r0, 8003970 <_vfiprintf_r+0x198>
 800395e:	2340      	movs	r3, #64	; 0x40
 8003960:	eba0 000a 	sub.w	r0, r0, sl
 8003964:	fa03 f000 	lsl.w	r0, r3, r0
 8003968:	9b04      	ldr	r3, [sp, #16]
 800396a:	3401      	adds	r4, #1
 800396c:	4303      	orrs	r3, r0
 800396e:	9304      	str	r3, [sp, #16]
 8003970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003974:	2206      	movs	r2, #6
 8003976:	482c      	ldr	r0, [pc, #176]	; (8003a28 <_vfiprintf_r+0x250>)
 8003978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800397c:	f000 fc60 	bl	8004240 <memchr>
 8003980:	2800      	cmp	r0, #0
 8003982:	d03f      	beq.n	8003a04 <_vfiprintf_r+0x22c>
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <_vfiprintf_r+0x254>)
 8003986:	bb1b      	cbnz	r3, 80039d0 <_vfiprintf_r+0x1f8>
 8003988:	9b03      	ldr	r3, [sp, #12]
 800398a:	3307      	adds	r3, #7
 800398c:	f023 0307 	bic.w	r3, r3, #7
 8003990:	3308      	adds	r3, #8
 8003992:	9303      	str	r3, [sp, #12]
 8003994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003996:	443b      	add	r3, r7
 8003998:	9309      	str	r3, [sp, #36]	; 0x24
 800399a:	e767      	b.n	800386c <_vfiprintf_r+0x94>
 800399c:	460c      	mov	r4, r1
 800399e:	2001      	movs	r0, #1
 80039a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80039a4:	e7a5      	b.n	80038f2 <_vfiprintf_r+0x11a>
 80039a6:	2300      	movs	r3, #0
 80039a8:	f04f 0c0a 	mov.w	ip, #10
 80039ac:	4619      	mov	r1, r3
 80039ae:	3401      	adds	r4, #1
 80039b0:	9305      	str	r3, [sp, #20]
 80039b2:	4620      	mov	r0, r4
 80039b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039b8:	3a30      	subs	r2, #48	; 0x30
 80039ba:	2a09      	cmp	r2, #9
 80039bc:	d903      	bls.n	80039c6 <_vfiprintf_r+0x1ee>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0c5      	beq.n	800394e <_vfiprintf_r+0x176>
 80039c2:	9105      	str	r1, [sp, #20]
 80039c4:	e7c3      	b.n	800394e <_vfiprintf_r+0x176>
 80039c6:	4604      	mov	r4, r0
 80039c8:	2301      	movs	r3, #1
 80039ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80039ce:	e7f0      	b.n	80039b2 <_vfiprintf_r+0x1da>
 80039d0:	ab03      	add	r3, sp, #12
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	462a      	mov	r2, r5
 80039d6:	4630      	mov	r0, r6
 80039d8:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <_vfiprintf_r+0x258>)
 80039da:	a904      	add	r1, sp, #16
 80039dc:	f3af 8000 	nop.w
 80039e0:	4607      	mov	r7, r0
 80039e2:	1c78      	adds	r0, r7, #1
 80039e4:	d1d6      	bne.n	8003994 <_vfiprintf_r+0x1bc>
 80039e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039e8:	07d9      	lsls	r1, r3, #31
 80039ea:	d405      	bmi.n	80039f8 <_vfiprintf_r+0x220>
 80039ec:	89ab      	ldrh	r3, [r5, #12]
 80039ee:	059a      	lsls	r2, r3, #22
 80039f0:	d402      	bmi.n	80039f8 <_vfiprintf_r+0x220>
 80039f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039f4:	f7ff fe6d 	bl	80036d2 <__retarget_lock_release_recursive>
 80039f8:	89ab      	ldrh	r3, [r5, #12]
 80039fa:	065b      	lsls	r3, r3, #25
 80039fc:	f53f af12 	bmi.w	8003824 <_vfiprintf_r+0x4c>
 8003a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a02:	e711      	b.n	8003828 <_vfiprintf_r+0x50>
 8003a04:	ab03      	add	r3, sp, #12
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	462a      	mov	r2, r5
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <_vfiprintf_r+0x258>)
 8003a0e:	a904      	add	r1, sp, #16
 8003a10:	f000 f882 	bl	8003b18 <_printf_i>
 8003a14:	e7e4      	b.n	80039e0 <_vfiprintf_r+0x208>
 8003a16:	bf00      	nop
 8003a18:	08004444 	.word	0x08004444
 8003a1c:	08004464 	.word	0x08004464
 8003a20:	08004424 	.word	0x08004424
 8003a24:	08004484 	.word	0x08004484
 8003a28:	0800448e 	.word	0x0800448e
 8003a2c:	00000000 	.word	0x00000000
 8003a30:	080037b3 	.word	0x080037b3
 8003a34:	0800448a 	.word	0x0800448a

08003a38 <_printf_common>:
 8003a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a3c:	4616      	mov	r6, r2
 8003a3e:	4699      	mov	r9, r3
 8003a40:	688a      	ldr	r2, [r1, #8]
 8003a42:	690b      	ldr	r3, [r1, #16]
 8003a44:	4607      	mov	r7, r0
 8003a46:	4293      	cmp	r3, r2
 8003a48:	bfb8      	it	lt
 8003a4a:	4613      	movlt	r3, r2
 8003a4c:	6033      	str	r3, [r6, #0]
 8003a4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a52:	460c      	mov	r4, r1
 8003a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a58:	b10a      	cbz	r2, 8003a5e <_printf_common+0x26>
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	6033      	str	r3, [r6, #0]
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	0699      	lsls	r1, r3, #26
 8003a62:	bf42      	ittt	mi
 8003a64:	6833      	ldrmi	r3, [r6, #0]
 8003a66:	3302      	addmi	r3, #2
 8003a68:	6033      	strmi	r3, [r6, #0]
 8003a6a:	6825      	ldr	r5, [r4, #0]
 8003a6c:	f015 0506 	ands.w	r5, r5, #6
 8003a70:	d106      	bne.n	8003a80 <_printf_common+0x48>
 8003a72:	f104 0a19 	add.w	sl, r4, #25
 8003a76:	68e3      	ldr	r3, [r4, #12]
 8003a78:	6832      	ldr	r2, [r6, #0]
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	42ab      	cmp	r3, r5
 8003a7e:	dc28      	bgt.n	8003ad2 <_printf_common+0x9a>
 8003a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a84:	1e13      	subs	r3, r2, #0
 8003a86:	6822      	ldr	r2, [r4, #0]
 8003a88:	bf18      	it	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	0692      	lsls	r2, r2, #26
 8003a8e:	d42d      	bmi.n	8003aec <_printf_common+0xb4>
 8003a90:	4649      	mov	r1, r9
 8003a92:	4638      	mov	r0, r7
 8003a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a98:	47c0      	blx	r8
 8003a9a:	3001      	adds	r0, #1
 8003a9c:	d020      	beq.n	8003ae0 <_printf_common+0xa8>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	68e5      	ldr	r5, [r4, #12]
 8003aa2:	f003 0306 	and.w	r3, r3, #6
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	bf18      	it	ne
 8003aaa:	2500      	movne	r5, #0
 8003aac:	6832      	ldr	r2, [r6, #0]
 8003aae:	f04f 0600 	mov.w	r6, #0
 8003ab2:	68a3      	ldr	r3, [r4, #8]
 8003ab4:	bf08      	it	eq
 8003ab6:	1aad      	subeq	r5, r5, r2
 8003ab8:	6922      	ldr	r2, [r4, #16]
 8003aba:	bf08      	it	eq
 8003abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	bfc4      	itt	gt
 8003ac4:	1a9b      	subgt	r3, r3, r2
 8003ac6:	18ed      	addgt	r5, r5, r3
 8003ac8:	341a      	adds	r4, #26
 8003aca:	42b5      	cmp	r5, r6
 8003acc:	d11a      	bne.n	8003b04 <_printf_common+0xcc>
 8003ace:	2000      	movs	r0, #0
 8003ad0:	e008      	b.n	8003ae4 <_printf_common+0xac>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	4652      	mov	r2, sl
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	4638      	mov	r0, r7
 8003ada:	47c0      	blx	r8
 8003adc:	3001      	adds	r0, #1
 8003ade:	d103      	bne.n	8003ae8 <_printf_common+0xb0>
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae8:	3501      	adds	r5, #1
 8003aea:	e7c4      	b.n	8003a76 <_printf_common+0x3e>
 8003aec:	2030      	movs	r0, #48	; 0x30
 8003aee:	18e1      	adds	r1, r4, r3
 8003af0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003afa:	4422      	add	r2, r4
 8003afc:	3302      	adds	r3, #2
 8003afe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b02:	e7c5      	b.n	8003a90 <_printf_common+0x58>
 8003b04:	2301      	movs	r3, #1
 8003b06:	4622      	mov	r2, r4
 8003b08:	4649      	mov	r1, r9
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	47c0      	blx	r8
 8003b0e:	3001      	adds	r0, #1
 8003b10:	d0e6      	beq.n	8003ae0 <_printf_common+0xa8>
 8003b12:	3601      	adds	r6, #1
 8003b14:	e7d9      	b.n	8003aca <_printf_common+0x92>
	...

08003b18 <_printf_i>:
 8003b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	7e27      	ldrb	r7, [r4, #24]
 8003b20:	4691      	mov	r9, r2
 8003b22:	2f78      	cmp	r7, #120	; 0x78
 8003b24:	4680      	mov	r8, r0
 8003b26:	469a      	mov	sl, r3
 8003b28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b2e:	d807      	bhi.n	8003b40 <_printf_i+0x28>
 8003b30:	2f62      	cmp	r7, #98	; 0x62
 8003b32:	d80a      	bhi.n	8003b4a <_printf_i+0x32>
 8003b34:	2f00      	cmp	r7, #0
 8003b36:	f000 80d9 	beq.w	8003cec <_printf_i+0x1d4>
 8003b3a:	2f58      	cmp	r7, #88	; 0x58
 8003b3c:	f000 80a4 	beq.w	8003c88 <_printf_i+0x170>
 8003b40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b48:	e03a      	b.n	8003bc0 <_printf_i+0xa8>
 8003b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b4e:	2b15      	cmp	r3, #21
 8003b50:	d8f6      	bhi.n	8003b40 <_printf_i+0x28>
 8003b52:	a001      	add	r0, pc, #4	; (adr r0, 8003b58 <_printf_i+0x40>)
 8003b54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b58:	08003bb1 	.word	0x08003bb1
 8003b5c:	08003bc5 	.word	0x08003bc5
 8003b60:	08003b41 	.word	0x08003b41
 8003b64:	08003b41 	.word	0x08003b41
 8003b68:	08003b41 	.word	0x08003b41
 8003b6c:	08003b41 	.word	0x08003b41
 8003b70:	08003bc5 	.word	0x08003bc5
 8003b74:	08003b41 	.word	0x08003b41
 8003b78:	08003b41 	.word	0x08003b41
 8003b7c:	08003b41 	.word	0x08003b41
 8003b80:	08003b41 	.word	0x08003b41
 8003b84:	08003cd3 	.word	0x08003cd3
 8003b88:	08003bf5 	.word	0x08003bf5
 8003b8c:	08003cb5 	.word	0x08003cb5
 8003b90:	08003b41 	.word	0x08003b41
 8003b94:	08003b41 	.word	0x08003b41
 8003b98:	08003cf5 	.word	0x08003cf5
 8003b9c:	08003b41 	.word	0x08003b41
 8003ba0:	08003bf5 	.word	0x08003bf5
 8003ba4:	08003b41 	.word	0x08003b41
 8003ba8:	08003b41 	.word	0x08003b41
 8003bac:	08003cbd 	.word	0x08003cbd
 8003bb0:	680b      	ldr	r3, [r1, #0]
 8003bb2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bb6:	1d1a      	adds	r2, r3, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	600a      	str	r2, [r1, #0]
 8003bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0a4      	b.n	8003d0e <_printf_i+0x1f6>
 8003bc4:	6825      	ldr	r5, [r4, #0]
 8003bc6:	6808      	ldr	r0, [r1, #0]
 8003bc8:	062e      	lsls	r6, r5, #24
 8003bca:	f100 0304 	add.w	r3, r0, #4
 8003bce:	d50a      	bpl.n	8003be6 <_printf_i+0xce>
 8003bd0:	6805      	ldr	r5, [r0, #0]
 8003bd2:	600b      	str	r3, [r1, #0]
 8003bd4:	2d00      	cmp	r5, #0
 8003bd6:	da03      	bge.n	8003be0 <_printf_i+0xc8>
 8003bd8:	232d      	movs	r3, #45	; 0x2d
 8003bda:	426d      	negs	r5, r5
 8003bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003be0:	230a      	movs	r3, #10
 8003be2:	485e      	ldr	r0, [pc, #376]	; (8003d5c <_printf_i+0x244>)
 8003be4:	e019      	b.n	8003c1a <_printf_i+0x102>
 8003be6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003bea:	6805      	ldr	r5, [r0, #0]
 8003bec:	600b      	str	r3, [r1, #0]
 8003bee:	bf18      	it	ne
 8003bf0:	b22d      	sxthne	r5, r5
 8003bf2:	e7ef      	b.n	8003bd4 <_printf_i+0xbc>
 8003bf4:	680b      	ldr	r3, [r1, #0]
 8003bf6:	6825      	ldr	r5, [r4, #0]
 8003bf8:	1d18      	adds	r0, r3, #4
 8003bfa:	6008      	str	r0, [r1, #0]
 8003bfc:	0628      	lsls	r0, r5, #24
 8003bfe:	d501      	bpl.n	8003c04 <_printf_i+0xec>
 8003c00:	681d      	ldr	r5, [r3, #0]
 8003c02:	e002      	b.n	8003c0a <_printf_i+0xf2>
 8003c04:	0669      	lsls	r1, r5, #25
 8003c06:	d5fb      	bpl.n	8003c00 <_printf_i+0xe8>
 8003c08:	881d      	ldrh	r5, [r3, #0]
 8003c0a:	2f6f      	cmp	r7, #111	; 0x6f
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2308      	moveq	r3, #8
 8003c10:	230a      	movne	r3, #10
 8003c12:	4852      	ldr	r0, [pc, #328]	; (8003d5c <_printf_i+0x244>)
 8003c14:	2100      	movs	r1, #0
 8003c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c1a:	6866      	ldr	r6, [r4, #4]
 8003c1c:	2e00      	cmp	r6, #0
 8003c1e:	bfa8      	it	ge
 8003c20:	6821      	ldrge	r1, [r4, #0]
 8003c22:	60a6      	str	r6, [r4, #8]
 8003c24:	bfa4      	itt	ge
 8003c26:	f021 0104 	bicge.w	r1, r1, #4
 8003c2a:	6021      	strge	r1, [r4, #0]
 8003c2c:	b90d      	cbnz	r5, 8003c32 <_printf_i+0x11a>
 8003c2e:	2e00      	cmp	r6, #0
 8003c30:	d04d      	beq.n	8003cce <_printf_i+0x1b6>
 8003c32:	4616      	mov	r6, r2
 8003c34:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c38:	fb03 5711 	mls	r7, r3, r1, r5
 8003c3c:	5dc7      	ldrb	r7, [r0, r7]
 8003c3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c42:	462f      	mov	r7, r5
 8003c44:	42bb      	cmp	r3, r7
 8003c46:	460d      	mov	r5, r1
 8003c48:	d9f4      	bls.n	8003c34 <_printf_i+0x11c>
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d10b      	bne.n	8003c66 <_printf_i+0x14e>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	07df      	lsls	r7, r3, #31
 8003c52:	d508      	bpl.n	8003c66 <_printf_i+0x14e>
 8003c54:	6923      	ldr	r3, [r4, #16]
 8003c56:	6861      	ldr	r1, [r4, #4]
 8003c58:	4299      	cmp	r1, r3
 8003c5a:	bfde      	ittt	le
 8003c5c:	2330      	movle	r3, #48	; 0x30
 8003c5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c66:	1b92      	subs	r2, r2, r6
 8003c68:	6122      	str	r2, [r4, #16]
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	4640      	mov	r0, r8
 8003c70:	f8cd a000 	str.w	sl, [sp]
 8003c74:	aa03      	add	r2, sp, #12
 8003c76:	f7ff fedf 	bl	8003a38 <_printf_common>
 8003c7a:	3001      	adds	r0, #1
 8003c7c:	d14c      	bne.n	8003d18 <_printf_i+0x200>
 8003c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c82:	b004      	add	sp, #16
 8003c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c88:	4834      	ldr	r0, [pc, #208]	; (8003d5c <_printf_i+0x244>)
 8003c8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c8e:	680e      	ldr	r6, [r1, #0]
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c96:	061f      	lsls	r7, r3, #24
 8003c98:	600e      	str	r6, [r1, #0]
 8003c9a:	d514      	bpl.n	8003cc6 <_printf_i+0x1ae>
 8003c9c:	07d9      	lsls	r1, r3, #31
 8003c9e:	bf44      	itt	mi
 8003ca0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ca4:	6023      	strmi	r3, [r4, #0]
 8003ca6:	b91d      	cbnz	r5, 8003cb0 <_printf_i+0x198>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	f023 0320 	bic.w	r3, r3, #32
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	e7af      	b.n	8003c14 <_printf_i+0xfc>
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	f043 0320 	orr.w	r3, r3, #32
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	2378      	movs	r3, #120	; 0x78
 8003cbe:	4828      	ldr	r0, [pc, #160]	; (8003d60 <_printf_i+0x248>)
 8003cc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cc4:	e7e3      	b.n	8003c8e <_printf_i+0x176>
 8003cc6:	065e      	lsls	r6, r3, #25
 8003cc8:	bf48      	it	mi
 8003cca:	b2ad      	uxthmi	r5, r5
 8003ccc:	e7e6      	b.n	8003c9c <_printf_i+0x184>
 8003cce:	4616      	mov	r6, r2
 8003cd0:	e7bb      	b.n	8003c4a <_printf_i+0x132>
 8003cd2:	680b      	ldr	r3, [r1, #0]
 8003cd4:	6826      	ldr	r6, [r4, #0]
 8003cd6:	1d1d      	adds	r5, r3, #4
 8003cd8:	6960      	ldr	r0, [r4, #20]
 8003cda:	600d      	str	r5, [r1, #0]
 8003cdc:	0635      	lsls	r5, r6, #24
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	d501      	bpl.n	8003ce6 <_printf_i+0x1ce>
 8003ce2:	6018      	str	r0, [r3, #0]
 8003ce4:	e002      	b.n	8003cec <_printf_i+0x1d4>
 8003ce6:	0671      	lsls	r1, r6, #25
 8003ce8:	d5fb      	bpl.n	8003ce2 <_printf_i+0x1ca>
 8003cea:	8018      	strh	r0, [r3, #0]
 8003cec:	2300      	movs	r3, #0
 8003cee:	4616      	mov	r6, r2
 8003cf0:	6123      	str	r3, [r4, #16]
 8003cf2:	e7ba      	b.n	8003c6a <_printf_i+0x152>
 8003cf4:	680b      	ldr	r3, [r1, #0]
 8003cf6:	1d1a      	adds	r2, r3, #4
 8003cf8:	600a      	str	r2, [r1, #0]
 8003cfa:	681e      	ldr	r6, [r3, #0]
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4630      	mov	r0, r6
 8003d00:	6862      	ldr	r2, [r4, #4]
 8003d02:	f000 fa9d 	bl	8004240 <memchr>
 8003d06:	b108      	cbz	r0, 8003d0c <_printf_i+0x1f4>
 8003d08:	1b80      	subs	r0, r0, r6
 8003d0a:	6060      	str	r0, [r4, #4]
 8003d0c:	6863      	ldr	r3, [r4, #4]
 8003d0e:	6123      	str	r3, [r4, #16]
 8003d10:	2300      	movs	r3, #0
 8003d12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d16:	e7a8      	b.n	8003c6a <_printf_i+0x152>
 8003d18:	4632      	mov	r2, r6
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	6923      	ldr	r3, [r4, #16]
 8003d20:	47d0      	blx	sl
 8003d22:	3001      	adds	r0, #1
 8003d24:	d0ab      	beq.n	8003c7e <_printf_i+0x166>
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	079b      	lsls	r3, r3, #30
 8003d2a:	d413      	bmi.n	8003d54 <_printf_i+0x23c>
 8003d2c:	68e0      	ldr	r0, [r4, #12]
 8003d2e:	9b03      	ldr	r3, [sp, #12]
 8003d30:	4298      	cmp	r0, r3
 8003d32:	bfb8      	it	lt
 8003d34:	4618      	movlt	r0, r3
 8003d36:	e7a4      	b.n	8003c82 <_printf_i+0x16a>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	4632      	mov	r2, r6
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	4640      	mov	r0, r8
 8003d40:	47d0      	blx	sl
 8003d42:	3001      	adds	r0, #1
 8003d44:	d09b      	beq.n	8003c7e <_printf_i+0x166>
 8003d46:	3501      	adds	r5, #1
 8003d48:	68e3      	ldr	r3, [r4, #12]
 8003d4a:	9903      	ldr	r1, [sp, #12]
 8003d4c:	1a5b      	subs	r3, r3, r1
 8003d4e:	42ab      	cmp	r3, r5
 8003d50:	dcf2      	bgt.n	8003d38 <_printf_i+0x220>
 8003d52:	e7eb      	b.n	8003d2c <_printf_i+0x214>
 8003d54:	2500      	movs	r5, #0
 8003d56:	f104 0619 	add.w	r6, r4, #25
 8003d5a:	e7f5      	b.n	8003d48 <_printf_i+0x230>
 8003d5c:	08004495 	.word	0x08004495
 8003d60:	080044a6 	.word	0x080044a6

08003d64 <_sbrk_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	2300      	movs	r3, #0
 8003d68:	4d05      	ldr	r5, [pc, #20]	; (8003d80 <_sbrk_r+0x1c>)
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	602b      	str	r3, [r5, #0]
 8003d70:	f7fc fcfa 	bl	8000768 <_sbrk>
 8003d74:	1c43      	adds	r3, r0, #1
 8003d76:	d102      	bne.n	8003d7e <_sbrk_r+0x1a>
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	b103      	cbz	r3, 8003d7e <_sbrk_r+0x1a>
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	bd38      	pop	{r3, r4, r5, pc}
 8003d80:	200010e0 	.word	0x200010e0

08003d84 <__sread>:
 8003d84:	b510      	push	{r4, lr}
 8003d86:	460c      	mov	r4, r1
 8003d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d8c:	f000 fabe 	bl	800430c <_read_r>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	bfab      	itete	ge
 8003d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d96:	89a3      	ldrhlt	r3, [r4, #12]
 8003d98:	181b      	addge	r3, r3, r0
 8003d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d9e:	bfac      	ite	ge
 8003da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003da2:	81a3      	strhlt	r3, [r4, #12]
 8003da4:	bd10      	pop	{r4, pc}

08003da6 <__swrite>:
 8003da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003daa:	461f      	mov	r7, r3
 8003dac:	898b      	ldrh	r3, [r1, #12]
 8003dae:	4605      	mov	r5, r0
 8003db0:	05db      	lsls	r3, r3, #23
 8003db2:	460c      	mov	r4, r1
 8003db4:	4616      	mov	r6, r2
 8003db6:	d505      	bpl.n	8003dc4 <__swrite+0x1e>
 8003db8:	2302      	movs	r3, #2
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc0:	f000 f9c8 	bl	8004154 <_lseek_r>
 8003dc4:	89a3      	ldrh	r3, [r4, #12]
 8003dc6:	4632      	mov	r2, r6
 8003dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dcc:	81a3      	strh	r3, [r4, #12]
 8003dce:	4628      	mov	r0, r5
 8003dd0:	463b      	mov	r3, r7
 8003dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dda:	f000 b869 	b.w	8003eb0 <_write_r>

08003dde <__sseek>:
 8003dde:	b510      	push	{r4, lr}
 8003de0:	460c      	mov	r4, r1
 8003de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de6:	f000 f9b5 	bl	8004154 <_lseek_r>
 8003dea:	1c43      	adds	r3, r0, #1
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	bf15      	itete	ne
 8003df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003dfa:	81a3      	strheq	r3, [r4, #12]
 8003dfc:	bf18      	it	ne
 8003dfe:	81a3      	strhne	r3, [r4, #12]
 8003e00:	bd10      	pop	{r4, pc}

08003e02 <__sclose>:
 8003e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e06:	f000 b8d3 	b.w	8003fb0 <_close_r>
	...

08003e0c <__swbuf_r>:
 8003e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0e:	460e      	mov	r6, r1
 8003e10:	4614      	mov	r4, r2
 8003e12:	4605      	mov	r5, r0
 8003e14:	b118      	cbz	r0, 8003e1e <__swbuf_r+0x12>
 8003e16:	6983      	ldr	r3, [r0, #24]
 8003e18:	b90b      	cbnz	r3, 8003e1e <__swbuf_r+0x12>
 8003e1a:	f7ff fbbb 	bl	8003594 <__sinit>
 8003e1e:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <__swbuf_r+0x98>)
 8003e20:	429c      	cmp	r4, r3
 8003e22:	d12b      	bne.n	8003e7c <__swbuf_r+0x70>
 8003e24:	686c      	ldr	r4, [r5, #4]
 8003e26:	69a3      	ldr	r3, [r4, #24]
 8003e28:	60a3      	str	r3, [r4, #8]
 8003e2a:	89a3      	ldrh	r3, [r4, #12]
 8003e2c:	071a      	lsls	r2, r3, #28
 8003e2e:	d52f      	bpl.n	8003e90 <__swbuf_r+0x84>
 8003e30:	6923      	ldr	r3, [r4, #16]
 8003e32:	b36b      	cbz	r3, 8003e90 <__swbuf_r+0x84>
 8003e34:	6923      	ldr	r3, [r4, #16]
 8003e36:	6820      	ldr	r0, [r4, #0]
 8003e38:	b2f6      	uxtb	r6, r6
 8003e3a:	1ac0      	subs	r0, r0, r3
 8003e3c:	6963      	ldr	r3, [r4, #20]
 8003e3e:	4637      	mov	r7, r6
 8003e40:	4283      	cmp	r3, r0
 8003e42:	dc04      	bgt.n	8003e4e <__swbuf_r+0x42>
 8003e44:	4621      	mov	r1, r4
 8003e46:	4628      	mov	r0, r5
 8003e48:	f000 f948 	bl	80040dc <_fflush_r>
 8003e4c:	bb30      	cbnz	r0, 8003e9c <__swbuf_r+0x90>
 8003e4e:	68a3      	ldr	r3, [r4, #8]
 8003e50:	3001      	adds	r0, #1
 8003e52:	3b01      	subs	r3, #1
 8003e54:	60a3      	str	r3, [r4, #8]
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	6022      	str	r2, [r4, #0]
 8003e5c:	701e      	strb	r6, [r3, #0]
 8003e5e:	6963      	ldr	r3, [r4, #20]
 8003e60:	4283      	cmp	r3, r0
 8003e62:	d004      	beq.n	8003e6e <__swbuf_r+0x62>
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	07db      	lsls	r3, r3, #31
 8003e68:	d506      	bpl.n	8003e78 <__swbuf_r+0x6c>
 8003e6a:	2e0a      	cmp	r6, #10
 8003e6c:	d104      	bne.n	8003e78 <__swbuf_r+0x6c>
 8003e6e:	4621      	mov	r1, r4
 8003e70:	4628      	mov	r0, r5
 8003e72:	f000 f933 	bl	80040dc <_fflush_r>
 8003e76:	b988      	cbnz	r0, 8003e9c <__swbuf_r+0x90>
 8003e78:	4638      	mov	r0, r7
 8003e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <__swbuf_r+0x9c>)
 8003e7e:	429c      	cmp	r4, r3
 8003e80:	d101      	bne.n	8003e86 <__swbuf_r+0x7a>
 8003e82:	68ac      	ldr	r4, [r5, #8]
 8003e84:	e7cf      	b.n	8003e26 <__swbuf_r+0x1a>
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <__swbuf_r+0xa0>)
 8003e88:	429c      	cmp	r4, r3
 8003e8a:	bf08      	it	eq
 8003e8c:	68ec      	ldreq	r4, [r5, #12]
 8003e8e:	e7ca      	b.n	8003e26 <__swbuf_r+0x1a>
 8003e90:	4621      	mov	r1, r4
 8003e92:	4628      	mov	r0, r5
 8003e94:	f000 f81e 	bl	8003ed4 <__swsetup_r>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	d0cb      	beq.n	8003e34 <__swbuf_r+0x28>
 8003e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8003ea0:	e7ea      	b.n	8003e78 <__swbuf_r+0x6c>
 8003ea2:	bf00      	nop
 8003ea4:	08004444 	.word	0x08004444
 8003ea8:	08004464 	.word	0x08004464
 8003eac:	08004424 	.word	0x08004424

08003eb0 <_write_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	2200      	movs	r2, #0
 8003eba:	4d05      	ldr	r5, [pc, #20]	; (8003ed0 <_write_r+0x20>)
 8003ebc:	602a      	str	r2, [r5, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f7fc fc05 	bl	80006ce <_write>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d102      	bne.n	8003ece <_write_r+0x1e>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	b103      	cbz	r3, 8003ece <_write_r+0x1e>
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	200010e0 	.word	0x200010e0

08003ed4 <__swsetup_r>:
 8003ed4:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <__swsetup_r+0xcc>)
 8003ed6:	b570      	push	{r4, r5, r6, lr}
 8003ed8:	681d      	ldr	r5, [r3, #0]
 8003eda:	4606      	mov	r6, r0
 8003edc:	460c      	mov	r4, r1
 8003ede:	b125      	cbz	r5, 8003eea <__swsetup_r+0x16>
 8003ee0:	69ab      	ldr	r3, [r5, #24]
 8003ee2:	b913      	cbnz	r3, 8003eea <__swsetup_r+0x16>
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f7ff fb55 	bl	8003594 <__sinit>
 8003eea:	4b2e      	ldr	r3, [pc, #184]	; (8003fa4 <__swsetup_r+0xd0>)
 8003eec:	429c      	cmp	r4, r3
 8003eee:	d10f      	bne.n	8003f10 <__swsetup_r+0x3c>
 8003ef0:	686c      	ldr	r4, [r5, #4]
 8003ef2:	89a3      	ldrh	r3, [r4, #12]
 8003ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ef8:	0719      	lsls	r1, r3, #28
 8003efa:	d42c      	bmi.n	8003f56 <__swsetup_r+0x82>
 8003efc:	06dd      	lsls	r5, r3, #27
 8003efe:	d411      	bmi.n	8003f24 <__swsetup_r+0x50>
 8003f00:	2309      	movs	r3, #9
 8003f02:	6033      	str	r3, [r6, #0]
 8003f04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0c:	81a3      	strh	r3, [r4, #12]
 8003f0e:	e03e      	b.n	8003f8e <__swsetup_r+0xba>
 8003f10:	4b25      	ldr	r3, [pc, #148]	; (8003fa8 <__swsetup_r+0xd4>)
 8003f12:	429c      	cmp	r4, r3
 8003f14:	d101      	bne.n	8003f1a <__swsetup_r+0x46>
 8003f16:	68ac      	ldr	r4, [r5, #8]
 8003f18:	e7eb      	b.n	8003ef2 <__swsetup_r+0x1e>
 8003f1a:	4b24      	ldr	r3, [pc, #144]	; (8003fac <__swsetup_r+0xd8>)
 8003f1c:	429c      	cmp	r4, r3
 8003f1e:	bf08      	it	eq
 8003f20:	68ec      	ldreq	r4, [r5, #12]
 8003f22:	e7e6      	b.n	8003ef2 <__swsetup_r+0x1e>
 8003f24:	0758      	lsls	r0, r3, #29
 8003f26:	d512      	bpl.n	8003f4e <__swsetup_r+0x7a>
 8003f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f2a:	b141      	cbz	r1, 8003f3e <__swsetup_r+0x6a>
 8003f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f30:	4299      	cmp	r1, r3
 8003f32:	d002      	beq.n	8003f3a <__swsetup_r+0x66>
 8003f34:	4630      	mov	r0, r6
 8003f36:	f000 f99d 	bl	8004274 <_free_r>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	6363      	str	r3, [r4, #52]	; 0x34
 8003f3e:	89a3      	ldrh	r3, [r4, #12]
 8003f40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f44:	81a3      	strh	r3, [r4, #12]
 8003f46:	2300      	movs	r3, #0
 8003f48:	6063      	str	r3, [r4, #4]
 8003f4a:	6923      	ldr	r3, [r4, #16]
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	f043 0308 	orr.w	r3, r3, #8
 8003f54:	81a3      	strh	r3, [r4, #12]
 8003f56:	6923      	ldr	r3, [r4, #16]
 8003f58:	b94b      	cbnz	r3, 8003f6e <__swsetup_r+0x9a>
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f64:	d003      	beq.n	8003f6e <__swsetup_r+0x9a>
 8003f66:	4621      	mov	r1, r4
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f000 f929 	bl	80041c0 <__smakebuf_r>
 8003f6e:	89a0      	ldrh	r0, [r4, #12]
 8003f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f74:	f010 0301 	ands.w	r3, r0, #1
 8003f78:	d00a      	beq.n	8003f90 <__swsetup_r+0xbc>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60a3      	str	r3, [r4, #8]
 8003f7e:	6963      	ldr	r3, [r4, #20]
 8003f80:	425b      	negs	r3, r3
 8003f82:	61a3      	str	r3, [r4, #24]
 8003f84:	6923      	ldr	r3, [r4, #16]
 8003f86:	b943      	cbnz	r3, 8003f9a <__swsetup_r+0xc6>
 8003f88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f8c:	d1ba      	bne.n	8003f04 <__swsetup_r+0x30>
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	0781      	lsls	r1, r0, #30
 8003f92:	bf58      	it	pl
 8003f94:	6963      	ldrpl	r3, [r4, #20]
 8003f96:	60a3      	str	r3, [r4, #8]
 8003f98:	e7f4      	b.n	8003f84 <__swsetup_r+0xb0>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e7f7      	b.n	8003f8e <__swsetup_r+0xba>
 8003f9e:	bf00      	nop
 8003fa0:	20000010 	.word	0x20000010
 8003fa4:	08004444 	.word	0x08004444
 8003fa8:	08004464 	.word	0x08004464
 8003fac:	08004424 	.word	0x08004424

08003fb0 <_close_r>:
 8003fb0:	b538      	push	{r3, r4, r5, lr}
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	4d05      	ldr	r5, [pc, #20]	; (8003fcc <_close_r+0x1c>)
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	4608      	mov	r0, r1
 8003fba:	602b      	str	r3, [r5, #0]
 8003fbc:	f7fc fba3 	bl	8000706 <_close>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_close_r+0x1a>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_close_r+0x1a>
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	200010e0 	.word	0x200010e0

08003fd0 <__sflush_r>:
 8003fd0:	898a      	ldrh	r2, [r1, #12]
 8003fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	0710      	lsls	r0, r2, #28
 8003fda:	460c      	mov	r4, r1
 8003fdc:	d458      	bmi.n	8004090 <__sflush_r+0xc0>
 8003fde:	684b      	ldr	r3, [r1, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	dc05      	bgt.n	8003ff0 <__sflush_r+0x20>
 8003fe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	dc02      	bgt.n	8003ff0 <__sflush_r+0x20>
 8003fea:	2000      	movs	r0, #0
 8003fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ff2:	2e00      	cmp	r6, #0
 8003ff4:	d0f9      	beq.n	8003fea <__sflush_r+0x1a>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ffc:	682f      	ldr	r7, [r5, #0]
 8003ffe:	602b      	str	r3, [r5, #0]
 8004000:	d032      	beq.n	8004068 <__sflush_r+0x98>
 8004002:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	075a      	lsls	r2, r3, #29
 8004008:	d505      	bpl.n	8004016 <__sflush_r+0x46>
 800400a:	6863      	ldr	r3, [r4, #4]
 800400c:	1ac0      	subs	r0, r0, r3
 800400e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004010:	b10b      	cbz	r3, 8004016 <__sflush_r+0x46>
 8004012:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004014:	1ac0      	subs	r0, r0, r3
 8004016:	2300      	movs	r3, #0
 8004018:	4602      	mov	r2, r0
 800401a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800401c:	4628      	mov	r0, r5
 800401e:	6a21      	ldr	r1, [r4, #32]
 8004020:	47b0      	blx	r6
 8004022:	1c43      	adds	r3, r0, #1
 8004024:	89a3      	ldrh	r3, [r4, #12]
 8004026:	d106      	bne.n	8004036 <__sflush_r+0x66>
 8004028:	6829      	ldr	r1, [r5, #0]
 800402a:	291d      	cmp	r1, #29
 800402c:	d82c      	bhi.n	8004088 <__sflush_r+0xb8>
 800402e:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <__sflush_r+0x108>)
 8004030:	40ca      	lsrs	r2, r1
 8004032:	07d6      	lsls	r6, r2, #31
 8004034:	d528      	bpl.n	8004088 <__sflush_r+0xb8>
 8004036:	2200      	movs	r2, #0
 8004038:	6062      	str	r2, [r4, #4]
 800403a:	6922      	ldr	r2, [r4, #16]
 800403c:	04d9      	lsls	r1, r3, #19
 800403e:	6022      	str	r2, [r4, #0]
 8004040:	d504      	bpl.n	800404c <__sflush_r+0x7c>
 8004042:	1c42      	adds	r2, r0, #1
 8004044:	d101      	bne.n	800404a <__sflush_r+0x7a>
 8004046:	682b      	ldr	r3, [r5, #0]
 8004048:	b903      	cbnz	r3, 800404c <__sflush_r+0x7c>
 800404a:	6560      	str	r0, [r4, #84]	; 0x54
 800404c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800404e:	602f      	str	r7, [r5, #0]
 8004050:	2900      	cmp	r1, #0
 8004052:	d0ca      	beq.n	8003fea <__sflush_r+0x1a>
 8004054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004058:	4299      	cmp	r1, r3
 800405a:	d002      	beq.n	8004062 <__sflush_r+0x92>
 800405c:	4628      	mov	r0, r5
 800405e:	f000 f909 	bl	8004274 <_free_r>
 8004062:	2000      	movs	r0, #0
 8004064:	6360      	str	r0, [r4, #52]	; 0x34
 8004066:	e7c1      	b.n	8003fec <__sflush_r+0x1c>
 8004068:	6a21      	ldr	r1, [r4, #32]
 800406a:	2301      	movs	r3, #1
 800406c:	4628      	mov	r0, r5
 800406e:	47b0      	blx	r6
 8004070:	1c41      	adds	r1, r0, #1
 8004072:	d1c7      	bne.n	8004004 <__sflush_r+0x34>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0c4      	beq.n	8004004 <__sflush_r+0x34>
 800407a:	2b1d      	cmp	r3, #29
 800407c:	d001      	beq.n	8004082 <__sflush_r+0xb2>
 800407e:	2b16      	cmp	r3, #22
 8004080:	d101      	bne.n	8004086 <__sflush_r+0xb6>
 8004082:	602f      	str	r7, [r5, #0]
 8004084:	e7b1      	b.n	8003fea <__sflush_r+0x1a>
 8004086:	89a3      	ldrh	r3, [r4, #12]
 8004088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408c:	81a3      	strh	r3, [r4, #12]
 800408e:	e7ad      	b.n	8003fec <__sflush_r+0x1c>
 8004090:	690f      	ldr	r7, [r1, #16]
 8004092:	2f00      	cmp	r7, #0
 8004094:	d0a9      	beq.n	8003fea <__sflush_r+0x1a>
 8004096:	0793      	lsls	r3, r2, #30
 8004098:	bf18      	it	ne
 800409a:	2300      	movne	r3, #0
 800409c:	680e      	ldr	r6, [r1, #0]
 800409e:	bf08      	it	eq
 80040a0:	694b      	ldreq	r3, [r1, #20]
 80040a2:	eba6 0807 	sub.w	r8, r6, r7
 80040a6:	600f      	str	r7, [r1, #0]
 80040a8:	608b      	str	r3, [r1, #8]
 80040aa:	f1b8 0f00 	cmp.w	r8, #0
 80040ae:	dd9c      	ble.n	8003fea <__sflush_r+0x1a>
 80040b0:	4643      	mov	r3, r8
 80040b2:	463a      	mov	r2, r7
 80040b4:	4628      	mov	r0, r5
 80040b6:	6a21      	ldr	r1, [r4, #32]
 80040b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040ba:	47b0      	blx	r6
 80040bc:	2800      	cmp	r0, #0
 80040be:	dc06      	bgt.n	80040ce <__sflush_r+0xfe>
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	f04f 30ff 	mov.w	r0, #4294967295
 80040c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ca:	81a3      	strh	r3, [r4, #12]
 80040cc:	e78e      	b.n	8003fec <__sflush_r+0x1c>
 80040ce:	4407      	add	r7, r0
 80040d0:	eba8 0800 	sub.w	r8, r8, r0
 80040d4:	e7e9      	b.n	80040aa <__sflush_r+0xda>
 80040d6:	bf00      	nop
 80040d8:	20400001 	.word	0x20400001

080040dc <_fflush_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	690b      	ldr	r3, [r1, #16]
 80040e0:	4605      	mov	r5, r0
 80040e2:	460c      	mov	r4, r1
 80040e4:	b913      	cbnz	r3, 80040ec <_fflush_r+0x10>
 80040e6:	2500      	movs	r5, #0
 80040e8:	4628      	mov	r0, r5
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
 80040ec:	b118      	cbz	r0, 80040f6 <_fflush_r+0x1a>
 80040ee:	6983      	ldr	r3, [r0, #24]
 80040f0:	b90b      	cbnz	r3, 80040f6 <_fflush_r+0x1a>
 80040f2:	f7ff fa4f 	bl	8003594 <__sinit>
 80040f6:	4b14      	ldr	r3, [pc, #80]	; (8004148 <_fflush_r+0x6c>)
 80040f8:	429c      	cmp	r4, r3
 80040fa:	d11b      	bne.n	8004134 <_fflush_r+0x58>
 80040fc:	686c      	ldr	r4, [r5, #4]
 80040fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0ef      	beq.n	80040e6 <_fflush_r+0xa>
 8004106:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004108:	07d0      	lsls	r0, r2, #31
 800410a:	d404      	bmi.n	8004116 <_fflush_r+0x3a>
 800410c:	0599      	lsls	r1, r3, #22
 800410e:	d402      	bmi.n	8004116 <_fflush_r+0x3a>
 8004110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004112:	f7ff fadd 	bl	80036d0 <__retarget_lock_acquire_recursive>
 8004116:	4628      	mov	r0, r5
 8004118:	4621      	mov	r1, r4
 800411a:	f7ff ff59 	bl	8003fd0 <__sflush_r>
 800411e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004120:	4605      	mov	r5, r0
 8004122:	07da      	lsls	r2, r3, #31
 8004124:	d4e0      	bmi.n	80040e8 <_fflush_r+0xc>
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	059b      	lsls	r3, r3, #22
 800412a:	d4dd      	bmi.n	80040e8 <_fflush_r+0xc>
 800412c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800412e:	f7ff fad0 	bl	80036d2 <__retarget_lock_release_recursive>
 8004132:	e7d9      	b.n	80040e8 <_fflush_r+0xc>
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <_fflush_r+0x70>)
 8004136:	429c      	cmp	r4, r3
 8004138:	d101      	bne.n	800413e <_fflush_r+0x62>
 800413a:	68ac      	ldr	r4, [r5, #8]
 800413c:	e7df      	b.n	80040fe <_fflush_r+0x22>
 800413e:	4b04      	ldr	r3, [pc, #16]	; (8004150 <_fflush_r+0x74>)
 8004140:	429c      	cmp	r4, r3
 8004142:	bf08      	it	eq
 8004144:	68ec      	ldreq	r4, [r5, #12]
 8004146:	e7da      	b.n	80040fe <_fflush_r+0x22>
 8004148:	08004444 	.word	0x08004444
 800414c:	08004464 	.word	0x08004464
 8004150:	08004424 	.word	0x08004424

08004154 <_lseek_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	4604      	mov	r4, r0
 8004158:	4608      	mov	r0, r1
 800415a:	4611      	mov	r1, r2
 800415c:	2200      	movs	r2, #0
 800415e:	4d05      	ldr	r5, [pc, #20]	; (8004174 <_lseek_r+0x20>)
 8004160:	602a      	str	r2, [r5, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	f7fc faf3 	bl	800074e <_lseek>
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	d102      	bne.n	8004172 <_lseek_r+0x1e>
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	b103      	cbz	r3, 8004172 <_lseek_r+0x1e>
 8004170:	6023      	str	r3, [r4, #0]
 8004172:	bd38      	pop	{r3, r4, r5, pc}
 8004174:	200010e0 	.word	0x200010e0

08004178 <__swhatbuf_r>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	460e      	mov	r6, r1
 800417c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004180:	4614      	mov	r4, r2
 8004182:	2900      	cmp	r1, #0
 8004184:	461d      	mov	r5, r3
 8004186:	b096      	sub	sp, #88	; 0x58
 8004188:	da07      	bge.n	800419a <__swhatbuf_r+0x22>
 800418a:	2300      	movs	r3, #0
 800418c:	602b      	str	r3, [r5, #0]
 800418e:	89b3      	ldrh	r3, [r6, #12]
 8004190:	061a      	lsls	r2, r3, #24
 8004192:	d410      	bmi.n	80041b6 <__swhatbuf_r+0x3e>
 8004194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004198:	e00e      	b.n	80041b8 <__swhatbuf_r+0x40>
 800419a:	466a      	mov	r2, sp
 800419c:	f000 f8c8 	bl	8004330 <_fstat_r>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	dbf2      	blt.n	800418a <__swhatbuf_r+0x12>
 80041a4:	9a01      	ldr	r2, [sp, #4]
 80041a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80041aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80041ae:	425a      	negs	r2, r3
 80041b0:	415a      	adcs	r2, r3
 80041b2:	602a      	str	r2, [r5, #0]
 80041b4:	e7ee      	b.n	8004194 <__swhatbuf_r+0x1c>
 80041b6:	2340      	movs	r3, #64	; 0x40
 80041b8:	2000      	movs	r0, #0
 80041ba:	6023      	str	r3, [r4, #0]
 80041bc:	b016      	add	sp, #88	; 0x58
 80041be:	bd70      	pop	{r4, r5, r6, pc}

080041c0 <__smakebuf_r>:
 80041c0:	898b      	ldrh	r3, [r1, #12]
 80041c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041c4:	079d      	lsls	r5, r3, #30
 80041c6:	4606      	mov	r6, r0
 80041c8:	460c      	mov	r4, r1
 80041ca:	d507      	bpl.n	80041dc <__smakebuf_r+0x1c>
 80041cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	6123      	str	r3, [r4, #16]
 80041d4:	2301      	movs	r3, #1
 80041d6:	6163      	str	r3, [r4, #20]
 80041d8:	b002      	add	sp, #8
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	466a      	mov	r2, sp
 80041de:	ab01      	add	r3, sp, #4
 80041e0:	f7ff ffca 	bl	8004178 <__swhatbuf_r>
 80041e4:	9900      	ldr	r1, [sp, #0]
 80041e6:	4605      	mov	r5, r0
 80041e8:	4630      	mov	r0, r6
 80041ea:	f7ff fa73 	bl	80036d4 <_malloc_r>
 80041ee:	b948      	cbnz	r0, 8004204 <__smakebuf_r+0x44>
 80041f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041f4:	059a      	lsls	r2, r3, #22
 80041f6:	d4ef      	bmi.n	80041d8 <__smakebuf_r+0x18>
 80041f8:	f023 0303 	bic.w	r3, r3, #3
 80041fc:	f043 0302 	orr.w	r3, r3, #2
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	e7e3      	b.n	80041cc <__smakebuf_r+0xc>
 8004204:	4b0d      	ldr	r3, [pc, #52]	; (800423c <__smakebuf_r+0x7c>)
 8004206:	62b3      	str	r3, [r6, #40]	; 0x28
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	6020      	str	r0, [r4, #0]
 800420c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	9b00      	ldr	r3, [sp, #0]
 8004214:	6120      	str	r0, [r4, #16]
 8004216:	6163      	str	r3, [r4, #20]
 8004218:	9b01      	ldr	r3, [sp, #4]
 800421a:	b15b      	cbz	r3, 8004234 <__smakebuf_r+0x74>
 800421c:	4630      	mov	r0, r6
 800421e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004222:	f000 f897 	bl	8004354 <_isatty_r>
 8004226:	b128      	cbz	r0, 8004234 <__smakebuf_r+0x74>
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	81a3      	strh	r3, [r4, #12]
 8004234:	89a0      	ldrh	r0, [r4, #12]
 8004236:	4305      	orrs	r5, r0
 8004238:	81a5      	strh	r5, [r4, #12]
 800423a:	e7cd      	b.n	80041d8 <__smakebuf_r+0x18>
 800423c:	0800352d 	.word	0x0800352d

08004240 <memchr>:
 8004240:	4603      	mov	r3, r0
 8004242:	b510      	push	{r4, lr}
 8004244:	b2c9      	uxtb	r1, r1
 8004246:	4402      	add	r2, r0
 8004248:	4293      	cmp	r3, r2
 800424a:	4618      	mov	r0, r3
 800424c:	d101      	bne.n	8004252 <memchr+0x12>
 800424e:	2000      	movs	r0, #0
 8004250:	e003      	b.n	800425a <memchr+0x1a>
 8004252:	7804      	ldrb	r4, [r0, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	428c      	cmp	r4, r1
 8004258:	d1f6      	bne.n	8004248 <memchr+0x8>
 800425a:	bd10      	pop	{r4, pc}

0800425c <__malloc_lock>:
 800425c:	4801      	ldr	r0, [pc, #4]	; (8004264 <__malloc_lock+0x8>)
 800425e:	f7ff ba37 	b.w	80036d0 <__retarget_lock_acquire_recursive>
 8004262:	bf00      	nop
 8004264:	200010d8 	.word	0x200010d8

08004268 <__malloc_unlock>:
 8004268:	4801      	ldr	r0, [pc, #4]	; (8004270 <__malloc_unlock+0x8>)
 800426a:	f7ff ba32 	b.w	80036d2 <__retarget_lock_release_recursive>
 800426e:	bf00      	nop
 8004270:	200010d8 	.word	0x200010d8

08004274 <_free_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	4605      	mov	r5, r0
 8004278:	2900      	cmp	r1, #0
 800427a:	d043      	beq.n	8004304 <_free_r+0x90>
 800427c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004280:	1f0c      	subs	r4, r1, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	bfb8      	it	lt
 8004286:	18e4      	addlt	r4, r4, r3
 8004288:	f7ff ffe8 	bl	800425c <__malloc_lock>
 800428c:	4a1e      	ldr	r2, [pc, #120]	; (8004308 <_free_r+0x94>)
 800428e:	6813      	ldr	r3, [r2, #0]
 8004290:	4610      	mov	r0, r2
 8004292:	b933      	cbnz	r3, 80042a2 <_free_r+0x2e>
 8004294:	6063      	str	r3, [r4, #4]
 8004296:	6014      	str	r4, [r2, #0]
 8004298:	4628      	mov	r0, r5
 800429a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800429e:	f7ff bfe3 	b.w	8004268 <__malloc_unlock>
 80042a2:	42a3      	cmp	r3, r4
 80042a4:	d90a      	bls.n	80042bc <_free_r+0x48>
 80042a6:	6821      	ldr	r1, [r4, #0]
 80042a8:	1862      	adds	r2, r4, r1
 80042aa:	4293      	cmp	r3, r2
 80042ac:	bf01      	itttt	eq
 80042ae:	681a      	ldreq	r2, [r3, #0]
 80042b0:	685b      	ldreq	r3, [r3, #4]
 80042b2:	1852      	addeq	r2, r2, r1
 80042b4:	6022      	streq	r2, [r4, #0]
 80042b6:	6063      	str	r3, [r4, #4]
 80042b8:	6004      	str	r4, [r0, #0]
 80042ba:	e7ed      	b.n	8004298 <_free_r+0x24>
 80042bc:	461a      	mov	r2, r3
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	b10b      	cbz	r3, 80042c6 <_free_r+0x52>
 80042c2:	42a3      	cmp	r3, r4
 80042c4:	d9fa      	bls.n	80042bc <_free_r+0x48>
 80042c6:	6811      	ldr	r1, [r2, #0]
 80042c8:	1850      	adds	r0, r2, r1
 80042ca:	42a0      	cmp	r0, r4
 80042cc:	d10b      	bne.n	80042e6 <_free_r+0x72>
 80042ce:	6820      	ldr	r0, [r4, #0]
 80042d0:	4401      	add	r1, r0
 80042d2:	1850      	adds	r0, r2, r1
 80042d4:	4283      	cmp	r3, r0
 80042d6:	6011      	str	r1, [r2, #0]
 80042d8:	d1de      	bne.n	8004298 <_free_r+0x24>
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4401      	add	r1, r0
 80042e0:	6011      	str	r1, [r2, #0]
 80042e2:	6053      	str	r3, [r2, #4]
 80042e4:	e7d8      	b.n	8004298 <_free_r+0x24>
 80042e6:	d902      	bls.n	80042ee <_free_r+0x7a>
 80042e8:	230c      	movs	r3, #12
 80042ea:	602b      	str	r3, [r5, #0]
 80042ec:	e7d4      	b.n	8004298 <_free_r+0x24>
 80042ee:	6820      	ldr	r0, [r4, #0]
 80042f0:	1821      	adds	r1, r4, r0
 80042f2:	428b      	cmp	r3, r1
 80042f4:	bf01      	itttt	eq
 80042f6:	6819      	ldreq	r1, [r3, #0]
 80042f8:	685b      	ldreq	r3, [r3, #4]
 80042fa:	1809      	addeq	r1, r1, r0
 80042fc:	6021      	streq	r1, [r4, #0]
 80042fe:	6063      	str	r3, [r4, #4]
 8004300:	6054      	str	r4, [r2, #4]
 8004302:	e7c9      	b.n	8004298 <_free_r+0x24>
 8004304:	bd38      	pop	{r3, r4, r5, pc}
 8004306:	bf00      	nop
 8004308:	20001034 	.word	0x20001034

0800430c <_read_r>:
 800430c:	b538      	push	{r3, r4, r5, lr}
 800430e:	4604      	mov	r4, r0
 8004310:	4608      	mov	r0, r1
 8004312:	4611      	mov	r1, r2
 8004314:	2200      	movs	r2, #0
 8004316:	4d05      	ldr	r5, [pc, #20]	; (800432c <_read_r+0x20>)
 8004318:	602a      	str	r2, [r5, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	f7fc f9ba 	bl	8000694 <_read>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	d102      	bne.n	800432a <_read_r+0x1e>
 8004324:	682b      	ldr	r3, [r5, #0]
 8004326:	b103      	cbz	r3, 800432a <_read_r+0x1e>
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	bd38      	pop	{r3, r4, r5, pc}
 800432c:	200010e0 	.word	0x200010e0

08004330 <_fstat_r>:
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	2300      	movs	r3, #0
 8004334:	4d06      	ldr	r5, [pc, #24]	; (8004350 <_fstat_r+0x20>)
 8004336:	4604      	mov	r4, r0
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	602b      	str	r3, [r5, #0]
 800433e:	f7fc f9ed 	bl	800071c <_fstat>
 8004342:	1c43      	adds	r3, r0, #1
 8004344:	d102      	bne.n	800434c <_fstat_r+0x1c>
 8004346:	682b      	ldr	r3, [r5, #0]
 8004348:	b103      	cbz	r3, 800434c <_fstat_r+0x1c>
 800434a:	6023      	str	r3, [r4, #0]
 800434c:	bd38      	pop	{r3, r4, r5, pc}
 800434e:	bf00      	nop
 8004350:	200010e0 	.word	0x200010e0

08004354 <_isatty_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	2300      	movs	r3, #0
 8004358:	4d05      	ldr	r5, [pc, #20]	; (8004370 <_isatty_r+0x1c>)
 800435a:	4604      	mov	r4, r0
 800435c:	4608      	mov	r0, r1
 800435e:	602b      	str	r3, [r5, #0]
 8004360:	f7fc f9eb 	bl	800073a <_isatty>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d102      	bne.n	800436e <_isatty_r+0x1a>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	b103      	cbz	r3, 800436e <_isatty_r+0x1a>
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	200010e0 	.word	0x200010e0

08004374 <_init>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	bf00      	nop
 8004378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437a:	bc08      	pop	{r3}
 800437c:	469e      	mov	lr, r3
 800437e:	4770      	bx	lr

08004380 <_fini>:
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	bf00      	nop
 8004384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004386:	bc08      	pop	{r3}
 8004388:	469e      	mov	lr, r3
 800438a:	4770      	bx	lr

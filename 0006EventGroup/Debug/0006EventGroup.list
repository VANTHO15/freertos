
0006EventGroup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b00  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c68  08002c68  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002c68  08002c68  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c68  08002c68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c6c  08002c6c  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  20000010  08002c80  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001024  08002c80  00021024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f782  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268e  00000000  00000000  0002f7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00031e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  00032c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001822a  00000000  00000000  00033928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6ea  00000000  00000000  0004bb52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f501  00000000  00000000  0005a23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e973d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038e8  00000000  00000000  000e9790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08002bf8 	.word	0x08002bf8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08002bf8 	.word	0x08002bf8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 f983 	bl	8000490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f81b 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f855 	bl	800023c <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000192:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <main+0x3c>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2100      	movs	r1, #0
 80001a8:	4618      	mov	r0, r3
 80001aa:	f001 f921 	bl	80013f0 <osThreadCreate>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a03      	ldr	r2, [pc, #12]	; (80001c0 <main+0x40>)
 80001b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001b4:	f001 f915 	bl	80013e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b8:	e7fe      	b.n	80001b8 <main+0x38>
 80001ba:	bf00      	nop
 80001bc:	08002c1c 	.word	0x08002c1c
 80001c0:	20000fcc 	.word	0x20000fcc

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	; 0x40
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f002 fd08 	bl	8002be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2310      	movs	r3, #16
 80001f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f2:	2300      	movs	r3, #0
 80001f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 fa5a 	bl	80006b4 <HAL_RCC_OscConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000206:	f000 f863 	bl	80002d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020a:	230f      	movs	r3, #15
 800020c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800020e:	2300      	movs	r3, #0
 8000210:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fcc6 	bl	8000bb4 <HAL_RCC_ClockConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800022e:	f000 f84f 	bl	80002d0 <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3740      	adds	r7, #64	; 0x40
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <MX_GPIO_Init+0x28>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a07      	ldr	r2, [pc, #28]	; (8000264 <MX_GPIO_Init+0x28>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b05      	ldr	r3, [pc, #20]	; (8000264 <MX_GPIO_Init+0x28>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0304 	and.w	r3, r3, #4
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]

}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40021000 	.word	0x40021000

08000268 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af02      	add	r7, sp, #8
 800026e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	myEventGroupHandle = xEventGroupCreate();
 8000270:	f001 f90a 	bl	8001488 <xEventGroupCreate>
 8000274:	4603      	mov	r3, r0
 8000276:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <StartDefaultTask+0x3c>)
 8000278:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	  BitsToWaitFor = xEventGroupWaitBits(myEventGroupHandle, EVENT0|EVENT1|EVENT2, pdTRUE, pdFAIL, osWaitForever);
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <StartDefaultTask+0x3c>)
 800027c:	6818      	ldr	r0, [r3, #0]
 800027e:	f04f 33ff 	mov.w	r3, #4294967295
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	2300      	movs	r3, #0
 8000286:	2201      	movs	r2, #1
 8000288:	2107      	movs	r1, #7
 800028a:	f001 f917 	bl	80014bc <xEventGroupWaitBits>
 800028e:	4603      	mov	r3, r0
 8000290:	4a05      	ldr	r2, [pc, #20]	; (80002a8 <StartDefaultTask+0x40>)
 8000292:	6013      	str	r3, [r2, #0]

	  }


	  // kích oạt tì set bít lên thôi
	  xEventGroupSetBits(myEventGroupHandle, EVENT0);
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <StartDefaultTask+0x3c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2101      	movs	r1, #1
 800029a:	4618      	mov	r0, r3
 800029c:	f001 f9dc 	bl	8001658 <xEventGroupSetBits>
	  BitsToWaitFor = xEventGroupWaitBits(myEventGroupHandle, EVENT0|EVENT1|EVENT2, pdTRUE, pdFAIL, osWaitForever);
 80002a0:	e7eb      	b.n	800027a <StartDefaultTask+0x12>
 80002a2:	bf00      	nop
 80002a4:	20000fd4 	.word	0x20000fd4
 80002a8:	20000fd0 	.word	0x20000fd0

080002ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a04      	ldr	r2, [pc, #16]	; (80002cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d101      	bne.n	80002c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80002be:	f000 f8fd 	bl	80004bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40000800 	.word	0x40000800

080002d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d4:	b672      	cpsid	i
}
 80002d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <Error_Handler+0x8>
	...

080002dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002e2:	4b18      	ldr	r3, [pc, #96]	; (8000344 <HAL_MspInit+0x68>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	4a17      	ldr	r2, [pc, #92]	; (8000344 <HAL_MspInit+0x68>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6193      	str	r3, [r2, #24]
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <HAL_MspInit+0x68>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	60bb      	str	r3, [r7, #8]
 80002f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002fa:	4b12      	ldr	r3, [pc, #72]	; (8000344 <HAL_MspInit+0x68>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	4a11      	ldr	r2, [pc, #68]	; (8000344 <HAL_MspInit+0x68>)
 8000300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000304:	61d3      	str	r3, [r2, #28]
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <HAL_MspInit+0x68>)
 8000308:	69db      	ldr	r3, [r3, #28]
 800030a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	210f      	movs	r1, #15
 8000316:	f06f 0001 	mvn.w	r0, #1
 800031a:	f000 f9a0 	bl	800065e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <HAL_MspInit+0x6c>)
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <HAL_MspInit+0x6c>)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000
 8000348:	40010000 	.word	0x40010000

0800034c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08c      	sub	sp, #48	; 0x30
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800035c:	2200      	movs	r2, #0
 800035e:	6879      	ldr	r1, [r7, #4]
 8000360:	201e      	movs	r0, #30
 8000362:	f000 f97c 	bl	800065e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000366:	201e      	movs	r0, #30
 8000368:	f000 f995 	bl	8000696 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800036c:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <HAL_InitTick+0x9c>)
 800036e:	69db      	ldr	r3, [r3, #28]
 8000370:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <HAL_InitTick+0x9c>)
 8000372:	f043 0304 	orr.w	r3, r3, #4
 8000376:	61d3      	str	r3, [r2, #28]
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <HAL_InitTick+0x9c>)
 800037a:	69db      	ldr	r3, [r3, #28]
 800037c:	f003 0304 	and.w	r3, r3, #4
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000384:	f107 0210 	add.w	r2, r7, #16
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	4611      	mov	r1, r2
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fd78 	bl	8000e84 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000394:	f000 fd62 	bl	8000e5c <HAL_RCC_GetPCLK1Freq>
 8000398:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800039a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <HAL_InitTick+0xa0>)
 800039e:	fba2 2303 	umull	r2, r3, r2, r3
 80003a2:	0c9b      	lsrs	r3, r3, #18
 80003a4:	3b01      	subs	r3, #1
 80003a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <HAL_InitTick+0xa4>)
 80003aa:	4a12      	ldr	r2, [pc, #72]	; (80003f4 <HAL_InitTick+0xa8>)
 80003ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <HAL_InitTick+0xa4>)
 80003b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003b4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <HAL_InitTick+0xa4>)
 80003b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ba:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <HAL_InitTick+0xa4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <HAL_InitTick+0xa4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80003c8:	4809      	ldr	r0, [pc, #36]	; (80003f0 <HAL_InitTick+0xa4>)
 80003ca:	f000 fda9 	bl	8000f20 <HAL_TIM_Base_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d104      	bne.n	80003de <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80003d4:	4806      	ldr	r0, [pc, #24]	; (80003f0 <HAL_InitTick+0xa4>)
 80003d6:	f000 fdfb 	bl	8000fd0 <HAL_TIM_Base_Start_IT>
 80003da:	4603      	mov	r3, r0
 80003dc:	e000      	b.n	80003e0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80003de:	2301      	movs	r3, #1
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3730      	adds	r7, #48	; 0x30
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	431bde83 	.word	0x431bde83
 80003f0:	20000fd8 	.word	0x20000fd8
 80003f4:	40000800 	.word	0x40000800

080003f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <NMI_Handler+0x4>

080003fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000402:	e7fe      	b.n	8000402 <HardFault_Handler+0x4>

08000404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000408:	e7fe      	b.n	8000408 <MemManage_Handler+0x4>

0800040a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800040e:	e7fe      	b.n	800040e <BusFault_Handler+0x4>

08000410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <UsageFault_Handler+0x4>

08000416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
	...

08000424 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000428:	4802      	ldr	r0, [pc, #8]	; (8000434 <TIM4_IRQHandler+0x10>)
 800042a:	f000 fe23 	bl	8001074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000fd8 	.word	0x20000fd8

08000438 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000444:	480c      	ldr	r0, [pc, #48]	; (8000478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000446:	490d      	ldr	r1, [pc, #52]	; (800047c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000448:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800044c:	e002      	b.n	8000454 <LoopCopyDataInit>

0800044e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000452:	3304      	adds	r3, #4

08000454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000458:	d3f9      	bcc.n	800044e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045a:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800045c:	4c0a      	ldr	r4, [pc, #40]	; (8000488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000460:	e001      	b.n	8000466 <LoopFillZerobss>

08000462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000464:	3204      	adds	r2, #4

08000466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000468:	d3fb      	bcc.n	8000462 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800046a:	f7ff ffe5 	bl	8000438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800046e:	f002 fb97 	bl	8002ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000472:	f7ff fe85 	bl	8000180 <main>
  bx lr
 8000476:	4770      	bx	lr
  ldr r0, =_sdata
 8000478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800047c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000480:	08002c70 	.word	0x08002c70
  ldr r2, =_sbss
 8000484:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000488:	20001024 	.word	0x20001024

0800048c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800048c:	e7fe      	b.n	800048c <ADC1_2_IRQHandler>
	...

08000490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <HAL_Init+0x28>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <HAL_Init+0x28>)
 800049a:	f043 0310 	orr.w	r3, r3, #16
 800049e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a0:	2003      	movs	r0, #3
 80004a2:	f000 f8d1 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004a6:	200f      	movs	r0, #15
 80004a8:	f7ff ff50 	bl	800034c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004ac:	f7ff ff16 	bl	80002dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40022000 	.word	0x40022000

080004bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <HAL_IncTick+0x1c>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <HAL_IncTick+0x20>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4413      	add	r3, r2
 80004cc:	4a03      	ldr	r2, [pc, #12]	; (80004dc <HAL_IncTick+0x20>)
 80004ce:	6013      	str	r3, [r2, #0]
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	20000008 	.word	0x20000008
 80004dc:	20001020 	.word	0x20001020

080004e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  return uwTick;
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <HAL_GetTick+0x10>)
 80004e6:	681b      	ldr	r3, [r3, #0]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	20001020 	.word	0x20001020

080004f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f003 0307 	and.w	r3, r3, #7
 8000502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <__NVIC_SetPriorityGrouping+0x44>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000510:	4013      	ands	r3, r2
 8000512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800051c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000526:	4a04      	ldr	r2, [pc, #16]	; (8000538 <__NVIC_SetPriorityGrouping+0x44>)
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	60d3      	str	r3, [r2, #12]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <__NVIC_GetPriorityGrouping+0x18>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	0a1b      	lsrs	r3, r3, #8
 8000546:	f003 0307 	and.w	r3, r3, #7
}
 800054a:	4618      	mov	r0, r3
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000566:	2b00      	cmp	r3, #0
 8000568:	db0b      	blt.n	8000582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f003 021f 	and.w	r2, r3, #31
 8000570:	4906      	ldr	r1, [pc, #24]	; (800058c <__NVIC_EnableIRQ+0x34>)
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	095b      	lsrs	r3, r3, #5
 8000578:	2001      	movs	r0, #1
 800057a:	fa00 f202 	lsl.w	r2, r0, r2
 800057e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	e000e100 	.word	0xe000e100

08000590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	db0a      	blt.n	80005ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	490c      	ldr	r1, [pc, #48]	; (80005dc <__NVIC_SetPriority+0x4c>)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	0112      	lsls	r2, r2, #4
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	440b      	add	r3, r1
 80005b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005b8:	e00a      	b.n	80005d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4908      	ldr	r1, [pc, #32]	; (80005e0 <__NVIC_SetPriority+0x50>)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	f003 030f 	and.w	r3, r3, #15
 80005c6:	3b04      	subs	r3, #4
 80005c8:	0112      	lsls	r2, r2, #4
 80005ca:	b2d2      	uxtb	r2, r2
 80005cc:	440b      	add	r3, r1
 80005ce:	761a      	strb	r2, [r3, #24]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000e100 	.word	0xe000e100
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	f1c3 0307 	rsb	r3, r3, #7
 80005fe:	2b04      	cmp	r3, #4
 8000600:	bf28      	it	cs
 8000602:	2304      	movcs	r3, #4
 8000604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	3304      	adds	r3, #4
 800060a:	2b06      	cmp	r3, #6
 800060c:	d902      	bls.n	8000614 <NVIC_EncodePriority+0x30>
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	3b03      	subs	r3, #3
 8000612:	e000      	b.n	8000616 <NVIC_EncodePriority+0x32>
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	f04f 32ff 	mov.w	r2, #4294967295
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	43da      	mvns	r2, r3
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	401a      	ands	r2, r3
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800062c:	f04f 31ff 	mov.w	r1, #4294967295
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	43d9      	mvns	r1, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	4313      	orrs	r3, r2
         );
}
 800063e:	4618      	mov	r0, r3
 8000640:	3724      	adds	r7, #36	; 0x24
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff4f 	bl	80004f4 <__NVIC_SetPriorityGrouping>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800065e:	b580      	push	{r7, lr}
 8000660:	b086      	sub	sp, #24
 8000662:	af00      	add	r7, sp, #0
 8000664:	4603      	mov	r3, r0
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
 800066a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000670:	f7ff ff64 	bl	800053c <__NVIC_GetPriorityGrouping>
 8000674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	68b9      	ldr	r1, [r7, #8]
 800067a:	6978      	ldr	r0, [r7, #20]
 800067c:	f7ff ffb2 	bl	80005e4 <NVIC_EncodePriority>
 8000680:	4602      	mov	r2, r0
 8000682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000686:	4611      	mov	r1, r2
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff81 	bl	8000590 <__NVIC_SetPriority>
}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	4603      	mov	r3, r0
 800069e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff57 	bl	8000558 <__NVIC_EnableIRQ>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e26c      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f000 8087 	beq.w	80007e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80006d4:	4b92      	ldr	r3, [pc, #584]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	f003 030c 	and.w	r3, r3, #12
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d00c      	beq.n	80006fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006e0:	4b8f      	ldr	r3, [pc, #572]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	f003 030c 	and.w	r3, r3, #12
 80006e8:	2b08      	cmp	r3, #8
 80006ea:	d112      	bne.n	8000712 <HAL_RCC_OscConfig+0x5e>
 80006ec:	4b8c      	ldr	r3, [pc, #560]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006f8:	d10b      	bne.n	8000712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006fa:	4b89      	ldr	r3, [pc, #548]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000702:	2b00      	cmp	r3, #0
 8000704:	d06c      	beq.n	80007e0 <HAL_RCC_OscConfig+0x12c>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d168      	bne.n	80007e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	e246      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800071a:	d106      	bne.n	800072a <HAL_RCC_OscConfig+0x76>
 800071c:	4b80      	ldr	r3, [pc, #512]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a7f      	ldr	r2, [pc, #508]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	e02e      	b.n	8000788 <HAL_RCC_OscConfig+0xd4>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d10c      	bne.n	800074c <HAL_RCC_OscConfig+0x98>
 8000732:	4b7b      	ldr	r3, [pc, #492]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a7a      	ldr	r2, [pc, #488]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	4b78      	ldr	r3, [pc, #480]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a77      	ldr	r2, [pc, #476]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000748:	6013      	str	r3, [r2, #0]
 800074a:	e01d      	b.n	8000788 <HAL_RCC_OscConfig+0xd4>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000754:	d10c      	bne.n	8000770 <HAL_RCC_OscConfig+0xbc>
 8000756:	4b72      	ldr	r3, [pc, #456]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a71      	ldr	r2, [pc, #452]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 800075c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	4b6f      	ldr	r3, [pc, #444]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a6e      	ldr	r2, [pc, #440]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800076c:	6013      	str	r3, [r2, #0]
 800076e:	e00b      	b.n	8000788 <HAL_RCC_OscConfig+0xd4>
 8000770:	4b6b      	ldr	r3, [pc, #428]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a6a      	ldr	r2, [pc, #424]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b68      	ldr	r3, [pc, #416]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a67      	ldr	r2, [pc, #412]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000786:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d013      	beq.n	80007b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000790:	f7ff fea6 	bl	80004e0 <HAL_GetTick>
 8000794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000796:	e008      	b.n	80007aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000798:	f7ff fea2 	bl	80004e0 <HAL_GetTick>
 800079c:	4602      	mov	r2, r0
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	2b64      	cmp	r3, #100	; 0x64
 80007a4:	d901      	bls.n	80007aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80007a6:	2303      	movs	r3, #3
 80007a8:	e1fa      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007aa:	4b5d      	ldr	r3, [pc, #372]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0f0      	beq.n	8000798 <HAL_RCC_OscConfig+0xe4>
 80007b6:	e014      	b.n	80007e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007b8:	f7ff fe92 	bl	80004e0 <HAL_GetTick>
 80007bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007be:	e008      	b.n	80007d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007c0:	f7ff fe8e 	bl	80004e0 <HAL_GetTick>
 80007c4:	4602      	mov	r2, r0
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	2b64      	cmp	r3, #100	; 0x64
 80007cc:	d901      	bls.n	80007d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80007ce:	2303      	movs	r3, #3
 80007d0:	e1e6      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007d2:	4b53      	ldr	r3, [pc, #332]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1f0      	bne.n	80007c0 <HAL_RCC_OscConfig+0x10c>
 80007de:	e000      	b.n	80007e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d063      	beq.n	80008b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80007ee:	4b4c      	ldr	r3, [pc, #304]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f003 030c 	and.w	r3, r3, #12
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00b      	beq.n	8000812 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80007fa:	4b49      	ldr	r3, [pc, #292]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	f003 030c 	and.w	r3, r3, #12
 8000802:	2b08      	cmp	r3, #8
 8000804:	d11c      	bne.n	8000840 <HAL_RCC_OscConfig+0x18c>
 8000806:	4b46      	ldr	r3, [pc, #280]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d116      	bne.n	8000840 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000812:	4b43      	ldr	r3, [pc, #268]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	2b00      	cmp	r3, #0
 800081c:	d005      	beq.n	800082a <HAL_RCC_OscConfig+0x176>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	691b      	ldr	r3, [r3, #16]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d001      	beq.n	800082a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e1ba      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800082a:	4b3d      	ldr	r3, [pc, #244]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	4939      	ldr	r1, [pc, #228]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 800083a:	4313      	orrs	r3, r2
 800083c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800083e:	e03a      	b.n	80008b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d020      	beq.n	800088a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000848:	4b36      	ldr	r3, [pc, #216]	; (8000924 <HAL_RCC_OscConfig+0x270>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800084e:	f7ff fe47 	bl	80004e0 <HAL_GetTick>
 8000852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000854:	e008      	b.n	8000868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000856:	f7ff fe43 	bl	80004e0 <HAL_GetTick>
 800085a:	4602      	mov	r2, r0
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	2b02      	cmp	r3, #2
 8000862:	d901      	bls.n	8000868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000864:	2303      	movs	r3, #3
 8000866:	e19b      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000868:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f003 0302 	and.w	r3, r3, #2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0f0      	beq.n	8000856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000874:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	4927      	ldr	r1, [pc, #156]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 8000884:	4313      	orrs	r3, r2
 8000886:	600b      	str	r3, [r1, #0]
 8000888:	e015      	b.n	80008b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <HAL_RCC_OscConfig+0x270>)
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000890:	f7ff fe26 	bl	80004e0 <HAL_GetTick>
 8000894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000896:	e008      	b.n	80008aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000898:	f7ff fe22 	bl	80004e0 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d901      	bls.n	80008aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80008a6:	2303      	movs	r3, #3
 80008a8:	e17a      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1f0      	bne.n	8000898 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d03a      	beq.n	8000938 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d019      	beq.n	80008fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_RCC_OscConfig+0x274>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008d0:	f7ff fe06 	bl	80004e0 <HAL_GetTick>
 80008d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008d6:	e008      	b.n	80008ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008d8:	f7ff fe02 	bl	80004e0 <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d901      	bls.n	80008ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80008e6:	2303      	movs	r3, #3
 80008e8:	e15a      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_RCC_OscConfig+0x26c>)
 80008ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f0      	beq.n	80008d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 faf4 	bl	8000ee4 <RCC_Delay>
 80008fc:	e01c      	b.n	8000938 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_RCC_OscConfig+0x274>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000904:	f7ff fdec 	bl	80004e0 <HAL_GetTick>
 8000908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800090a:	e00f      	b.n	800092c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800090c:	f7ff fde8 	bl	80004e0 <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	2b02      	cmp	r3, #2
 8000918:	d908      	bls.n	800092c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800091a:	2303      	movs	r3, #3
 800091c:	e140      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000
 8000924:	42420000 	.word	0x42420000
 8000928:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800092c:	4b9e      	ldr	r3, [pc, #632]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 800092e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000930:	f003 0302 	and.w	r3, r3, #2
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1e9      	bne.n	800090c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	2b00      	cmp	r3, #0
 8000942:	f000 80a6 	beq.w	8000a92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800094a:	4b97      	ldr	r3, [pc, #604]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10d      	bne.n	8000972 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b94      	ldr	r3, [pc, #592]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a93      	ldr	r2, [pc, #588]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b91      	ldr	r3, [pc, #580]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800096e:	2301      	movs	r3, #1
 8000970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000972:	4b8e      	ldr	r3, [pc, #568]	; (8000bac <HAL_RCC_OscConfig+0x4f8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800097a:	2b00      	cmp	r3, #0
 800097c:	d118      	bne.n	80009b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800097e:	4b8b      	ldr	r3, [pc, #556]	; (8000bac <HAL_RCC_OscConfig+0x4f8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a8a      	ldr	r2, [pc, #552]	; (8000bac <HAL_RCC_OscConfig+0x4f8>)
 8000984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800098a:	f7ff fda9 	bl	80004e0 <HAL_GetTick>
 800098e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000990:	e008      	b.n	80009a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000992:	f7ff fda5 	bl	80004e0 <HAL_GetTick>
 8000996:	4602      	mov	r2, r0
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	2b64      	cmp	r3, #100	; 0x64
 800099e:	d901      	bls.n	80009a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80009a0:	2303      	movs	r3, #3
 80009a2:	e0fd      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009a4:	4b81      	ldr	r3, [pc, #516]	; (8000bac <HAL_RCC_OscConfig+0x4f8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0f0      	beq.n	8000992 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d106      	bne.n	80009c6 <HAL_RCC_OscConfig+0x312>
 80009b8:	4b7b      	ldr	r3, [pc, #492]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 80009ba:	6a1b      	ldr	r3, [r3, #32]
 80009bc:	4a7a      	ldr	r2, [pc, #488]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6213      	str	r3, [r2, #32]
 80009c4:	e02d      	b.n	8000a22 <HAL_RCC_OscConfig+0x36e>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10c      	bne.n	80009e8 <HAL_RCC_OscConfig+0x334>
 80009ce:	4b76      	ldr	r3, [pc, #472]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 80009d0:	6a1b      	ldr	r3, [r3, #32]
 80009d2:	4a75      	ldr	r2, [pc, #468]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 80009d4:	f023 0301 	bic.w	r3, r3, #1
 80009d8:	6213      	str	r3, [r2, #32]
 80009da:	4b73      	ldr	r3, [pc, #460]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 80009dc:	6a1b      	ldr	r3, [r3, #32]
 80009de:	4a72      	ldr	r2, [pc, #456]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 80009e0:	f023 0304 	bic.w	r3, r3, #4
 80009e4:	6213      	str	r3, [r2, #32]
 80009e6:	e01c      	b.n	8000a22 <HAL_RCC_OscConfig+0x36e>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	2b05      	cmp	r3, #5
 80009ee:	d10c      	bne.n	8000a0a <HAL_RCC_OscConfig+0x356>
 80009f0:	4b6d      	ldr	r3, [pc, #436]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 80009f2:	6a1b      	ldr	r3, [r3, #32]
 80009f4:	4a6c      	ldr	r2, [pc, #432]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	6213      	str	r3, [r2, #32]
 80009fc:	4b6a      	ldr	r3, [pc, #424]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 80009fe:	6a1b      	ldr	r3, [r3, #32]
 8000a00:	4a69      	ldr	r2, [pc, #420]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6213      	str	r3, [r2, #32]
 8000a08:	e00b      	b.n	8000a22 <HAL_RCC_OscConfig+0x36e>
 8000a0a:	4b67      	ldr	r3, [pc, #412]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000a0c:	6a1b      	ldr	r3, [r3, #32]
 8000a0e:	4a66      	ldr	r2, [pc, #408]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000a10:	f023 0301 	bic.w	r3, r3, #1
 8000a14:	6213      	str	r3, [r2, #32]
 8000a16:	4b64      	ldr	r3, [pc, #400]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000a18:	6a1b      	ldr	r3, [r3, #32]
 8000a1a:	4a63      	ldr	r2, [pc, #396]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000a1c:	f023 0304 	bic.w	r3, r3, #4
 8000a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d015      	beq.n	8000a56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a2a:	f7ff fd59 	bl	80004e0 <HAL_GetTick>
 8000a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a30:	e00a      	b.n	8000a48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a32:	f7ff fd55 	bl	80004e0 <HAL_GetTick>
 8000a36:	4602      	mov	r2, r0
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d901      	bls.n	8000a48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000a44:	2303      	movs	r3, #3
 8000a46:	e0ab      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a48:	4b57      	ldr	r3, [pc, #348]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000a4a:	6a1b      	ldr	r3, [r3, #32]
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0ee      	beq.n	8000a32 <HAL_RCC_OscConfig+0x37e>
 8000a54:	e014      	b.n	8000a80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a56:	f7ff fd43 	bl	80004e0 <HAL_GetTick>
 8000a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a5c:	e00a      	b.n	8000a74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a5e:	f7ff fd3f 	bl	80004e0 <HAL_GetTick>
 8000a62:	4602      	mov	r2, r0
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d901      	bls.n	8000a74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000a70:	2303      	movs	r3, #3
 8000a72:	e095      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a74:	4b4c      	ldr	r3, [pc, #304]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000a76:	6a1b      	ldr	r3, [r3, #32]
 8000a78:	f003 0302 	and.w	r3, r3, #2
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1ee      	bne.n	8000a5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d105      	bne.n	8000a92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a86:	4b48      	ldr	r3, [pc, #288]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4a47      	ldr	r2, [pc, #284]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 8081 	beq.w	8000b9e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a9c:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 030c 	and.w	r3, r3, #12
 8000aa4:	2b08      	cmp	r3, #8
 8000aa6:	d061      	beq.n	8000b6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d146      	bne.n	8000b3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ab0:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <HAL_RCC_OscConfig+0x4fc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ab6:	f7ff fd13 	bl	80004e0 <HAL_GetTick>
 8000aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000abc:	e008      	b.n	8000ad0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000abe:	f7ff fd0f 	bl	80004e0 <HAL_GetTick>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d901      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000acc:	2303      	movs	r3, #3
 8000ace:	e067      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ad0:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f0      	bne.n	8000abe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a1b      	ldr	r3, [r3, #32]
 8000ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ae4:	d108      	bne.n	8000af8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ae6:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	492d      	ldr	r1, [pc, #180]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000af4:	4313      	orrs	r3, r2
 8000af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a19      	ldr	r1, [r3, #32]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	4927      	ldr	r1, [pc, #156]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <HAL_RCC_OscConfig+0x4fc>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b16:	f7ff fce3 	bl	80004e0 <HAL_GetTick>
 8000b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b1c:	e008      	b.n	8000b30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b1e:	f7ff fcdf 	bl	80004e0 <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d901      	bls.n	8000b30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e037      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f0      	beq.n	8000b1e <HAL_RCC_OscConfig+0x46a>
 8000b3c:	e02f      	b.n	8000b9e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_RCC_OscConfig+0x4fc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b44:	f7ff fccc 	bl	80004e0 <HAL_GetTick>
 8000b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b4a:	e008      	b.n	8000b5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b4c:	f7ff fcc8 	bl	80004e0 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d901      	bls.n	8000b5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e020      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1f0      	bne.n	8000b4c <HAL_RCC_OscConfig+0x498>
 8000b6a:	e018      	b.n	8000b9e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d101      	bne.n	8000b78 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e013      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_RCC_OscConfig+0x4f4>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a1b      	ldr	r3, [r3, #32]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d106      	bne.n	8000b9a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d001      	beq.n	8000b9e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40007000 	.word	0x40007000
 8000bb0:	42420060 	.word	0x42420060

08000bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e0d0      	b.n	8000d6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000bc8:	4b6a      	ldr	r3, [pc, #424]	; (8000d74 <HAL_RCC_ClockConfig+0x1c0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 0307 	and.w	r3, r3, #7
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d910      	bls.n	8000bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bd6:	4b67      	ldr	r3, [pc, #412]	; (8000d74 <HAL_RCC_ClockConfig+0x1c0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f023 0207 	bic.w	r2, r3, #7
 8000bde:	4965      	ldr	r1, [pc, #404]	; (8000d74 <HAL_RCC_ClockConfig+0x1c0>)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000be6:	4b63      	ldr	r3, [pc, #396]	; (8000d74 <HAL_RCC_ClockConfig+0x1c0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d001      	beq.n	8000bf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e0b8      	b.n	8000d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d020      	beq.n	8000c46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d005      	beq.n	8000c1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c10:	4b59      	ldr	r3, [pc, #356]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4a58      	ldr	r2, [pc, #352]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000c16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c28:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a52      	ldr	r2, [pc, #328]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000c2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c34:	4b50      	ldr	r3, [pc, #320]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	494d      	ldr	r1, [pc, #308]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d040      	beq.n	8000cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d107      	bne.n	8000c6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5a:	4b47      	ldr	r3, [pc, #284]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d115      	bne.n	8000c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e07f      	b.n	8000d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d107      	bne.n	8000c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c72:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d109      	bne.n	8000c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e073      	b.n	8000d6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c82:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e06b      	b.n	8000d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c92:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f023 0203 	bic.w	r2, r3, #3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4936      	ldr	r1, [pc, #216]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ca4:	f7ff fc1c 	bl	80004e0 <HAL_GetTick>
 8000ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000caa:	e00a      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cac:	f7ff fc18 	bl	80004e0 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d901      	bls.n	8000cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e053      	b.n	8000d6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 020c 	and.w	r2, r3, #12
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d1eb      	bne.n	8000cac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <HAL_RCC_ClockConfig+0x1c0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d210      	bcs.n	8000d04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <HAL_RCC_ClockConfig+0x1c0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f023 0207 	bic.w	r2, r3, #7
 8000cea:	4922      	ldr	r1, [pc, #136]	; (8000d74 <HAL_RCC_ClockConfig+0x1c0>)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <HAL_RCC_ClockConfig+0x1c0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d001      	beq.n	8000d04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e032      	b.n	8000d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d008      	beq.n	8000d22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	4916      	ldr	r1, [pc, #88]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d009      	beq.n	8000d42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	490e      	ldr	r1, [pc, #56]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d42:	f000 f821 	bl	8000d88 <HAL_RCC_GetSysClockFreq>
 8000d46:	4602      	mov	r2, r0
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_RCC_ClockConfig+0x1c4>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	490a      	ldr	r1, [pc, #40]	; (8000d7c <HAL_RCC_ClockConfig+0x1c8>)
 8000d54:	5ccb      	ldrb	r3, [r1, r3]
 8000d56:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5a:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <HAL_RCC_ClockConfig+0x1cc>)
 8000d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_RCC_ClockConfig+0x1d0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff faf2 	bl	800034c <HAL_InitTick>

  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40022000 	.word	0x40022000
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	08002c50 	.word	0x08002c50
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d88:	b490      	push	{r4, r7}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000d90:	1d3c      	adds	r4, r7, #4
 8000d92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000d98:	f240 2301 	movw	r3, #513	; 0x201
 8000d9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000db2:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	d002      	beq.n	8000dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d003      	beq.n	8000dce <HAL_RCC_GetSysClockFreq+0x46>
 8000dc6:	e02d      	b.n	8000e24 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000dca:	623b      	str	r3, [r7, #32]
      break;
 8000dcc:	e02d      	b.n	8000e2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	0c9b      	lsrs	r3, r3, #18
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000dda:	4413      	add	r3, r2
 8000ddc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000de0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d013      	beq.n	8000e14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	0c5b      	lsrs	r3, r3, #17
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000dfa:	4413      	add	r3, r2
 8000dfc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e06:	fb02 f203 	mul.w	r2, r2, r3
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
 8000e12:	e004      	b.n	8000e1e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e18:	fb02 f303 	mul.w	r3, r2, r3
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	623b      	str	r3, [r7, #32]
      break;
 8000e22:	e002      	b.n	8000e2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e26:	623b      	str	r3, [r7, #32]
      break;
 8000e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e2a:	6a3b      	ldr	r3, [r7, #32]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc90      	pop	{r4, r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	08002c38 	.word	0x08002c38
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	007a1200 	.word	0x007a1200
 8000e44:	003d0900 	.word	0x003d0900

08000e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	; (8000e58 <HAL_RCC_GetHCLKFreq+0x10>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	20000000 	.word	0x20000000

08000e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e60:	f7ff fff2 	bl	8000e48 <HAL_RCC_GetHCLKFreq>
 8000e64:	4602      	mov	r2, r0
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	4903      	ldr	r1, [pc, #12]	; (8000e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e72:	5ccb      	ldrb	r3, [r1, r3]
 8000e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	08002c60 	.word	0x08002c60

08000e84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	220f      	movs	r2, #15
 8000e92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <HAL_RCC_GetClockConfig+0x58>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0203 	and.w	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_RCC_GetClockConfig+0x58>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_RCC_GetClockConfig+0x58>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_RCC_GetClockConfig+0x58>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0207 	and.w	r2, r3, #7
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <RCC_Delay+0x34>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <RCC_Delay+0x38>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	0a5b      	lsrs	r3, r3, #9
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f00:	bf00      	nop
  }
  while (Delay --);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	60fa      	str	r2, [r7, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1f9      	bne.n	8000f00 <RCC_Delay+0x1c>
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	10624dd3 	.word	0x10624dd3

08000f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e041      	b.n	8000fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d106      	bne.n	8000f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f839 	bl	8000fbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4610      	mov	r0, r2
 8000f60:	f000 f9b4 	bl	80012cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d001      	beq.n	8000fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e03a      	b.n	800105e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2202      	movs	r2, #2
 8000fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0201 	orr.w	r2, r2, #1
 8000ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a18      	ldr	r2, [pc, #96]	; (8001068 <HAL_TIM_Base_Start_IT+0x98>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00e      	beq.n	8001028 <HAL_TIM_Base_Start_IT+0x58>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001012:	d009      	beq.n	8001028 <HAL_TIM_Base_Start_IT+0x58>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <HAL_TIM_Base_Start_IT+0x9c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d004      	beq.n	8001028 <HAL_TIM_Base_Start_IT+0x58>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <HAL_TIM_Base_Start_IT+0xa0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d111      	bne.n	800104c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b06      	cmp	r3, #6
 8001038:	d010      	beq.n	800105c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f042 0201 	orr.w	r2, r2, #1
 8001048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800104a:	e007      	b.n	800105c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	40012c00 	.word	0x40012c00
 800106c:	40000400 	.word	0x40000400
 8001070:	40000800 	.word	0x40000800

08001074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	d122      	bne.n	80010d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b02      	cmp	r3, #2
 8001096:	d11b      	bne.n	80010d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f06f 0202 	mvn.w	r2, #2
 80010a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f8ed 	bl	8001296 <HAL_TIM_IC_CaptureCallback>
 80010bc:	e005      	b.n	80010ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f8e0 	bl	8001284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f8ef 	bl	80012a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d122      	bne.n	8001124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d11b      	bne.n	8001124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f06f 0204 	mvn.w	r2, #4
 80010f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2202      	movs	r2, #2
 80010fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f8c3 	bl	8001296 <HAL_TIM_IC_CaptureCallback>
 8001110:	e005      	b.n	800111e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f8b6 	bl	8001284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f8c5 	bl	80012a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b08      	cmp	r3, #8
 8001130:	d122      	bne.n	8001178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	2b08      	cmp	r3, #8
 800113e:	d11b      	bne.n	8001178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f06f 0208 	mvn.w	r2, #8
 8001148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2204      	movs	r2, #4
 800114e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f899 	bl	8001296 <HAL_TIM_IC_CaptureCallback>
 8001164:	e005      	b.n	8001172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f88c 	bl	8001284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f89b 	bl	80012a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	2b10      	cmp	r3, #16
 8001184:	d122      	bne.n	80011cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	2b10      	cmp	r3, #16
 8001192:	d11b      	bne.n	80011cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f06f 0210 	mvn.w	r2, #16
 800119c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2208      	movs	r2, #8
 80011a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f86f 	bl	8001296 <HAL_TIM_IC_CaptureCallback>
 80011b8:	e005      	b.n	80011c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f862 	bl	8001284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f871 	bl	80012a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10e      	bne.n	80011f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d107      	bne.n	80011f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f06f 0201 	mvn.w	r2, #1
 80011f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff f85a 	bl	80002ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	2b80      	cmp	r3, #128	; 0x80
 8001204:	d10e      	bne.n	8001224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001210:	2b80      	cmp	r3, #128	; 0x80
 8001212:	d107      	bne.n	8001224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800121c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f8bf 	bl	80013a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122e:	2b40      	cmp	r3, #64	; 0x40
 8001230:	d10e      	bne.n	8001250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123c:	2b40      	cmp	r3, #64	; 0x40
 800123e:	d107      	bne.n	8001250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f835 	bl	80012ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	2b20      	cmp	r3, #32
 800125c:	d10e      	bne.n	800127c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	2b20      	cmp	r3, #32
 800126a:	d107      	bne.n	800127c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f06f 0220 	mvn.w	r2, #32
 8001274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f88a 	bl	8001390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a29      	ldr	r2, [pc, #164]	; (8001384 <TIM_Base_SetConfig+0xb8>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d00b      	beq.n	80012fc <TIM_Base_SetConfig+0x30>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ea:	d007      	beq.n	80012fc <TIM_Base_SetConfig+0x30>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a26      	ldr	r2, [pc, #152]	; (8001388 <TIM_Base_SetConfig+0xbc>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d003      	beq.n	80012fc <TIM_Base_SetConfig+0x30>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a25      	ldr	r2, [pc, #148]	; (800138c <TIM_Base_SetConfig+0xc0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d108      	bne.n	800130e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <TIM_Base_SetConfig+0xb8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00b      	beq.n	800132e <TIM_Base_SetConfig+0x62>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800131c:	d007      	beq.n	800132e <TIM_Base_SetConfig+0x62>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a19      	ldr	r2, [pc, #100]	; (8001388 <TIM_Base_SetConfig+0xbc>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d003      	beq.n	800132e <TIM_Base_SetConfig+0x62>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a18      	ldr	r2, [pc, #96]	; (800138c <TIM_Base_SetConfig+0xc0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d108      	bne.n	8001340 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4313      	orrs	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4313      	orrs	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a07      	ldr	r2, [pc, #28]	; (8001384 <TIM_Base_SetConfig+0xb8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d103      	bne.n	8001374 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	615a      	str	r2, [r3, #20]
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40012c00 	.word	0x40012c00
 8001388:	40000400 	.word	0x40000400
 800138c:	40000800 	.word	0x40000800

08001390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80013c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c6:	2b84      	cmp	r3, #132	; 0x84
 80013c8:	d005      	beq.n	80013d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80013ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4413      	add	r3, r2
 80013d2:	3303      	adds	r3, #3
 80013d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80013e6:	f000 fc1d 	bl	8001c24 <vTaskStartScheduler>
  
  return osOK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af04      	add	r7, sp, #16
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d020      	beq.n	8001444 <osThreadCreate+0x54>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d01c      	beq.n	8001444 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685c      	ldr	r4, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681d      	ldr	r5, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691e      	ldr	r6, [r3, #16]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ffc9 	bl	80013b4 <makeFreeRtosPriority>
 8001422:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800142c:	9202      	str	r2, [sp, #8]
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	9100      	str	r1, [sp, #0]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	4632      	mov	r2, r6
 8001436:	4629      	mov	r1, r5
 8001438:	4620      	mov	r0, r4
 800143a:	f000 fa68 	bl	800190e <xTaskCreateStatic>
 800143e:	4603      	mov	r3, r0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	e01c      	b.n	800147e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685c      	ldr	r4, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001450:	b29e      	uxth	r6, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ffab 	bl	80013b4 <makeFreeRtosPriority>
 800145e:	4602      	mov	r2, r0
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	9200      	str	r2, [sp, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	4632      	mov	r2, r6
 800146c:	4629      	mov	r1, r5
 800146e:	4620      	mov	r0, r4
 8001470:	f000 faa9 	bl	80019c6 <xTaskCreate>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	d001      	beq.n	800147e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800147e:	68fb      	ldr	r3, [r7, #12]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001488 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800148e:	201c      	movs	r0, #28
 8001490:	f001 f9ae 	bl	80027f0 <pvPortMalloc>
 8001494:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00a      	beq.n	80014b2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3304      	adds	r3, #4
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f982 	bl	80017b0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80014b2:	687b      	ldr	r3, [r7, #4]
	}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b090      	sub	sp, #64	; 0x40
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10a      	bne.n	80014f2 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e0:	f383 8811 	msr	BASEPRI, r3
 80014e4:	f3bf 8f6f 	isb	sy
 80014e8:	f3bf 8f4f 	dsb	sy
 80014ec:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80014ee:	bf00      	nop
 80014f0:	e7fe      	b.n	80014f0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00a      	beq.n	8001512 <xEventGroupWaitBits+0x56>
	__asm volatile
 80014fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001500:	f383 8811 	msr	BASEPRI, r3
 8001504:	f3bf 8f6f 	isb	sy
 8001508:	f3bf 8f4f 	dsb	sy
 800150c:	61fb      	str	r3, [r7, #28]
}
 800150e:	bf00      	nop
 8001510:	e7fe      	b.n	8001510 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10a      	bne.n	800152e <xEventGroupWaitBits+0x72>
	__asm volatile
 8001518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151c:	f383 8811 	msr	BASEPRI, r3
 8001520:	f3bf 8f6f 	isb	sy
 8001524:	f3bf 8f4f 	dsb	sy
 8001528:	61bb      	str	r3, [r7, #24]
}
 800152a:	bf00      	nop
 800152c:	e7fe      	b.n	800152c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800152e:	f000 ff13 	bl	8002358 <xTaskGetSchedulerState>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <xEventGroupWaitBits+0x82>
 8001538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <xEventGroupWaitBits+0x86>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <xEventGroupWaitBits+0x88>
 8001542:	2300      	movs	r3, #0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10a      	bne.n	800155e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8001548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800154c:	f383 8811 	msr	BASEPRI, r3
 8001550:	f3bf 8f6f 	isb	sy
 8001554:	f3bf 8f4f 	dsb	sy
 8001558:	617b      	str	r3, [r7, #20]
}
 800155a:	bf00      	nop
 800155c:	e7fe      	b.n	800155c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800155e:	f000 fbc1 	bl	8001ce4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8001562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800156e:	f000 f8fe 	bl	800176e <prvTestWaitCondition>
 8001572:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00e      	beq.n	8001598 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800157e:	2300      	movs	r3, #0
 8001580:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d028      	beq.n	80015da <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8001588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	43db      	mvns	r3, r3
 8001590:	401a      	ands	r2, r3
 8001592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e020      	b.n	80015da <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8001598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800159a:	2b00      	cmp	r3, #0
 800159c:	d104      	bne.n	80015a8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80015a2:	2301      	movs	r3, #1
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
 80015a6:	e018      	b.n	80015da <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80015ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80015bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80015c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c6:	1d18      	adds	r0, r3, #4
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015cc:	4313      	orrs	r3, r2
 80015ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015d0:	4619      	mov	r1, r3
 80015d2:	f000 fd49 	bl	8002068 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80015da:	f000 fb91 	bl	8001d00 <xTaskResumeAll>
 80015de:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80015e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d031      	beq.n	800164a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d107      	bne.n	80015fc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <xEventGroupWaitBits+0x198>)
 80015ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	f3bf 8f4f 	dsb	sy
 80015f8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80015fc:	f000 feca 	bl	8002394 <uxTaskResetEventItemValue>
 8001600:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8001602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11a      	bne.n	8001642 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800160c:	f001 f82e 	bl	800266c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8001610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800161c:	f000 f8a7 	bl	800176e <prvTestWaitCondition>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d009      	beq.n	800163a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800162c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	43db      	mvns	r3, r3
 8001634:	401a      	ands	r2, r3
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800163a:	2301      	movs	r3, #1
 800163c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800163e:	f001 f845 	bl	80026cc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8001642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001648:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800164a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800164c:	4618      	mov	r0, r3
 800164e:	3740      	adds	r7, #64	; 0x40
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	e000ed04 	.word	0xe000ed04

08001658 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08e      	sub	sp, #56	; 0x38
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8001662:	2300      	movs	r3, #0
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10a      	bne.n	800168a <xEventGroupSetBits+0x32>
	__asm volatile
 8001674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001678:	f383 8811 	msr	BASEPRI, r3
 800167c:	f3bf 8f6f 	isb	sy
 8001680:	f3bf 8f4f 	dsb	sy
 8001684:	613b      	str	r3, [r7, #16]
}
 8001686:	bf00      	nop
 8001688:	e7fe      	b.n	8001688 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00a      	beq.n	80016aa <xEventGroupSetBits+0x52>
	__asm volatile
 8001694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001698:	f383 8811 	msr	BASEPRI, r3
 800169c:	f3bf 8f6f 	isb	sy
 80016a0:	f3bf 8f4f 	dsb	sy
 80016a4:	60fb      	str	r3, [r7, #12]
}
 80016a6:	bf00      	nop
 80016a8:	e7fe      	b.n	80016a8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80016aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ac:	3304      	adds	r3, #4
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	3308      	adds	r3, #8
 80016b4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80016b6:	f000 fb15 	bl	8001ce4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80016cc:	e03c      	b.n	8001748 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80016ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80016d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80016e4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016ec:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d108      	bne.n	800170a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80016f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00b      	beq.n	800171c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8001704:	2301      	movs	r3, #1
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001708:	e008      	b.n	800171c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	429a      	cmp	r2, r3
 8001716:	d101      	bne.n	800171c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8001718:	2301      	movs	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	2b00      	cmp	r3, #0
 8001720:	d010      	beq.n	8001744 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800172c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8001734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800173c:	4619      	mov	r1, r3
 800173e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001740:	f000 fcce 	bl	80020e0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8001748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	429a      	cmp	r2, r3
 800174e:	d1be      	bne.n	80016ce <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8001750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001756:	43db      	mvns	r3, r3
 8001758:	401a      	ands	r2, r3
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800175e:	f000 facf 	bl	8001d00 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8001762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001764:	681b      	ldr	r3, [r3, #0]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3738      	adds	r7, #56	; 0x38
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800176e:	b480      	push	{r7}
 8001770:	b087      	sub	sp, #28
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d107      	bne.n	8001794 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00a      	beq.n	80017a4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800178e:	2301      	movs	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e007      	b.n	80017a4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	4013      	ands	r3, r2
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	429a      	cmp	r2, r3
 800179e:	d101      	bne.n	80017a4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80017a0:	2301      	movs	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80017a4:	697b      	ldr	r3, [r7, #20]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f103 0208 	add.w	r2, r3, #8
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295
 80017c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f103 0208 	add.w	r2, r3, #8
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f103 0208 	add.w	r2, r3, #8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001806:	b480      	push	{r7}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	601a      	str	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001862:	d103      	bne.n	800186c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e00c      	b.n	8001886 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3308      	adds	r3, #8
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	e002      	b.n	800187a <vListInsert+0x2e>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	429a      	cmp	r2, r3
 8001884:	d2f6      	bcs.n	8001874 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	601a      	str	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6892      	ldr	r2, [r2, #8]
 80018d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6852      	ldr	r2, [r2, #4]
 80018dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d103      	bne.n	80018f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	1e5a      	subs	r2, r3, #1
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800190e:	b580      	push	{r7, lr}
 8001910:	b08e      	sub	sp, #56	; 0x38
 8001912:	af04      	add	r7, sp, #16
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800191c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10a      	bne.n	8001938 <xTaskCreateStatic+0x2a>
	__asm volatile
 8001922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001926:	f383 8811 	msr	BASEPRI, r3
 800192a:	f3bf 8f6f 	isb	sy
 800192e:	f3bf 8f4f 	dsb	sy
 8001932:	623b      	str	r3, [r7, #32]
}
 8001934:	bf00      	nop
 8001936:	e7fe      	b.n	8001936 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10a      	bne.n	8001954 <xTaskCreateStatic+0x46>
	__asm volatile
 800193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001942:	f383 8811 	msr	BASEPRI, r3
 8001946:	f3bf 8f6f 	isb	sy
 800194a:	f3bf 8f4f 	dsb	sy
 800194e:	61fb      	str	r3, [r7, #28]
}
 8001950:	bf00      	nop
 8001952:	e7fe      	b.n	8001952 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001954:	2354      	movs	r3, #84	; 0x54
 8001956:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	2b54      	cmp	r3, #84	; 0x54
 800195c:	d00a      	beq.n	8001974 <xTaskCreateStatic+0x66>
	__asm volatile
 800195e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001962:	f383 8811 	msr	BASEPRI, r3
 8001966:	f3bf 8f6f 	isb	sy
 800196a:	f3bf 8f4f 	dsb	sy
 800196e:	61bb      	str	r3, [r7, #24]
}
 8001970:	bf00      	nop
 8001972:	e7fe      	b.n	8001972 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001976:	2b00      	cmp	r3, #0
 8001978:	d01e      	beq.n	80019b8 <xTaskCreateStatic+0xaa>
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01b      	beq.n	80019b8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001988:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	2202      	movs	r2, #2
 800198e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001992:	2300      	movs	r3, #0
 8001994:	9303      	str	r3, [sp, #12]
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	9302      	str	r3, [sp, #8]
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f850 	bl	8001a50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80019b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019b2:	f000 f8cd 	bl	8001b50 <prvAddNewTaskToReadyList>
 80019b6:	e001      	b.n	80019bc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80019bc:	697b      	ldr	r3, [r7, #20]
	}
 80019be:	4618      	mov	r0, r3
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b08c      	sub	sp, #48	; 0x30
 80019ca:	af04      	add	r7, sp, #16
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4613      	mov	r3, r2
 80019d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 ff08 	bl	80027f0 <pvPortMalloc>
 80019e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00e      	beq.n	8001a06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80019e8:	2054      	movs	r0, #84	; 0x54
 80019ea:	f000 ff01 	bl	80027f0 <pvPortMalloc>
 80019ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
 80019fc:	e005      	b.n	8001a0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f000 ffba 	bl	8002978 <vPortFree>
 8001a04:	e001      	b.n	8001a0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d017      	beq.n	8001a40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001a18:	88fa      	ldrh	r2, [r7, #6]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	9303      	str	r3, [sp, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	9302      	str	r3, [sp, #8]
 8001a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f80e 	bl	8001a50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001a34:	69f8      	ldr	r0, [r7, #28]
 8001a36:	f000 f88b 	bl	8001b50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	e002      	b.n	8001a46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
 8001a44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001a46:	69bb      	ldr	r3, [r7, #24]
	}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f023 0307 	bic.w	r3, r3, #7
 8001a76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00a      	beq.n	8001a98 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a86:	f383 8811 	msr	BASEPRI, r3
 8001a8a:	f3bf 8f6f 	isb	sy
 8001a8e:	f3bf 8f4f 	dsb	sy
 8001a92:	617b      	str	r3, [r7, #20]
}
 8001a94:	bf00      	nop
 8001a96:	e7fe      	b.n	8001a96 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	e012      	b.n	8001ac4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	7819      	ldrb	r1, [r3, #0]
 8001aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4413      	add	r3, r2
 8001aac:	3334      	adds	r3, #52	; 0x34
 8001aae:	460a      	mov	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b0f      	cmp	r3, #15
 8001ac8:	d9e9      	bls.n	8001a9e <prvInitialiseNewTask+0x4e>
 8001aca:	e000      	b.n	8001ace <prvInitialiseNewTask+0x7e>
		{
			break;
 8001acc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad8:	2b06      	cmp	r3, #6
 8001ada:	d901      	bls.n	8001ae0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001adc:	2306      	movs	r3, #6
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aee:	2200      	movs	r2, #0
 8001af0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af4:	3304      	adds	r3, #4
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fe79 	bl	80017ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afe:	3318      	adds	r3, #24
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fe74 	bl	80017ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0e:	f1c3 0207 	rsb	r2, r3, #7
 8001b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1e:	2200      	movs	r2, #0
 8001b20:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	69b8      	ldr	r0, [r7, #24]
 8001b30:	f000 fcae 	bl	8002490 <pxPortInitialiseStack>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b38:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b46:	bf00      	nop
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001b58:	f000 fd88 	bl	800266c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <prvAddNewTaskToReadyList+0xb8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a29      	ldr	r2, [pc, #164]	; (8001c08 <prvAddNewTaskToReadyList+0xb8>)
 8001b64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001b66:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <prvAddNewTaskToReadyList+0xbc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001b6e:	4a27      	ldr	r2, [pc, #156]	; (8001c0c <prvAddNewTaskToReadyList+0xbc>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <prvAddNewTaskToReadyList+0xb8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d110      	bne.n	8001b9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001b7c:	f000 fb2a 	bl	80021d4 <prvInitialiseTaskLists>
 8001b80:	e00d      	b.n	8001b9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <prvAddNewTaskToReadyList+0xc0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <prvAddNewTaskToReadyList+0xbc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d802      	bhi.n	8001b9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001b98:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <prvAddNewTaskToReadyList+0xbc>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <prvAddNewTaskToReadyList+0xc4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <prvAddNewTaskToReadyList+0xc4>)
 8001ba6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	2201      	movs	r2, #1
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <prvAddNewTaskToReadyList+0xc8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <prvAddNewTaskToReadyList+0xc8>)
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <prvAddNewTaskToReadyList+0xcc>)
 8001bc8:	441a      	add	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	f7ff fe18 	bl	8001806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001bd6:	f000 fd79 	bl	80026cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <prvAddNewTaskToReadyList+0xc0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00e      	beq.n	8001c00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <prvAddNewTaskToReadyList+0xbc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <prvAddNewTaskToReadyList+0xd0>)
 8001bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	f3bf 8f4f 	dsb	sy
 8001bfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000380 	.word	0x20000380
 8001c0c:	20000280 	.word	0x20000280
 8001c10:	2000038c 	.word	0x2000038c
 8001c14:	2000039c 	.word	0x2000039c
 8001c18:	20000388 	.word	0x20000388
 8001c1c:	20000284 	.word	0x20000284
 8001c20:	e000ed04 	.word	0xe000ed04

08001c24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001c32:	463a      	mov	r2, r7
 8001c34:	1d39      	adds	r1, r7, #4
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fa88 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001c40:	6839      	ldr	r1, [r7, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	9202      	str	r2, [sp, #8]
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	460a      	mov	r2, r1
 8001c52:	491e      	ldr	r1, [pc, #120]	; (8001ccc <vTaskStartScheduler+0xa8>)
 8001c54:	481e      	ldr	r0, [pc, #120]	; (8001cd0 <vTaskStartScheduler+0xac>)
 8001c56:	f7ff fe5a 	bl	800190e <xTaskCreateStatic>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <vTaskStartScheduler+0xb0>)
 8001c5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001c60:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <vTaskStartScheduler+0xb0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	e001      	b.n	8001c72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d116      	bne.n	8001ca6 <vTaskStartScheduler+0x82>
	__asm volatile
 8001c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7c:	f383 8811 	msr	BASEPRI, r3
 8001c80:	f3bf 8f6f 	isb	sy
 8001c84:	f3bf 8f4f 	dsb	sy
 8001c88:	613b      	str	r3, [r7, #16]
}
 8001c8a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <vTaskStartScheduler+0xb4>)
 8001c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <vTaskStartScheduler+0xb8>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <vTaskStartScheduler+0xbc>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001ca0:	f000 fc72 	bl	8002588 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001ca4:	e00e      	b.n	8001cc4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d10a      	bne.n	8001cc4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8001cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb2:	f383 8811 	msr	BASEPRI, r3
 8001cb6:	f3bf 8f6f 	isb	sy
 8001cba:	f3bf 8f4f 	dsb	sy
 8001cbe:	60fb      	str	r3, [r7, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	e7fe      	b.n	8001cc2 <vTaskStartScheduler+0x9e>
}
 8001cc4:	bf00      	nop
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	08002c48 	.word	0x08002c48
 8001cd0:	080021a5 	.word	0x080021a5
 8001cd4:	200003a4 	.word	0x200003a4
 8001cd8:	200003a0 	.word	0x200003a0
 8001cdc:	2000038c 	.word	0x2000038c
 8001ce0:	20000384 	.word	0x20000384

08001ce4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <vTaskSuspendAll+0x18>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	4a03      	ldr	r2, [pc, #12]	; (8001cfc <vTaskSuspendAll+0x18>)
 8001cf0:	6013      	str	r3, [r2, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	200003a8 	.word	0x200003a8

08001d00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001d0e:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <xTaskResumeAll+0x114>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10a      	bne.n	8001d2c <xTaskResumeAll+0x2c>
	__asm volatile
 8001d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1a:	f383 8811 	msr	BASEPRI, r3
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	f3bf 8f4f 	dsb	sy
 8001d26:	603b      	str	r3, [r7, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	e7fe      	b.n	8001d2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001d2c:	f000 fc9e 	bl	800266c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001d30:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <xTaskResumeAll+0x114>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	4a37      	ldr	r2, [pc, #220]	; (8001e14 <xTaskResumeAll+0x114>)
 8001d38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <xTaskResumeAll+0x114>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d161      	bne.n	8001e06 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d42:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <xTaskResumeAll+0x118>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d05d      	beq.n	8001e06 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d4a:	e02e      	b.n	8001daa <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001d4c:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <xTaskResumeAll+0x11c>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3318      	adds	r3, #24
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fdaf 	bl	80018bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3304      	adds	r3, #4
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fdaa 	bl	80018bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <xTaskResumeAll+0x120>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	4a2a      	ldr	r2, [pc, #168]	; (8001e20 <xTaskResumeAll+0x120>)
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <xTaskResumeAll+0x124>)
 8001d88:	441a      	add	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4610      	mov	r0, r2
 8001d92:	f7ff fd38 	bl	8001806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <xTaskResumeAll+0x128>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d302      	bcc.n	8001daa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <xTaskResumeAll+0x12c>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <xTaskResumeAll+0x11c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1cc      	bne.n	8001d4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001db8:	f000 faaa 	bl	8002310 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <xTaskResumeAll+0x130>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d010      	beq.n	8001dea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001dc8:	f000 f836 	bl	8001e38 <xTaskIncrementTick>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <xTaskResumeAll+0x12c>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f1      	bne.n	8001dc8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <xTaskResumeAll+0x130>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <xTaskResumeAll+0x12c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001df2:	2301      	movs	r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <xTaskResumeAll+0x134>)
 8001df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f3bf 8f4f 	dsb	sy
 8001e02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e06:	f000 fc61 	bl	80026cc <vPortExitCritical>

	return xAlreadyYielded;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200003a8 	.word	0x200003a8
 8001e18:	20000380 	.word	0x20000380
 8001e1c:	20000340 	.word	0x20000340
 8001e20:	20000388 	.word	0x20000388
 8001e24:	20000284 	.word	0x20000284
 8001e28:	20000280 	.word	0x20000280
 8001e2c:	20000394 	.word	0x20000394
 8001e30:	20000390 	.word	0x20000390
 8001e34:	e000ed04 	.word	0xe000ed04

08001e38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e42:	4b51      	ldr	r3, [pc, #324]	; (8001f88 <xTaskIncrementTick+0x150>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 808d 	bne.w	8001f66 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <xTaskIncrementTick+0x154>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001e54:	4a4d      	ldr	r2, [pc, #308]	; (8001f8c <xTaskIncrementTick+0x154>)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d120      	bne.n	8001ea2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001e60:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <xTaskIncrementTick+0x158>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <xTaskIncrementTick+0x48>
	__asm volatile
 8001e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	603b      	str	r3, [r7, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	e7fe      	b.n	8001e7e <xTaskIncrementTick+0x46>
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <xTaskIncrementTick+0x158>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <xTaskIncrementTick+0x15c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a41      	ldr	r2, [pc, #260]	; (8001f90 <xTaskIncrementTick+0x158>)
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4a41      	ldr	r2, [pc, #260]	; (8001f94 <xTaskIncrementTick+0x15c>)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <xTaskIncrementTick+0x160>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	4a3f      	ldr	r2, [pc, #252]	; (8001f98 <xTaskIncrementTick+0x160>)
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	f000 fa37 	bl	8002310 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ea2:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <xTaskIncrementTick+0x164>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d34d      	bcc.n	8001f48 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001eac:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <xTaskIncrementTick+0x158>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <xTaskIncrementTick+0x82>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <xTaskIncrementTick+0x84>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d004      	beq.n	8001eca <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <xTaskIncrementTick+0x164>)
 8001ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec6:	601a      	str	r2, [r3, #0]
					break;
 8001ec8:	e03e      	b.n	8001f48 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <xTaskIncrementTick+0x158>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d203      	bcs.n	8001eea <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001ee2:	4a2e      	ldr	r2, [pc, #184]	; (8001f9c <xTaskIncrementTick+0x164>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6013      	str	r3, [r2, #0]
						break;
 8001ee8:	e02e      	b.n	8001f48 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	3304      	adds	r3, #4
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fce4 	bl	80018bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	3318      	adds	r3, #24
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fcdb 	bl	80018bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <xTaskIncrementTick+0x168>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	4a22      	ldr	r2, [pc, #136]	; (8001fa0 <xTaskIncrementTick+0x168>)
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <xTaskIncrementTick+0x16c>)
 8001f26:	441a      	add	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f7ff fc69 	bl	8001806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <xTaskIncrementTick+0x170>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d3b4      	bcc.n	8001eac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001f42:	2301      	movs	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f46:	e7b1      	b.n	8001eac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <xTaskIncrementTick+0x170>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4e:	4915      	ldr	r1, [pc, #84]	; (8001fa4 <xTaskIncrementTick+0x16c>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d907      	bls.n	8001f70 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001f60:	2301      	movs	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e004      	b.n	8001f70 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <xTaskIncrementTick+0x174>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <xTaskIncrementTick+0x174>)
 8001f6e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <xTaskIncrementTick+0x178>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001f7c:	697b      	ldr	r3, [r7, #20]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200003a8 	.word	0x200003a8
 8001f8c:	20000384 	.word	0x20000384
 8001f90:	20000338 	.word	0x20000338
 8001f94:	2000033c 	.word	0x2000033c
 8001f98:	20000398 	.word	0x20000398
 8001f9c:	200003a0 	.word	0x200003a0
 8001fa0:	20000388 	.word	0x20000388
 8001fa4:	20000284 	.word	0x20000284
 8001fa8:	20000280 	.word	0x20000280
 8001fac:	20000390 	.word	0x20000390
 8001fb0:	20000394 	.word	0x20000394

08001fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <vTaskSwitchContext+0xa0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001fc2:	4b25      	ldr	r3, [pc, #148]	; (8002058 <vTaskSwitchContext+0xa4>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001fc8:	e03f      	b.n	800204a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8001fca:	4b23      	ldr	r3, [pc, #140]	; (8002058 <vTaskSwitchContext+0xa4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001fd0:	4b22      	ldr	r3, [pc, #136]	; (800205c <vTaskSwitchContext+0xa8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	f1c3 031f 	rsb	r3, r3, #31
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	491e      	ldr	r1, [pc, #120]	; (8002060 <vTaskSwitchContext+0xac>)
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10a      	bne.n	8002010 <vTaskSwitchContext+0x5c>
	__asm volatile
 8001ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffe:	f383 8811 	msr	BASEPRI, r3
 8002002:	f3bf 8f6f 	isb	sy
 8002006:	f3bf 8f4f 	dsb	sy
 800200a:	607b      	str	r3, [r7, #4]
}
 800200c:	bf00      	nop
 800200e:	e7fe      	b.n	800200e <vTaskSwitchContext+0x5a>
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4a11      	ldr	r2, [pc, #68]	; (8002060 <vTaskSwitchContext+0xac>)
 800201c:	4413      	add	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	3308      	adds	r3, #8
 8002032:	429a      	cmp	r2, r3
 8002034:	d104      	bne.n	8002040 <vTaskSwitchContext+0x8c>
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	4a07      	ldr	r2, [pc, #28]	; (8002064 <vTaskSwitchContext+0xb0>)
 8002048:	6013      	str	r3, [r2, #0]
}
 800204a:	bf00      	nop
 800204c:	371c      	adds	r7, #28
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	200003a8 	.word	0x200003a8
 8002058:	20000394 	.word	0x20000394
 800205c:	20000388 	.word	0x20000388
 8002060:	20000284 	.word	0x20000284
 8002064:	20000280 	.word	0x20000280

08002068 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10a      	bne.n	8002090 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800207a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207e:	f383 8811 	msr	BASEPRI, r3
 8002082:	f3bf 8f6f 	isb	sy
 8002086:	f3bf 8f4f 	dsb	sy
 800208a:	617b      	str	r3, [r7, #20]
}
 800208c:	bf00      	nop
 800208e:	e7fe      	b.n	800208e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10a      	bne.n	80020ae <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8002098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	f3bf 8f6f 	isb	sy
 80020a4:	f3bf 8f4f 	dsb	sy
 80020a8:	613b      	str	r3, [r7, #16]
}
 80020aa:	bf00      	nop
 80020ac:	e7fe      	b.n	80020ac <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020b8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3318      	adds	r3, #24
 80020c0:	4619      	mov	r1, r3
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f7ff fb9f 	bl	8001806 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80020c8:	2101      	movs	r1, #1
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f97a 	bl	80023c4 <prvAddCurrentTaskToDelayedList>
}
 80020d0:	bf00      	nop
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200003a8 	.word	0x200003a8
 80020dc:	20000280 	.word	0x20000280

080020e0 <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10a      	bne.n	8002108 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80020f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f6:	f383 8811 	msr	BASEPRI, r3
 80020fa:	f3bf 8f6f 	isb	sy
 80020fe:	f3bf 8f4f 	dsb	sy
 8002102:	613b      	str	r3, [r7, #16]
}
 8002104:	bf00      	nop
 8002106:	e7fe      	b.n	8002106 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10a      	bne.n	8002134 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	60fb      	str	r3, [r7, #12]
}
 8002130:	bf00      	nop
 8002132:	e7fe      	b.n	8002132 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fbc1 	bl	80018bc <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3304      	adds	r3, #4
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fbbc 	bl	80018bc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	2201      	movs	r2, #1
 800214a:	409a      	lsls	r2, r3
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4313      	orrs	r3, r2
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8002164:	441a      	add	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3304      	adds	r3, #4
 800216a:	4619      	mov	r1, r3
 800216c:	4610      	mov	r0, r2
 800216e:	f7ff fb4a 	bl	8001806 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	429a      	cmp	r2, r3
 800217e:	d902      	bls.n	8002186 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]
	}
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200003a8 	.word	0x200003a8
 8002194:	20000388 	.word	0x20000388
 8002198:	20000284 	.word	0x20000284
 800219c:	20000280 	.word	0x20000280
 80021a0:	20000394 	.word	0x20000394

080021a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80021ac:	f000 f852 	bl	8002254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <prvIdleTask+0x28>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d9f9      	bls.n	80021ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <prvIdleTask+0x2c>)
 80021ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f3bf 8f4f 	dsb	sy
 80021c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80021c8:	e7f0      	b.n	80021ac <prvIdleTask+0x8>
 80021ca:	bf00      	nop
 80021cc:	20000284 	.word	0x20000284
 80021d0:	e000ed04 	.word	0xe000ed04

080021d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	e00c      	b.n	80021fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <prvInitialiseTaskLists+0x60>)
 80021ec:	4413      	add	r3, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fade 	bl	80017b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3301      	adds	r3, #1
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b06      	cmp	r3, #6
 80021fe:	d9ef      	bls.n	80021e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002200:	480d      	ldr	r0, [pc, #52]	; (8002238 <prvInitialiseTaskLists+0x64>)
 8002202:	f7ff fad5 	bl	80017b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002206:	480d      	ldr	r0, [pc, #52]	; (800223c <prvInitialiseTaskLists+0x68>)
 8002208:	f7ff fad2 	bl	80017b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <prvInitialiseTaskLists+0x6c>)
 800220e:	f7ff facf 	bl	80017b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002212:	480c      	ldr	r0, [pc, #48]	; (8002244 <prvInitialiseTaskLists+0x70>)
 8002214:	f7ff facc 	bl	80017b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002218:	480b      	ldr	r0, [pc, #44]	; (8002248 <prvInitialiseTaskLists+0x74>)
 800221a:	f7ff fac9 	bl	80017b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <prvInitialiseTaskLists+0x78>)
 8002220:	4a05      	ldr	r2, [pc, #20]	; (8002238 <prvInitialiseTaskLists+0x64>)
 8002222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <prvInitialiseTaskLists+0x7c>)
 8002226:	4a05      	ldr	r2, [pc, #20]	; (800223c <prvInitialiseTaskLists+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000284 	.word	0x20000284
 8002238:	20000310 	.word	0x20000310
 800223c:	20000324 	.word	0x20000324
 8002240:	20000340 	.word	0x20000340
 8002244:	20000354 	.word	0x20000354
 8002248:	2000036c 	.word	0x2000036c
 800224c:	20000338 	.word	0x20000338
 8002250:	2000033c 	.word	0x2000033c

08002254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800225a:	e019      	b.n	8002290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800225c:	f000 fa06 	bl	800266c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <prvCheckTasksWaitingTermination+0x50>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fb25 	bl	80018bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <prvCheckTasksWaitingTermination+0x54>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3b01      	subs	r3, #1
 8002278:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <prvCheckTasksWaitingTermination+0x54>)
 800227a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <prvCheckTasksWaitingTermination+0x58>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3b01      	subs	r3, #1
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <prvCheckTasksWaitingTermination+0x58>)
 8002284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002286:	f000 fa21 	bl	80026cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f810 	bl	80022b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <prvCheckTasksWaitingTermination+0x58>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e1      	bne.n	800225c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000354 	.word	0x20000354
 80022a8:	20000380 	.word	0x20000380
 80022ac:	20000368 	.word	0x20000368

080022b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fb56 	bl	8002978 <vPortFree>
				vPortFree( pxTCB );
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 fb53 	bl	8002978 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80022d2:	e018      	b.n	8002306 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d103      	bne.n	80022e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fb4a 	bl	8002978 <vPortFree>
	}
 80022e4:	e00f      	b.n	8002306 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d00a      	beq.n	8002306 <prvDeleteTCB+0x56>
	__asm volatile
 80022f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	60fb      	str	r3, [r7, #12]
}
 8002302:	bf00      	nop
 8002304:	e7fe      	b.n	8002304 <prvDeleteTCB+0x54>
	}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <prvResetNextTaskUnblockTime+0x40>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <prvResetNextTaskUnblockTime+0x14>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <prvResetNextTaskUnblockTime+0x16>
 8002324:	2300      	movs	r3, #0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d004      	beq.n	8002334 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <prvResetNextTaskUnblockTime+0x44>)
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002332:	e008      	b.n	8002346 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <prvResetNextTaskUnblockTime+0x40>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4a04      	ldr	r2, [pc, #16]	; (8002354 <prvResetNextTaskUnblockTime+0x44>)
 8002344:	6013      	str	r3, [r2, #0]
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000338 	.word	0x20000338
 8002354:	200003a0 	.word	0x200003a0

08002358 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <xTaskGetSchedulerState+0x34>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002366:	2301      	movs	r3, #1
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	e008      	b.n	800237e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <xTaskGetSchedulerState+0x38>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002374:	2302      	movs	r3, #2
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	e001      	b.n	800237e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800237e:	687b      	ldr	r3, [r7, #4]
	}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000038c 	.word	0x2000038c
 8002390:	200003a8 	.word	0x200003a8

08002394 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <uxTaskResetEventItemValue+0x2c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <uxTaskResetEventItemValue+0x2c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <uxTaskResetEventItemValue+0x2c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f1c2 0207 	rsb	r2, r2, #7
 80023b0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80023b2:	687b      	ldr	r3, [r7, #4]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000280 	.word	0x20000280

080023c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80023ce:	4b29      	ldr	r3, [pc, #164]	; (8002474 <prvAddCurrentTaskToDelayedList+0xb0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023d4:	4b28      	ldr	r3, [pc, #160]	; (8002478 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3304      	adds	r3, #4
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fa6e 	bl	80018bc <uxListRemove>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10b      	bne.n	80023fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80023e6:	4b24      	ldr	r3, [pc, #144]	; (8002478 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	2201      	movs	r2, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43da      	mvns	r2, r3
 80023f4:	4b21      	ldr	r3, [pc, #132]	; (800247c <prvAddCurrentTaskToDelayedList+0xb8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4013      	ands	r3, r2
 80023fa:	4a20      	ldr	r2, [pc, #128]	; (800247c <prvAddCurrentTaskToDelayedList+0xb8>)
 80023fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d10a      	bne.n	800241c <prvAddCurrentTaskToDelayedList+0x58>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800240c:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3304      	adds	r3, #4
 8002412:	4619      	mov	r1, r3
 8002414:	481a      	ldr	r0, [pc, #104]	; (8002480 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002416:	f7ff f9f6 	bl	8001806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800241a:	e026      	b.n	800246a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	429a      	cmp	r2, r3
 8002432:	d209      	bcs.n	8002448 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3304      	adds	r3, #4
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f7ff fa03 	bl	800184c <vListInsert>
}
 8002446:	e010      	b.n	800246a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <prvAddCurrentTaskToDelayedList+0xc4>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3304      	adds	r3, #4
 8002452:	4619      	mov	r1, r3
 8002454:	4610      	mov	r0, r2
 8002456:	f7ff f9f9 	bl	800184c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <prvAddCurrentTaskToDelayedList+0xc8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	429a      	cmp	r2, r3
 8002462:	d202      	bcs.n	800246a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002464:	4a09      	ldr	r2, [pc, #36]	; (800248c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	6013      	str	r3, [r2, #0]
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000384 	.word	0x20000384
 8002478:	20000280 	.word	0x20000280
 800247c:	20000388 	.word	0x20000388
 8002480:	2000036c 	.word	0x2000036c
 8002484:	2000033c 	.word	0x2000033c
 8002488:	20000338 	.word	0x20000338
 800248c:	200003a0 	.word	0x200003a0

08002490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3b04      	subs	r3, #4
 80024a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3b04      	subs	r3, #4
 80024ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f023 0201 	bic.w	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3b04      	subs	r3, #4
 80024be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80024c0:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <pxPortInitialiseStack+0x54>)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3b14      	subs	r3, #20
 80024ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3b20      	subs	r3, #32
 80024d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80024d8:	68fb      	ldr	r3, [r7, #12]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	080024e9 	.word	0x080024e9

080024e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <prvTaskExitError+0x54>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d00a      	beq.n	8002512 <prvTaskExitError+0x2a>
	__asm volatile
 80024fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	60fb      	str	r3, [r7, #12]
}
 800250e:	bf00      	nop
 8002510:	e7fe      	b.n	8002510 <prvTaskExitError+0x28>
	__asm volatile
 8002512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	60bb      	str	r3, [r7, #8]
}
 8002524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002526:	bf00      	nop
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0fc      	beq.n	8002528 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800252e:	bf00      	nop
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	2000000c 	.word	0x2000000c

08002540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <pxCurrentTCBConst2>)
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	6808      	ldr	r0, [r1, #0]
 8002546:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800254a:	f380 8809 	msr	PSP, r0
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f04f 0000 	mov.w	r0, #0
 8002556:	f380 8811 	msr	BASEPRI, r0
 800255a:	f04e 0e0d 	orr.w	lr, lr, #13
 800255e:	4770      	bx	lr

08002560 <pxCurrentTCBConst2>:
 8002560:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop

08002568 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002568:	4806      	ldr	r0, [pc, #24]	; (8002584 <prvPortStartFirstTask+0x1c>)
 800256a:	6800      	ldr	r0, [r0, #0]
 800256c:	6800      	ldr	r0, [r0, #0]
 800256e:	f380 8808 	msr	MSP, r0
 8002572:	b662      	cpsie	i
 8002574:	b661      	cpsie	f
 8002576:	f3bf 8f4f 	dsb	sy
 800257a:	f3bf 8f6f 	isb	sy
 800257e:	df00      	svc	0
 8002580:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002582:	bf00      	nop
 8002584:	e000ed08 	.word	0xe000ed08

08002588 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800258e:	4b32      	ldr	r3, [pc, #200]	; (8002658 <xPortStartScheduler+0xd0>)
 8002590:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	22ff      	movs	r2, #255	; 0xff
 800259e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b2a      	ldr	r3, [pc, #168]	; (800265c <xPortStartScheduler+0xd4>)
 80025b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <xPortStartScheduler+0xd8>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025bc:	e009      	b.n	80025d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80025be:	4b28      	ldr	r3, [pc, #160]	; (8002660 <xPortStartScheduler+0xd8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	4a26      	ldr	r2, [pc, #152]	; (8002660 <xPortStartScheduler+0xd8>)
 80025c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025da:	2b80      	cmp	r3, #128	; 0x80
 80025dc:	d0ef      	beq.n	80025be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <xPortStartScheduler+0xd8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d00a      	beq.n	8002600 <xPortStartScheduler+0x78>
	__asm volatile
 80025ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ee:	f383 8811 	msr	BASEPRI, r3
 80025f2:	f3bf 8f6f 	isb	sy
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	60bb      	str	r3, [r7, #8]
}
 80025fc:	bf00      	nop
 80025fe:	e7fe      	b.n	80025fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002600:	4b17      	ldr	r3, [pc, #92]	; (8002660 <xPortStartScheduler+0xd8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	4a16      	ldr	r2, [pc, #88]	; (8002660 <xPortStartScheduler+0xd8>)
 8002608:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <xPortStartScheduler+0xd8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002612:	4a13      	ldr	r2, [pc, #76]	; (8002660 <xPortStartScheduler+0xd8>)
 8002614:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <xPortStartScheduler+0xdc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a10      	ldr	r2, [pc, #64]	; (8002664 <xPortStartScheduler+0xdc>)
 8002624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002628:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <xPortStartScheduler+0xdc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a0d      	ldr	r2, [pc, #52]	; (8002664 <xPortStartScheduler+0xdc>)
 8002630:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002634:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002636:	f000 f8b9 	bl	80027ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <xPortStartScheduler+0xe0>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002640:	f7ff ff92 	bl	8002568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002644:	f7ff fcb6 	bl	8001fb4 <vTaskSwitchContext>
	prvTaskExitError();
 8002648:	f7ff ff4e 	bl	80024e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	e000e400 	.word	0xe000e400
 800265c:	200003ac 	.word	0x200003ac
 8002660:	200003b0 	.word	0x200003b0
 8002664:	e000ed20 	.word	0xe000ed20
 8002668:	2000000c 	.word	0x2000000c

0800266c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
	__asm volatile
 8002672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002676:	f383 8811 	msr	BASEPRI, r3
 800267a:	f3bf 8f6f 	isb	sy
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	607b      	str	r3, [r7, #4]
}
 8002684:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <vPortEnterCritical+0x58>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <vPortEnterCritical+0x58>)
 800268e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <vPortEnterCritical+0x58>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10f      	bne.n	80026b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <vPortEnterCritical+0x5c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80026a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	603b      	str	r3, [r7, #0]
}
 80026b4:	bf00      	nop
 80026b6:	e7fe      	b.n	80026b6 <vPortEnterCritical+0x4a>
	}
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000000c 	.word	0x2000000c
 80026c8:	e000ed04 	.word	0xe000ed04

080026cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <vPortExitCritical+0x4c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <vPortExitCritical+0x24>
	__asm volatile
 80026da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	607b      	str	r3, [r7, #4]
}
 80026ec:	bf00      	nop
 80026ee:	e7fe      	b.n	80026ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <vPortExitCritical+0x4c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	4a08      	ldr	r2, [pc, #32]	; (8002718 <vPortExitCritical+0x4c>)
 80026f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80026fa:	4b07      	ldr	r3, [pc, #28]	; (8002718 <vPortExitCritical+0x4c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d105      	bne.n	800270e <vPortExitCritical+0x42>
 8002702:	2300      	movs	r3, #0
 8002704:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800270c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	2000000c 	.word	0x2000000c
 800271c:	00000000 	.word	0x00000000

08002720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002720:	f3ef 8009 	mrs	r0, PSP
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <pxCurrentTCBConst>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002730:	6010      	str	r0, [r2, #0]
 8002732:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002736:	f04f 0050 	mov.w	r0, #80	; 0x50
 800273a:	f380 8811 	msr	BASEPRI, r0
 800273e:	f7ff fc39 	bl	8001fb4 <vTaskSwitchContext>
 8002742:	f04f 0000 	mov.w	r0, #0
 8002746:	f380 8811 	msr	BASEPRI, r0
 800274a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	6808      	ldr	r0, [r1, #0]
 8002752:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002756:	f380 8809 	msr	PSP, r0
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	4770      	bx	lr

08002760 <pxCurrentTCBConst>:
 8002760:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop

08002768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
	__asm volatile
 800276e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002772:	f383 8811 	msr	BASEPRI, r3
 8002776:	f3bf 8f6f 	isb	sy
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	607b      	str	r3, [r7, #4]
}
 8002780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002782:	f7ff fb59 	bl	8001e38 <xTaskIncrementTick>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <SysTick_Handler+0x40>)
 800278e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	2300      	movs	r3, #0
 8002796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f383 8811 	msr	BASEPRI, r3
}
 800279e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	e000ed04 	.word	0xe000ed04

080027ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <vPortSetupTimerInterrupt+0x30>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <vPortSetupTimerInterrupt+0x34>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <vPortSetupTimerInterrupt+0x38>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <vPortSetupTimerInterrupt+0x3c>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	099b      	lsrs	r3, r3, #6
 80027c8:	4a08      	ldr	r2, [pc, #32]	; (80027ec <vPortSetupTimerInterrupt+0x40>)
 80027ca:	3b01      	subs	r3, #1
 80027cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80027ce:	4b03      	ldr	r3, [pc, #12]	; (80027dc <vPortSetupTimerInterrupt+0x30>)
 80027d0:	2207      	movs	r2, #7
 80027d2:	601a      	str	r2, [r3, #0]
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	e000e010 	.word	0xe000e010
 80027e0:	e000e018 	.word	0xe000e018
 80027e4:	20000000 	.word	0x20000000
 80027e8:	10624dd3 	.word	0x10624dd3
 80027ec:	e000e014 	.word	0xe000e014

080027f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80027fc:	f7ff fa72 	bl	8001ce4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002800:	4b58      	ldr	r3, [pc, #352]	; (8002964 <pvPortMalloc+0x174>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002808:	f000 f910 	bl	8002a2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800280c:	4b56      	ldr	r3, [pc, #344]	; (8002968 <pvPortMalloc+0x178>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	f040 808e 	bne.w	8002936 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01d      	beq.n	800285c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002820:	2208      	movs	r2, #8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	2b00      	cmp	r3, #0
 8002830:	d014      	beq.n	800285c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f023 0307 	bic.w	r3, r3, #7
 8002838:	3308      	adds	r3, #8
 800283a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <pvPortMalloc+0x6c>
	__asm volatile
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	617b      	str	r3, [r7, #20]
}
 8002858:	bf00      	nop
 800285a:	e7fe      	b.n	800285a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d069      	beq.n	8002936 <pvPortMalloc+0x146>
 8002862:	4b42      	ldr	r3, [pc, #264]	; (800296c <pvPortMalloc+0x17c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	429a      	cmp	r2, r3
 800286a:	d864      	bhi.n	8002936 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800286c:	4b40      	ldr	r3, [pc, #256]	; (8002970 <pvPortMalloc+0x180>)
 800286e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002870:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <pvPortMalloc+0x180>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002876:	e004      	b.n	8002882 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	d903      	bls.n	8002894 <pvPortMalloc+0xa4>
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f1      	bne.n	8002878 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002894:	4b33      	ldr	r3, [pc, #204]	; (8002964 <pvPortMalloc+0x174>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289a:	429a      	cmp	r2, r3
 800289c:	d04b      	beq.n	8002936 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2208      	movs	r2, #8
 80028a4:	4413      	add	r3, r2
 80028a6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	1ad2      	subs	r2, r2, r3
 80028b8:	2308      	movs	r3, #8
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	429a      	cmp	r2, r3
 80028be:	d91f      	bls.n	8002900 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80028c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <pvPortMalloc+0xf8>
	__asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	613b      	str	r3, [r7, #16]
}
 80028e4:	bf00      	nop
 80028e6:	e7fe      	b.n	80028e6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	1ad2      	subs	r2, r2, r3
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80028fa:	69b8      	ldr	r0, [r7, #24]
 80028fc:	f000 f8f8 	bl	8002af0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002900:	4b1a      	ldr	r3, [pc, #104]	; (800296c <pvPortMalloc+0x17c>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	4a18      	ldr	r2, [pc, #96]	; (800296c <pvPortMalloc+0x17c>)
 800290c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800290e:	4b17      	ldr	r3, [pc, #92]	; (800296c <pvPortMalloc+0x17c>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <pvPortMalloc+0x184>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d203      	bcs.n	8002922 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <pvPortMalloc+0x17c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a15      	ldr	r2, [pc, #84]	; (8002974 <pvPortMalloc+0x184>)
 8002920:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <pvPortMalloc+0x178>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	431a      	orrs	r2, r3
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002936:	f7ff f9e3 	bl	8001d00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <pvPortMalloc+0x16a>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	60fb      	str	r3, [r7, #12]
}
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <pvPortMalloc+0x168>
	return pvReturn;
 800295a:	69fb      	ldr	r3, [r7, #28]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3728      	adds	r7, #40	; 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000fbc 	.word	0x20000fbc
 8002968:	20000fc8 	.word	0x20000fc8
 800296c:	20000fc0 	.word	0x20000fc0
 8002970:	20000fb4 	.word	0x20000fb4
 8002974:	20000fc4 	.word	0x20000fc4

08002978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d048      	beq.n	8002a1c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800298a:	2308      	movs	r3, #8
 800298c:	425b      	negs	r3, r3
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4413      	add	r3, r2
 8002992:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <vPortFree+0xac>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <vPortFree+0x44>
	__asm volatile
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	60fb      	str	r3, [r7, #12]
}
 80029b8:	bf00      	nop
 80029ba:	e7fe      	b.n	80029ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <vPortFree+0x62>
	__asm volatile
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	60bb      	str	r3, [r7, #8]
}
 80029d6:	bf00      	nop
 80029d8:	e7fe      	b.n	80029d8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <vPortFree+0xac>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d019      	beq.n	8002a1c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d115      	bne.n	8002a1c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <vPortFree+0xac>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	401a      	ands	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002a00:	f7ff f970 	bl	8001ce4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <vPortFree+0xb0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <vPortFree+0xb0>)
 8002a10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a12:	6938      	ldr	r0, [r7, #16]
 8002a14:	f000 f86c 	bl	8002af0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002a18:	f7ff f972 	bl	8001d00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002a1c:	bf00      	nop
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000fc8 	.word	0x20000fc8
 8002a28:	20000fc0 	.word	0x20000fc0

08002a2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <prvHeapInit+0xac>)
 8002a3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3307      	adds	r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0307 	bic.w	r3, r3, #7
 8002a52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <prvHeapInit+0xac>)
 8002a5c:	4413      	add	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a64:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <prvHeapInit+0xb0>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <prvHeapInit+0xb0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4413      	add	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002a78:	2208      	movs	r2, #8
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0307 	bic.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a15      	ldr	r2, [pc, #84]	; (8002ae0 <prvHeapInit+0xb4>)
 8002a8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <prvHeapInit+0xb4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <prvHeapInit+0xb4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	1ad2      	subs	r2, r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <prvHeapInit+0xb4>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <prvHeapInit+0xb8>)
 8002aba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <prvHeapInit+0xbc>)
 8002ac2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <prvHeapInit+0xc0>)
 8002ac6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002aca:	601a      	str	r2, [r3, #0]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	200003b4 	.word	0x200003b4
 8002adc:	20000fb4 	.word	0x20000fb4
 8002ae0:	20000fbc 	.word	0x20000fbc
 8002ae4:	20000fc4 	.word	0x20000fc4
 8002ae8:	20000fc0 	.word	0x20000fc0
 8002aec:	20000fc8 	.word	0x20000fc8

08002af0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <prvInsertBlockIntoFreeList+0xa8>)
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e002      	b.n	8002b04 <prvInsertBlockIntoFreeList+0x14>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d8f7      	bhi.n	8002afe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	4413      	add	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d108      	bne.n	8002b32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	441a      	add	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	441a      	add	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d118      	bne.n	8002b78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <prvInsertBlockIntoFreeList+0xac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d00d      	beq.n	8002b6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	441a      	add	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e008      	b.n	8002b80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <prvInsertBlockIntoFreeList+0xac>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e003      	b.n	8002b80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d002      	beq.n	8002b8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	20000fb4 	.word	0x20000fb4
 8002b9c:	20000fbc 	.word	0x20000fbc

08002ba0 <__libc_init_array>:
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	4d0c      	ldr	r5, [pc, #48]	; (8002bd8 <__libc_init_array+0x38>)
 8002ba6:	4c0d      	ldr	r4, [pc, #52]	; (8002bdc <__libc_init_array+0x3c>)
 8002ba8:	1b64      	subs	r4, r4, r5
 8002baa:	10a4      	asrs	r4, r4, #2
 8002bac:	42a6      	cmp	r6, r4
 8002bae:	d109      	bne.n	8002bc4 <__libc_init_array+0x24>
 8002bb0:	f000 f822 	bl	8002bf8 <_init>
 8002bb4:	2600      	movs	r6, #0
 8002bb6:	4d0a      	ldr	r5, [pc, #40]	; (8002be0 <__libc_init_array+0x40>)
 8002bb8:	4c0a      	ldr	r4, [pc, #40]	; (8002be4 <__libc_init_array+0x44>)
 8002bba:	1b64      	subs	r4, r4, r5
 8002bbc:	10a4      	asrs	r4, r4, #2
 8002bbe:	42a6      	cmp	r6, r4
 8002bc0:	d105      	bne.n	8002bce <__libc_init_array+0x2e>
 8002bc2:	bd70      	pop	{r4, r5, r6, pc}
 8002bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc8:	4798      	blx	r3
 8002bca:	3601      	adds	r6, #1
 8002bcc:	e7ee      	b.n	8002bac <__libc_init_array+0xc>
 8002bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd2:	4798      	blx	r3
 8002bd4:	3601      	adds	r6, #1
 8002bd6:	e7f2      	b.n	8002bbe <__libc_init_array+0x1e>
 8002bd8:	08002c68 	.word	0x08002c68
 8002bdc:	08002c68 	.word	0x08002c68
 8002be0:	08002c68 	.word	0x08002c68
 8002be4:	08002c6c 	.word	0x08002c6c

08002be8 <memset>:
 8002be8:	4603      	mov	r3, r0
 8002bea:	4402      	add	r2, r0
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d100      	bne.n	8002bf2 <memset+0xa>
 8002bf0:	4770      	bx	lr
 8002bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bf6:	e7f9      	b.n	8002bec <memset+0x4>

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr

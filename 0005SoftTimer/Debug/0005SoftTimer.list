
0005SoftTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e38  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc4  08003fc4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003fc4  08003fc4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fc4  08003fc4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fc8  08003fc8  00013fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015b0  20000010  08003fdc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c0  08003fdc  000215c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fc5  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a59  00000000  00000000  00031ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00034a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  000359d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182ba  00000000  00000000  00036830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe94  00000000  00000000  0004eaea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe5d  00000000  00000000  0005e97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee7db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc4  00000000  00000000  000ee830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f30 	.word	0x08003f30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003f30 	.word	0x08003f30

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4a07      	ldr	r2, [pc, #28]	; (80001ac <vApplicationGetTimerTaskMemory+0x2c>)
 8000190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <vApplicationGetTimerTaskMemory+0x30>)
 8000196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800019e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000280 	.word	0x20000280
 80001b0:	200002d4 	.word	0x200002d4

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b5b0      	push	{r4, r5, r7, lr}
 80001b6:	b08c      	sub	sp, #48	; 0x30
 80001b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ba:	f000 f9f3 	bl	80005a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001be:	f000 f84f 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c2:	f000 f893 	bl	80002ec <MX_GPIO_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 80001c6:	4b1c      	ldr	r3, [pc, #112]	; (8000238 <main+0x84>)
 80001c8:	623b      	str	r3, [r7, #32]
 80001ca:	2300      	movs	r3, #0
 80001cc:	627b      	str	r3, [r7, #36]	; 0x24
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80001ce:	f107 0320 	add.w	r3, r7, #32
 80001d2:	2200      	movs	r2, #0
 80001d4:	2101      	movs	r1, #1
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 fa06 	bl	80015e8 <osTimerCreate>
 80001dc:	4603      	mov	r3, r0
 80001de:	4a17      	ldr	r2, [pc, #92]	; (800023c <main+0x88>)
 80001e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  myTimer02Handle = xTimerCreate("Timer2", 4000/portTICK_PERIOD_MS, pdFALSE, (void *)1, Callback02);
 80001e2:	4b17      	ldr	r3, [pc, #92]	; (8000240 <main+0x8c>)
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2301      	movs	r3, #1
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80001ee:	4815      	ldr	r0, [pc, #84]	; (8000244 <main+0x90>)
 80001f0:	f002 ff58 	bl	80030a4 <xTimerCreate>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a14      	ldr	r2, [pc, #80]	; (8000248 <main+0x94>)
 80001f8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001fa:	4b14      	ldr	r3, [pc, #80]	; (800024c <main+0x98>)
 80001fc:	1d3c      	adds	r4, r7, #4
 80001fe:	461d      	mov	r5, r3
 8000200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000204:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2100      	movs	r1, #0
 8000210:	4618      	mov	r0, r3
 8000212:	f001 f988 	bl	8001526 <osThreadCreate>
 8000216:	4603      	mov	r3, r0
 8000218:	4a0d      	ldr	r2, [pc, #52]	; (8000250 <main+0x9c>)
 800021a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(taskFunc	, "task02", 128, NULL, 5, &task02handle);
 800021c:	4b0d      	ldr	r3, [pc, #52]	; (8000254 <main+0xa0>)
 800021e:	9301      	str	r3, [sp, #4]
 8000220:	2305      	movs	r3, #5
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	2300      	movs	r3, #0
 8000226:	2280      	movs	r2, #128	; 0x80
 8000228:	490b      	ldr	r1, [pc, #44]	; (8000258 <main+0xa4>)
 800022a:	480c      	ldr	r0, [pc, #48]	; (800025c <main+0xa8>)
 800022c:	f002 f840 	bl	80022b0 <xTaskCreate>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000230:	f001 f972 	bl	8001518 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	e7fe      	b.n	8000234 <main+0x80>
 8000236:	bf00      	nop
 8000238:	0800039d 	.word	0x0800039d
 800023c:	20001530 	.word	0x20001530
 8000240:	08000365 	.word	0x08000365
 8000244:	08003f54 	.word	0x08003f54
 8000248:	20001528 	.word	0x20001528
 800024c:	08003f64 	.word	0x08003f64
 8000250:	20001524 	.word	0x20001524
 8000254:	2000152c 	.word	0x2000152c
 8000258:	08003f5c 	.word	0x08003f5c
 800025c:	08000331 	.word	0x08000331

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b090      	sub	sp, #64	; 0x40
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	2228      	movs	r2, #40	; 0x28
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f003 fe56 	bl	8003f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000282:	2301      	movs	r3, #1
 8000284:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0318 	add.w	r3, r7, #24
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fa8d 	bl	80007c8 <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b4:	f000 f894 	bl	80003e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2302      	movs	r3, #2
 80002be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2102      	movs	r1, #2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fcf8 	bl	8000cc8 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002de:	f000 f87f 	bl	80003e0 <Error_Handler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	3740      	adds	r7, #64	; 0x40
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_GPIO_Init+0x40>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a0d      	ldr	r2, [pc, #52]	; (800032c <MX_GPIO_Init+0x40>)
 80002f8:	f043 0320 	orr.w	r3, r3, #32
 80002fc:	6193      	str	r3, [r2, #24]
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <MX_GPIO_Init+0x40>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	f003 0320 	and.w	r3, r3, #32
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <MX_GPIO_Init+0x40>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a07      	ldr	r2, [pc, #28]	; (800032c <MX_GPIO_Init+0x40>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	6193      	str	r3, [r2, #24]
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <MX_GPIO_Init+0x40>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	f003 0304 	and.w	r3, r3, #4
 800031e:	603b      	str	r3, [r7, #0]
 8000320:	683b      	ldr	r3, [r7, #0]

}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000

08000330 <taskFunc>:

/* USER CODE BEGIN 4 */
void taskFunc(void *param)
{
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b085      	sub	sp, #20
 8000334:	af02      	add	r7, sp, #8
 8000336:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(NutNhan == 1)
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <taskFunc+0x2c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d1fb      	bne.n	8000338 <taskFunc+0x8>
		{
			xTimerStart(myTimer02Handle, 10);
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <taskFunc+0x30>)
 8000342:	681c      	ldr	r4, [r3, #0]
 8000344:	f002 fa26 	bl	8002794 <xTaskGetTickCount>
 8000348:	4602      	mov	r2, r0
 800034a:	230a      	movs	r3, #10
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	2300      	movs	r3, #0
 8000350:	2101      	movs	r1, #1
 8000352:	4620      	mov	r0, r4
 8000354:	f002 ff36 	bl	80031c4 <xTimerGenericCommand>
		if(NutNhan == 1)
 8000358:	e7ee      	b.n	8000338 <taskFunc+0x8>
 800035a:	bf00      	nop
 800035c:	200006d4 	.word	0x200006d4
 8000360:	20001528 	.word	0x20001528

08000364 <Callback02>:
		}
	}
}
void Callback02(xTimerHandle xtimer)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	if(xtimer == myTimer02Handle)
	{
		// tắt led
	}
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
	...

08000378 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osTimerStart(myTimer01Handle, 2000);
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <StartDefaultTask+0x20>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000388:	4618      	mov	r0, r3
 800038a:	f001 f961 	bl	8001650 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 800038e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000392:	f001 f914 	bl	80015be <osDelay>
 8000396:	e7fa      	b.n	800038e <StartDefaultTask+0x16>
 8000398:	20001530 	.word	0x20001530

0800039c <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	Count ++;
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <Callback01+0x1c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	3301      	adds	r3, #1
 80003aa:	4a03      	ldr	r2, [pc, #12]	; (80003b8 <Callback01+0x1c>)
 80003ac:	6013      	str	r3, [r2, #0]
  /* USER CODE END Callback01 */
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	200006d8 	.word	0x200006d8

080003bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d101      	bne.n	80003d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ce:	f000 f8ff 	bl	80005d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40000800 	.word	0x40000800

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <Error_Handler+0x8>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <HAL_MspInit+0x68>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a17      	ldr	r2, [pc, #92]	; (8000454 <HAL_MspInit+0x68>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <HAL_MspInit+0x68>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <HAL_MspInit+0x68>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a11      	ldr	r2, [pc, #68]	; (8000454 <HAL_MspInit+0x68>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <HAL_MspInit+0x68>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	210f      	movs	r1, #15
 8000426:	f06f 0001 	mvn.w	r0, #1
 800042a:	f000 f9a2 	bl	8000772 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <HAL_MspInit+0x6c>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	4a04      	ldr	r2, [pc, #16]	; (8000458 <HAL_MspInit+0x6c>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	40010000 	.word	0x40010000

0800045c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08c      	sub	sp, #48	; 0x30
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800046c:	2200      	movs	r2, #0
 800046e:	6879      	ldr	r1, [r7, #4]
 8000470:	201e      	movs	r0, #30
 8000472:	f000 f97e 	bl	8000772 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000476:	201e      	movs	r0, #30
 8000478:	f000 f997 	bl	80007aa <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800047c:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <HAL_InitTick+0xa0>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	4a1e      	ldr	r2, [pc, #120]	; (80004fc <HAL_InitTick+0xa0>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	61d3      	str	r3, [r2, #28]
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <HAL_InitTick+0xa0>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000494:	f107 0210 	add.w	r2, r7, #16
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	4611      	mov	r1, r2
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 fd7a 	bl	8000f98 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80004a4:	f000 fd64 	bl	8000f70 <HAL_RCC_GetPCLK1Freq>
 80004a8:	4603      	mov	r3, r0
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004b0:	4a13      	ldr	r2, [pc, #76]	; (8000500 <HAL_InitTick+0xa4>)
 80004b2:	fba2 2303 	umull	r2, r3, r2, r3
 80004b6:	0c9b      	lsrs	r3, r3, #18
 80004b8:	3b01      	subs	r3, #1
 80004ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <HAL_InitTick+0xa8>)
 80004be:	4a12      	ldr	r2, [pc, #72]	; (8000508 <HAL_InitTick+0xac>)
 80004c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <HAL_InitTick+0xa8>)
 80004c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004c8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80004ca:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <HAL_InitTick+0xa8>)
 80004cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ce:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_InitTick+0xa8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <HAL_InitTick+0xa8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80004dc:	4809      	ldr	r0, [pc, #36]	; (8000504 <HAL_InitTick+0xa8>)
 80004de:	f000 fda9 	bl	8001034 <HAL_TIM_Base_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d104      	bne.n	80004f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <HAL_InitTick+0xa8>)
 80004ea:	f000 fdfb 	bl	80010e4 <HAL_TIM_Base_Start_IT>
 80004ee:	4603      	mov	r3, r0
 80004f0:	e000      	b.n	80004f4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3730      	adds	r7, #48	; 0x30
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	431bde83 	.word	0x431bde83
 8000504:	20001534 	.word	0x20001534
 8000508:	40000800 	.word	0x40000800

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
	...

08000538 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <TIM4_IRQHandler+0x10>)
 800053e:	f000 fe23 	bl	8001188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20001534 	.word	0x20001534

0800054c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800055a:	490d      	ldr	r1, [pc, #52]	; (8000590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000570:	4c0a      	ldr	r4, [pc, #40]	; (800059c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800057e:	f7ff ffe5 	bl	800054c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000582:	f003 fc9b 	bl	8003ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000586:	f7ff fe15 	bl	80001b4 <main>
  bx lr
 800058a:	4770      	bx	lr
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000590:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000594:	08003fcc 	.word	0x08003fcc
  ldr r2, =_sbss
 8000598:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800059c:	200015c0 	.word	0x200015c0

080005a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC1_2_IRQHandler>
	...

080005a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_Init+0x28>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <HAL_Init+0x28>)
 80005ae:	f043 0310 	orr.w	r3, r3, #16
 80005b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f8d1 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	200f      	movs	r0, #15
 80005bc:	f7ff ff4e 	bl	800045c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f7ff ff14 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40022000 	.word	0x40022000

080005d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_IncTick+0x1c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <HAL_IncTick+0x20>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <HAL_IncTick+0x20>)
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000008 	.word	0x20000008
 80005f0:	2000157c 	.word	0x2000157c

080005f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <HAL_GetTick+0x10>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	2000157c 	.word	0x2000157c

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	2b00      	cmp	r3, #0
 800067c:	db0b      	blt.n	8000696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 021f 	and.w	r2, r3, #31
 8000684:	4906      	ldr	r1, [pc, #24]	; (80006a0 <__NVIC_EnableIRQ+0x34>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db0a      	blt.n	80006ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	490c      	ldr	r1, [pc, #48]	; (80006f0 <__NVIC_SetPriority+0x4c>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006cc:	e00a      	b.n	80006e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4908      	ldr	r1, [pc, #32]	; (80006f4 <__NVIC_SetPriority+0x50>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 030f 	and.w	r3, r3, #15
 80006da:	3b04      	subs	r3, #4
 80006dc:	0112      	lsls	r2, r2, #4
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	440b      	add	r3, r1
 80006e2:	761a      	strb	r2, [r3, #24]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e100 	.word	0xe000e100
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b089      	sub	sp, #36	; 0x24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	f1c3 0307 	rsb	r3, r3, #7
 8000712:	2b04      	cmp	r3, #4
 8000714:	bf28      	it	cs
 8000716:	2304      	movcs	r3, #4
 8000718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3304      	adds	r3, #4
 800071e:	2b06      	cmp	r3, #6
 8000720:	d902      	bls.n	8000728 <NVIC_EncodePriority+0x30>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3b03      	subs	r3, #3
 8000726:	e000      	b.n	800072a <NVIC_EncodePriority+0x32>
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	f04f 32ff 	mov.w	r2, #4294967295
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	43da      	mvns	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	401a      	ands	r2, r3
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000740:	f04f 31ff 	mov.w	r1, #4294967295
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43d9      	mvns	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	4313      	orrs	r3, r2
         );
}
 8000752:	4618      	mov	r0, r3
 8000754:	3724      	adds	r7, #36	; 0x24
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ff4f 	bl	8000608 <__NVIC_SetPriorityGrouping>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000772:	b580      	push	{r7, lr}
 8000774:	b086      	sub	sp, #24
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000784:	f7ff ff64 	bl	8000650 <__NVIC_GetPriorityGrouping>
 8000788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	6978      	ldr	r0, [r7, #20]
 8000790:	f7ff ffb2 	bl	80006f8 <NVIC_EncodePriority>
 8000794:	4602      	mov	r2, r0
 8000796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff81 	bl	80006a4 <__NVIC_SetPriority>
}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff57 	bl	800066c <__NVIC_EnableIRQ>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e26c      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 8087 	beq.w	80008f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007e8:	4b92      	ldr	r3, [pc, #584]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f003 030c 	and.w	r3, r3, #12
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d00c      	beq.n	800080e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007f4:	4b8f      	ldr	r3, [pc, #572]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	f003 030c 	and.w	r3, r3, #12
 80007fc:	2b08      	cmp	r3, #8
 80007fe:	d112      	bne.n	8000826 <HAL_RCC_OscConfig+0x5e>
 8000800:	4b8c      	ldr	r3, [pc, #560]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800080c:	d10b      	bne.n	8000826 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800080e:	4b89      	ldr	r3, [pc, #548]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000816:	2b00      	cmp	r3, #0
 8000818:	d06c      	beq.n	80008f4 <HAL_RCC_OscConfig+0x12c>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d168      	bne.n	80008f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e246      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800082e:	d106      	bne.n	800083e <HAL_RCC_OscConfig+0x76>
 8000830:	4b80      	ldr	r3, [pc, #512]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a7f      	ldr	r2, [pc, #508]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	e02e      	b.n	800089c <HAL_RCC_OscConfig+0xd4>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d10c      	bne.n	8000860 <HAL_RCC_OscConfig+0x98>
 8000846:	4b7b      	ldr	r3, [pc, #492]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a7a      	ldr	r2, [pc, #488]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 800084c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	4b78      	ldr	r3, [pc, #480]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a77      	ldr	r2, [pc, #476]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800085c:	6013      	str	r3, [r2, #0]
 800085e:	e01d      	b.n	800089c <HAL_RCC_OscConfig+0xd4>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000868:	d10c      	bne.n	8000884 <HAL_RCC_OscConfig+0xbc>
 800086a:	4b72      	ldr	r3, [pc, #456]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a71      	ldr	r2, [pc, #452]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	4b6f      	ldr	r3, [pc, #444]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a6e      	ldr	r2, [pc, #440]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 800087c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000880:	6013      	str	r3, [r2, #0]
 8000882:	e00b      	b.n	800089c <HAL_RCC_OscConfig+0xd4>
 8000884:	4b6b      	ldr	r3, [pc, #428]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a6a      	ldr	r2, [pc, #424]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 800088a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b68      	ldr	r3, [pc, #416]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a67      	ldr	r2, [pc, #412]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800089a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d013      	beq.n	80008cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a4:	f7ff fea6 	bl	80005f4 <HAL_GetTick>
 80008a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008aa:	e008      	b.n	80008be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008ac:	f7ff fea2 	bl	80005f4 <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	2b64      	cmp	r3, #100	; 0x64
 80008b8:	d901      	bls.n	80008be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80008ba:	2303      	movs	r3, #3
 80008bc:	e1fa      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008be:	4b5d      	ldr	r3, [pc, #372]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f0      	beq.n	80008ac <HAL_RCC_OscConfig+0xe4>
 80008ca:	e014      	b.n	80008f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008cc:	f7ff fe92 	bl	80005f4 <HAL_GetTick>
 80008d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008d2:	e008      	b.n	80008e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008d4:	f7ff fe8e 	bl	80005f4 <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	2b64      	cmp	r3, #100	; 0x64
 80008e0:	d901      	bls.n	80008e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008e2:	2303      	movs	r3, #3
 80008e4:	e1e6      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008e6:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1f0      	bne.n	80008d4 <HAL_RCC_OscConfig+0x10c>
 80008f2:	e000      	b.n	80008f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d063      	beq.n	80009ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000902:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 030c 	and.w	r3, r3, #12
 800090a:	2b00      	cmp	r3, #0
 800090c:	d00b      	beq.n	8000926 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800090e:	4b49      	ldr	r3, [pc, #292]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 030c 	and.w	r3, r3, #12
 8000916:	2b08      	cmp	r3, #8
 8000918:	d11c      	bne.n	8000954 <HAL_RCC_OscConfig+0x18c>
 800091a:	4b46      	ldr	r3, [pc, #280]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000922:	2b00      	cmp	r3, #0
 8000924:	d116      	bne.n	8000954 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000926:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	2b00      	cmp	r3, #0
 8000930:	d005      	beq.n	800093e <HAL_RCC_OscConfig+0x176>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	691b      	ldr	r3, [r3, #16]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d001      	beq.n	800093e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e1ba      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800093e:	4b3d      	ldr	r3, [pc, #244]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	4939      	ldr	r1, [pc, #228]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 800094e:	4313      	orrs	r3, r2
 8000950:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000952:	e03a      	b.n	80009ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d020      	beq.n	800099e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800095c:	4b36      	ldr	r3, [pc, #216]	; (8000a38 <HAL_RCC_OscConfig+0x270>)
 800095e:	2201      	movs	r2, #1
 8000960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000962:	f7ff fe47 	bl	80005f4 <HAL_GetTick>
 8000966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000968:	e008      	b.n	800097c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800096a:	f7ff fe43 	bl	80005f4 <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d901      	bls.n	800097c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000978:	2303      	movs	r3, #3
 800097a:	e19b      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800097c:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0f0      	beq.n	800096a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000988:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	4927      	ldr	r1, [pc, #156]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000998:	4313      	orrs	r3, r2
 800099a:	600b      	str	r3, [r1, #0]
 800099c:	e015      	b.n	80009ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <HAL_RCC_OscConfig+0x270>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009a4:	f7ff fe26 	bl	80005f4 <HAL_GetTick>
 80009a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009aa:	e008      	b.n	80009be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009ac:	f7ff fe22 	bl	80005f4 <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d901      	bls.n	80009be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80009ba:	2303      	movs	r3, #3
 80009bc:	e17a      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1f0      	bne.n	80009ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d03a      	beq.n	8000a4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d019      	beq.n	8000a12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <HAL_RCC_OscConfig+0x274>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009e4:	f7ff fe06 	bl	80005f4 <HAL_GetTick>
 80009e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ea:	e008      	b.n	80009fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009ec:	f7ff fe02 	bl	80005f4 <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d901      	bls.n	80009fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009fa:	2303      	movs	r3, #3
 80009fc:	e15a      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f0      	beq.n	80009ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f000 faf4 	bl	8000ff8 <RCC_Delay>
 8000a10:	e01c      	b.n	8000a4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_RCC_OscConfig+0x274>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a18:	f7ff fdec 	bl	80005f4 <HAL_GetTick>
 8000a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a1e:	e00f      	b.n	8000a40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a20:	f7ff fde8 	bl	80005f4 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d908      	bls.n	8000a40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e140      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000
 8000a38:	42420000 	.word	0x42420000
 8000a3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a40:	4b9e      	ldr	r3, [pc, #632]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1e9      	bne.n	8000a20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f000 80a6 	beq.w	8000ba6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a5e:	4b97      	ldr	r3, [pc, #604]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10d      	bne.n	8000a86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b94      	ldr	r3, [pc, #592]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a93      	ldr	r2, [pc, #588]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	61d3      	str	r3, [r2, #28]
 8000a76:	4b91      	ldr	r3, [pc, #580]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a82:	2301      	movs	r3, #1
 8000a84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a86:	4b8e      	ldr	r3, [pc, #568]	; (8000cc0 <HAL_RCC_OscConfig+0x4f8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d118      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a92:	4b8b      	ldr	r3, [pc, #556]	; (8000cc0 <HAL_RCC_OscConfig+0x4f8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a8a      	ldr	r2, [pc, #552]	; (8000cc0 <HAL_RCC_OscConfig+0x4f8>)
 8000a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a9e:	f7ff fda9 	bl	80005f4 <HAL_GetTick>
 8000aa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa4:	e008      	b.n	8000ab8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000aa6:	f7ff fda5 	bl	80005f4 <HAL_GetTick>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	2b64      	cmp	r3, #100	; 0x64
 8000ab2:	d901      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	e0fd      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ab8:	4b81      	ldr	r3, [pc, #516]	; (8000cc0 <HAL_RCC_OscConfig+0x4f8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f0      	beq.n	8000aa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d106      	bne.n	8000ada <HAL_RCC_OscConfig+0x312>
 8000acc:	4b7b      	ldr	r3, [pc, #492]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	4a7a      	ldr	r2, [pc, #488]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6213      	str	r3, [r2, #32]
 8000ad8:	e02d      	b.n	8000b36 <HAL_RCC_OscConfig+0x36e>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10c      	bne.n	8000afc <HAL_RCC_OscConfig+0x334>
 8000ae2:	4b76      	ldr	r3, [pc, #472]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	4a75      	ldr	r2, [pc, #468]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000ae8:	f023 0301 	bic.w	r3, r3, #1
 8000aec:	6213      	str	r3, [r2, #32]
 8000aee:	4b73      	ldr	r3, [pc, #460]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000af0:	6a1b      	ldr	r3, [r3, #32]
 8000af2:	4a72      	ldr	r2, [pc, #456]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000af4:	f023 0304 	bic.w	r3, r3, #4
 8000af8:	6213      	str	r3, [r2, #32]
 8000afa:	e01c      	b.n	8000b36 <HAL_RCC_OscConfig+0x36e>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	2b05      	cmp	r3, #5
 8000b02:	d10c      	bne.n	8000b1e <HAL_RCC_OscConfig+0x356>
 8000b04:	4b6d      	ldr	r3, [pc, #436]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000b06:	6a1b      	ldr	r3, [r3, #32]
 8000b08:	4a6c      	ldr	r2, [pc, #432]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6213      	str	r3, [r2, #32]
 8000b10:	4b6a      	ldr	r3, [pc, #424]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000b12:	6a1b      	ldr	r3, [r3, #32]
 8000b14:	4a69      	ldr	r2, [pc, #420]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6213      	str	r3, [r2, #32]
 8000b1c:	e00b      	b.n	8000b36 <HAL_RCC_OscConfig+0x36e>
 8000b1e:	4b67      	ldr	r3, [pc, #412]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000b20:	6a1b      	ldr	r3, [r3, #32]
 8000b22:	4a66      	ldr	r2, [pc, #408]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000b24:	f023 0301 	bic.w	r3, r3, #1
 8000b28:	6213      	str	r3, [r2, #32]
 8000b2a:	4b64      	ldr	r3, [pc, #400]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000b2c:	6a1b      	ldr	r3, [r3, #32]
 8000b2e:	4a63      	ldr	r2, [pc, #396]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000b30:	f023 0304 	bic.w	r3, r3, #4
 8000b34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d015      	beq.n	8000b6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b3e:	f7ff fd59 	bl	80005f4 <HAL_GetTick>
 8000b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b44:	e00a      	b.n	8000b5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b46:	f7ff fd55 	bl	80005f4 <HAL_GetTick>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d901      	bls.n	8000b5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e0ab      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b5c:	4b57      	ldr	r3, [pc, #348]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000b5e:	6a1b      	ldr	r3, [r3, #32]
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0ee      	beq.n	8000b46 <HAL_RCC_OscConfig+0x37e>
 8000b68:	e014      	b.n	8000b94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b6a:	f7ff fd43 	bl	80005f4 <HAL_GetTick>
 8000b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b70:	e00a      	b.n	8000b88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b72:	f7ff fd3f 	bl	80005f4 <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d901      	bls.n	8000b88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b84:	2303      	movs	r3, #3
 8000b86:	e095      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b88:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d1ee      	bne.n	8000b72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b94:	7dfb      	ldrb	r3, [r7, #23]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d105      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b9a:	4b48      	ldr	r3, [pc, #288]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a47      	ldr	r2, [pc, #284]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 8081 	beq.w	8000cb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bb0:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d061      	beq.n	8000c80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d146      	bne.n	8000c52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bc4:	4b3f      	ldr	r3, [pc, #252]	; (8000cc4 <HAL_RCC_OscConfig+0x4fc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bca:	f7ff fd13 	bl	80005f4 <HAL_GetTick>
 8000bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd0:	e008      	b.n	8000be4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bd2:	f7ff fd0f 	bl	80005f4 <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d901      	bls.n	8000be4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000be0:	2303      	movs	r3, #3
 8000be2:	e067      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000be4:	4b35      	ldr	r3, [pc, #212]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f0      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf8:	d108      	bne.n	8000c0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bfa:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	492d      	ldr	r1, [pc, #180]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a19      	ldr	r1, [r3, #32]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1c:	430b      	orrs	r3, r1
 8000c1e:	4927      	ldr	r1, [pc, #156]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000c20:	4313      	orrs	r3, r2
 8000c22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <HAL_RCC_OscConfig+0x4fc>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c2a:	f7ff fce3 	bl	80005f4 <HAL_GetTick>
 8000c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c30:	e008      	b.n	8000c44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c32:	f7ff fcdf 	bl	80005f4 <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d901      	bls.n	8000c44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c40:	2303      	movs	r3, #3
 8000c42:	e037      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0f0      	beq.n	8000c32 <HAL_RCC_OscConfig+0x46a>
 8000c50:	e02f      	b.n	8000cb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <HAL_RCC_OscConfig+0x4fc>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c58:	f7ff fccc 	bl	80005f4 <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c60:	f7ff fcc8 	bl	80005f4 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e020      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f0      	bne.n	8000c60 <HAL_RCC_OscConfig+0x498>
 8000c7e:	e018      	b.n	8000cb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d101      	bne.n	8000c8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e013      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_RCC_OscConfig+0x4f4>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a1b      	ldr	r3, [r3, #32]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d106      	bne.n	8000cae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d001      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40007000 	.word	0x40007000
 8000cc4:	42420060 	.word	0x42420060

08000cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d101      	bne.n	8000cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e0d0      	b.n	8000e7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000cdc:	4b6a      	ldr	r3, [pc, #424]	; (8000e88 <HAL_RCC_ClockConfig+0x1c0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d910      	bls.n	8000d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cea:	4b67      	ldr	r3, [pc, #412]	; (8000e88 <HAL_RCC_ClockConfig+0x1c0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f023 0207 	bic.w	r2, r3, #7
 8000cf2:	4965      	ldr	r1, [pc, #404]	; (8000e88 <HAL_RCC_ClockConfig+0x1c0>)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cfa:	4b63      	ldr	r3, [pc, #396]	; (8000e88 <HAL_RCC_ClockConfig+0x1c0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d001      	beq.n	8000d0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e0b8      	b.n	8000e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d020      	beq.n	8000d5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d24:	4b59      	ldr	r3, [pc, #356]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4a58      	ldr	r2, [pc, #352]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000d2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d005      	beq.n	8000d48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d3c:	4b53      	ldr	r3, [pc, #332]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	4a52      	ldr	r2, [pc, #328]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000d42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d48:	4b50      	ldr	r3, [pc, #320]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	494d      	ldr	r1, [pc, #308]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d040      	beq.n	8000de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d107      	bne.n	8000d7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d115      	bne.n	8000da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e07f      	b.n	8000e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d107      	bne.n	8000d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d109      	bne.n	8000da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e073      	b.n	8000e7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d96:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e06b      	b.n	8000e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000da6:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f023 0203 	bic.w	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	4936      	ldr	r1, [pc, #216]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000db4:	4313      	orrs	r3, r2
 8000db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000db8:	f7ff fc1c 	bl	80005f4 <HAL_GetTick>
 8000dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dbe:	e00a      	b.n	8000dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc0:	f7ff fc18 	bl	80005f4 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e053      	b.n	8000e7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 020c 	and.w	r2, r3, #12
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d1eb      	bne.n	8000dc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <HAL_RCC_ClockConfig+0x1c0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d210      	bcs.n	8000e18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <HAL_RCC_ClockConfig+0x1c0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f023 0207 	bic.w	r2, r3, #7
 8000dfe:	4922      	ldr	r1, [pc, #136]	; (8000e88 <HAL_RCC_ClockConfig+0x1c0>)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_RCC_ClockConfig+0x1c0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d001      	beq.n	8000e18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e032      	b.n	8000e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d008      	beq.n	8000e36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	4916      	ldr	r1, [pc, #88]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d009      	beq.n	8000e56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	490e      	ldr	r1, [pc, #56]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000e52:	4313      	orrs	r3, r2
 8000e54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e56:	f000 f821 	bl	8000e9c <HAL_RCC_GetSysClockFreq>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_RCC_ClockConfig+0x1c4>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	490a      	ldr	r1, [pc, #40]	; (8000e90 <HAL_RCC_ClockConfig+0x1c8>)
 8000e68:	5ccb      	ldrb	r3, [r1, r3]
 8000e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6e:	4a09      	ldr	r2, [pc, #36]	; (8000e94 <HAL_RCC_ClockConfig+0x1cc>)
 8000e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_RCC_ClockConfig+0x1d0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff faf0 	bl	800045c <HAL_InitTick>

  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40022000 	.word	0x40022000
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	08003fac 	.word	0x08003fac
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e9c:	b490      	push	{r4, r7}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8000ea4:	1d3c      	adds	r4, r7, #4
 8000ea6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000eac:	f240 2301 	movw	r3, #513	; 0x201
 8000eb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d002      	beq.n	8000edc <HAL_RCC_GetSysClockFreq+0x40>
 8000ed6:	2b08      	cmp	r3, #8
 8000ed8:	d003      	beq.n	8000ee2 <HAL_RCC_GetSysClockFreq+0x46>
 8000eda:	e02d      	b.n	8000f38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ede:	623b      	str	r3, [r7, #32]
      break;
 8000ee0:	e02d      	b.n	8000f3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	0c9b      	lsrs	r3, r3, #18
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eee:	4413      	add	r3, r2
 8000ef0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000ef4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	0c5b      	lsrs	r3, r3, #17
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f0e:	4413      	add	r3, r2
 8000f10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f1a:	fb02 f203 	mul.w	r2, r2, r3
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
 8000f26:	e004      	b.n	8000f32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	623b      	str	r3, [r7, #32]
      break;
 8000f36:	e002      	b.n	8000f3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f3a:	623b      	str	r3, [r7, #32]
      break;
 8000f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc90      	pop	{r4, r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	08003f80 	.word	0x08003f80
 8000f50:	40021000 	.word	0x40021000
 8000f54:	007a1200 	.word	0x007a1200
 8000f58:	003d0900 	.word	0x003d0900

08000f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f60:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <HAL_RCC_GetHCLKFreq+0x10>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	20000000 	.word	0x20000000

08000f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f74:	f7ff fff2 	bl	8000f5c <HAL_RCC_GetHCLKFreq>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	4903      	ldr	r1, [pc, #12]	; (8000f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f86:	5ccb      	ldrb	r3, [r1, r3]
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000
 8000f94:	08003fbc 	.word	0x08003fbc

08000f98 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_RCC_GetClockConfig+0x58>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0203 	and.w	r2, r3, #3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_RCC_GetClockConfig+0x58>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_RCC_GetClockConfig+0x58>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_RCC_GetClockConfig+0x58>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0207 	and.w	r2, r3, #7
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40022000 	.word	0x40022000

08000ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <RCC_Delay+0x34>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <RCC_Delay+0x38>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	0a5b      	lsrs	r3, r3, #9
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001014:	bf00      	nop
  }
  while (Delay --);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	60fa      	str	r2, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f9      	bne.n	8001014 <RCC_Delay+0x1c>
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	20000000 	.word	0x20000000
 8001030:	10624dd3 	.word	0x10624dd3

08001034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e041      	b.n	80010ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f839 	bl	80010d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2202      	movs	r2, #2
 8001064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3304      	adds	r3, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4610      	mov	r0, r2
 8001074:	f000 f9b4 	bl	80013e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d001      	beq.n	80010fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e03a      	b.n	8001172 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2202      	movs	r2, #2
 8001100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_TIM_Base_Start_IT+0x98>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d00e      	beq.n	800113c <HAL_TIM_Base_Start_IT+0x58>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001126:	d009      	beq.n	800113c <HAL_TIM_Base_Start_IT+0x58>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <HAL_TIM_Base_Start_IT+0x9c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d004      	beq.n	800113c <HAL_TIM_Base_Start_IT+0x58>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a13      	ldr	r2, [pc, #76]	; (8001184 <HAL_TIM_Base_Start_IT+0xa0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d111      	bne.n	8001160 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d010      	beq.n	8001170 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f042 0201 	orr.w	r2, r2, #1
 800115c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800115e:	e007      	b.n	8001170 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0201 	orr.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	40012c00 	.word	0x40012c00
 8001180:	40000400 	.word	0x40000400
 8001184:	40000800 	.word	0x40000800

08001188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b02      	cmp	r3, #2
 800119c:	d122      	bne.n	80011e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d11b      	bne.n	80011e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f06f 0202 	mvn.w	r2, #2
 80011b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f8ed 	bl	80013aa <HAL_TIM_IC_CaptureCallback>
 80011d0:	e005      	b.n	80011de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f8e0 	bl	8001398 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f8ef 	bl	80013bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d122      	bne.n	8001238 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d11b      	bne.n	8001238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f06f 0204 	mvn.w	r2, #4
 8001208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2202      	movs	r2, #2
 800120e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f8c3 	bl	80013aa <HAL_TIM_IC_CaptureCallback>
 8001224:	e005      	b.n	8001232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f8b6 	bl	8001398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f8c5 	bl	80013bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b08      	cmp	r3, #8
 8001244:	d122      	bne.n	800128c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b08      	cmp	r3, #8
 8001252:	d11b      	bne.n	800128c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f06f 0208 	mvn.w	r2, #8
 800125c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2204      	movs	r2, #4
 8001262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f899 	bl	80013aa <HAL_TIM_IC_CaptureCallback>
 8001278:	e005      	b.n	8001286 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f88c 	bl	8001398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f89b 	bl	80013bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	2b10      	cmp	r3, #16
 8001298:	d122      	bne.n	80012e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b10      	cmp	r3, #16
 80012a6:	d11b      	bne.n	80012e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f06f 0210 	mvn.w	r2, #16
 80012b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2208      	movs	r2, #8
 80012b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f86f 	bl	80013aa <HAL_TIM_IC_CaptureCallback>
 80012cc:	e005      	b.n	80012da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f862 	bl	8001398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f871 	bl	80013bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d10e      	bne.n	800130c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d107      	bne.n	800130c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f06f 0201 	mvn.w	r2, #1
 8001304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff f858 	bl	80003bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001316:	2b80      	cmp	r3, #128	; 0x80
 8001318:	d10e      	bne.n	8001338 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001324:	2b80      	cmp	r3, #128	; 0x80
 8001326:	d107      	bne.n	8001338 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f8bf 	bl	80014b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001342:	2b40      	cmp	r3, #64	; 0x40
 8001344:	d10e      	bne.n	8001364 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001350:	2b40      	cmp	r3, #64	; 0x40
 8001352:	d107      	bne.n	8001364 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800135c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f835 	bl	80013ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	2b20      	cmp	r3, #32
 8001370:	d10e      	bne.n	8001390 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	2b20      	cmp	r3, #32
 800137e:	d107      	bne.n	8001390 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f06f 0220 	mvn.w	r2, #32
 8001388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f88a 	bl	80014a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a29      	ldr	r2, [pc, #164]	; (8001498 <TIM_Base_SetConfig+0xb8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d00b      	beq.n	8001410 <TIM_Base_SetConfig+0x30>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013fe:	d007      	beq.n	8001410 <TIM_Base_SetConfig+0x30>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a26      	ldr	r2, [pc, #152]	; (800149c <TIM_Base_SetConfig+0xbc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d003      	beq.n	8001410 <TIM_Base_SetConfig+0x30>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a25      	ldr	r2, [pc, #148]	; (80014a0 <TIM_Base_SetConfig+0xc0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d108      	bne.n	8001422 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <TIM_Base_SetConfig+0xb8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00b      	beq.n	8001442 <TIM_Base_SetConfig+0x62>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001430:	d007      	beq.n	8001442 <TIM_Base_SetConfig+0x62>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a19      	ldr	r2, [pc, #100]	; (800149c <TIM_Base_SetConfig+0xbc>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d003      	beq.n	8001442 <TIM_Base_SetConfig+0x62>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <TIM_Base_SetConfig+0xc0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d108      	bne.n	8001454 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4313      	orrs	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a07      	ldr	r2, [pc, #28]	; (8001498 <TIM_Base_SetConfig+0xb8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d103      	bne.n	8001488 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	615a      	str	r2, [r3, #20]
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40012c00 	.word	0x40012c00
 800149c:	40000400 	.word	0x40000400
 80014a0:	40000800 	.word	0x40000800

080014a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80014d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014da:	2b84      	cmp	r3, #132	; 0x84
 80014dc:	d005      	beq.n	80014ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80014de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4413      	add	r3, r2
 80014e6:	3303      	adds	r3, #3
 80014e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80014fc:	f3ef 8305 	mrs	r3, IPSR
 8001500:	607b      	str	r3, [r7, #4]
  return(result);
 8001502:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf14      	ite	ne
 8001508:	2301      	movne	r3, #1
 800150a:	2300      	moveq	r3, #0
 800150c:	b2db      	uxtb	r3, r3
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800151c:	f001 f82a 	bl	8002574 <vTaskStartScheduler>
  
  return osOK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	bd80      	pop	{r7, pc}

08001526 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001528:	b089      	sub	sp, #36	; 0x24
 800152a:	af04      	add	r7, sp, #16
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d020      	beq.n	800157a <osThreadCreate+0x54>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d01c      	beq.n	800157a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685c      	ldr	r4, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681d      	ldr	r5, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691e      	ldr	r6, [r3, #16]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ffb8 	bl	80014c8 <makeFreeRtosPriority>
 8001558:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001562:	9202      	str	r2, [sp, #8]
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	9100      	str	r1, [sp, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4632      	mov	r2, r6
 800156c:	4629      	mov	r1, r5
 800156e:	4620      	mov	r0, r4
 8001570:	f000 fe42 	bl	80021f8 <xTaskCreateStatic>
 8001574:	4603      	mov	r3, r0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e01c      	b.n	80015b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685c      	ldr	r4, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001586:	b29e      	uxth	r6, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff9a 	bl	80014c8 <makeFreeRtosPriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	9200      	str	r2, [sp, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	4632      	mov	r2, r6
 80015a2:	4629      	mov	r1, r5
 80015a4:	4620      	mov	r0, r4
 80015a6:	f000 fe83 	bl	80022b0 <xTaskCreate>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d001      	beq.n	80015b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e000      	b.n	80015b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80015b4:	68fb      	ldr	r3, [r7, #12]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <osDelay+0x16>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	e000      	b.n	80015d6 <osDelay+0x18>
 80015d4:	2301      	movs	r3, #1
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 ff98 	bl	800250c <vTaskDelay>
  
  return osOK;
 80015dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	460b      	mov	r3, r1
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d013      	beq.n	8001626 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <osTimerCreate+0x20>
 8001604:	2101      	movs	r1, #1
 8001606:	e000      	b.n	800160a <osTimerCreate+0x22>
 8001608:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8001612:	9201      	str	r2, [sp, #4]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	460a      	mov	r2, r1
 800161a:	2101      	movs	r1, #1
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <osTimerCreate+0x64>)
 800161e:	f001 fd62 	bl	80030e6 <xTimerCreateStatic>
 8001622:	4603      	mov	r3, r0
 8001624:	e00e      	b.n	8001644 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <osTimerCreate+0x48>
 800162c:	2201      	movs	r2, #1
 800162e:	e000      	b.n	8001632 <osTimerCreate+0x4a>
 8001630:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2101      	movs	r1, #1
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <osTimerCreate+0x64>)
 800163e:	f001 fd31 	bl	80030a4 <xTimerCreate>
 8001642:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	08003f90 	.word	0x08003f90

08001650 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <osTimerStart+0x20>
    ticks = 1;
 800166c:	2301      	movs	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8001670:	f7ff ff41 	bl	80014f6 <inHandlerMode>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d01a      	beq.n	80016b0 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	2200      	movs	r2, #0
 8001680:	9200      	str	r2, [sp, #0]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	2109      	movs	r1, #9
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f001 fd9c 	bl	80031c4 <xTimerGenericCommand>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d002      	beq.n	8001698 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8001692:	23ff      	movs	r3, #255	; 0xff
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e018      	b.n	80016ca <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d015      	beq.n	80016ca <osTimerStart+0x7a>
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <osTimerStart+0x84>)
 80016a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	f3bf 8f4f 	dsb	sy
 80016aa:	f3bf 8f6f 	isb	sy
 80016ae:	e00c      	b.n	80016ca <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80016b0:	2300      	movs	r3, #0
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2300      	movs	r3, #0
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	2104      	movs	r1, #4
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f001 fd82 	bl	80031c4 <xTimerGenericCommand>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d001      	beq.n	80016ca <osTimerStart+0x7a>
      result = osErrorOS;
 80016c6:	23ff      	movs	r3, #255	; 0xff
 80016c8:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80016ca:	697b      	ldr	r3, [r7, #20]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	e000ed04 	.word	0xe000ed04

080016d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f103 0208 	add.w	r2, r3, #8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f103 0208 	add.w	r2, r3, #8
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f103 0208 	add.w	r2, r3, #8
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800172e:	b480      	push	{r7}
 8001730:	b085      	sub	sp, #20
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178a:	d103      	bne.n	8001794 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e00c      	b.n	80017ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3308      	adds	r3, #8
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e002      	b.n	80017a2 <vListInsert+0x2e>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d2f6      	bcs.n	800179c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	601a      	str	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6892      	ldr	r2, [r2, #8]
 80017fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6852      	ldr	r2, [r2, #4]
 8001804:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	d103      	bne.n	8001818 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1e5a      	subs	r2, r3, #1
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
	...

08001838 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10a      	bne.n	8001862 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800184c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001850:	f383 8811 	msr	BASEPRI, r3
 8001854:	f3bf 8f6f 	isb	sy
 8001858:	f3bf 8f4f 	dsb	sy
 800185c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800185e:	bf00      	nop
 8001860:	e7fe      	b.n	8001860 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001862:	f002 f853 	bl	800390c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186e:	68f9      	ldr	r1, [r7, #12]
 8001870:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	441a      	add	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001892:	3b01      	subs	r3, #1
 8001894:	68f9      	ldr	r1, [r7, #12]
 8001896:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	441a      	add	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	22ff      	movs	r2, #255	; 0xff
 80018a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	22ff      	movs	r2, #255	; 0xff
 80018ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d114      	bne.n	80018e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d01a      	beq.n	80018f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3310      	adds	r3, #16
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 f8db 	bl	8002a80 <xTaskRemoveFromEventList>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d012      	beq.n	80018f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <xQueueGenericReset+0xcc>)
 80018d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	f3bf 8f4f 	dsb	sy
 80018dc:	f3bf 8f6f 	isb	sy
 80018e0:	e009      	b.n	80018f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3310      	adds	r3, #16
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fef6 	bl	80016d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3324      	adds	r3, #36	; 0x24
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fef1 	bl	80016d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80018f6:	f002 f839 	bl	800396c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	e000ed04 	.word	0xe000ed04

08001908 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	; 0x38
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10a      	bne.n	8001932 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800191c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001920:	f383 8811 	msr	BASEPRI, r3
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	f3bf 8f4f 	dsb	sy
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800192e:	bf00      	nop
 8001930:	e7fe      	b.n	8001930 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10a      	bne.n	800194e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193c:	f383 8811 	msr	BASEPRI, r3
 8001940:	f3bf 8f6f 	isb	sy
 8001944:	f3bf 8f4f 	dsb	sy
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
}
 800194a:	bf00      	nop
 800194c:	e7fe      	b.n	800194c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <xQueueGenericCreateStatic+0x52>
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <xQueueGenericCreateStatic+0x56>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <xQueueGenericCreateStatic+0x58>
 800195e:	2300      	movs	r3, #0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10a      	bne.n	800197a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001968:	f383 8811 	msr	BASEPRI, r3
 800196c:	f3bf 8f6f 	isb	sy
 8001970:	f3bf 8f4f 	dsb	sy
 8001974:	623b      	str	r3, [r7, #32]
}
 8001976:	bf00      	nop
 8001978:	e7fe      	b.n	8001978 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <xQueueGenericCreateStatic+0x7e>
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <xQueueGenericCreateStatic+0x82>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <xQueueGenericCreateStatic+0x84>
 800198a:	2300      	movs	r3, #0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10a      	bne.n	80019a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001994:	f383 8811 	msr	BASEPRI, r3
 8001998:	f3bf 8f6f 	isb	sy
 800199c:	f3bf 8f4f 	dsb	sy
 80019a0:	61fb      	str	r3, [r7, #28]
}
 80019a2:	bf00      	nop
 80019a4:	e7fe      	b.n	80019a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80019a6:	2348      	movs	r3, #72	; 0x48
 80019a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2b48      	cmp	r3, #72	; 0x48
 80019ae:	d00a      	beq.n	80019c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80019b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b4:	f383 8811 	msr	BASEPRI, r3
 80019b8:	f3bf 8f6f 	isb	sy
 80019bc:	f3bf 8f4f 	dsb	sy
 80019c0:	61bb      	str	r3, [r7, #24]
}
 80019c2:	bf00      	nop
 80019c4:	e7fe      	b.n	80019c4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00d      	beq.n	80019ec <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80019d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80019d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80019dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f805 	bl	80019f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80019ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3730      	adds	r7, #48	; 0x30
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d103      	bne.n	8001a12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e002      	b.n	8001a18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a24:	2101      	movs	r1, #1
 8001a26:	69b8      	ldr	r0, [r7, #24]
 8001a28:	f7ff ff06 	bl	8001838 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08e      	sub	sp, #56	; 0x38
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001a42:	2300      	movs	r3, #0
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10a      	bne.n	8001a66 <xQueueGenericSend+0x32>
	__asm volatile
 8001a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a54:	f383 8811 	msr	BASEPRI, r3
 8001a58:	f3bf 8f6f 	isb	sy
 8001a5c:	f3bf 8f4f 	dsb	sy
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001a62:	bf00      	nop
 8001a64:	e7fe      	b.n	8001a64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d103      	bne.n	8001a74 <xQueueGenericSend+0x40>
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <xQueueGenericSend+0x44>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <xQueueGenericSend+0x46>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10a      	bne.n	8001a94 <xQueueGenericSend+0x60>
	__asm volatile
 8001a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a82:	f383 8811 	msr	BASEPRI, r3
 8001a86:	f3bf 8f6f 	isb	sy
 8001a8a:	f3bf 8f4f 	dsb	sy
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001a90:	bf00      	nop
 8001a92:	e7fe      	b.n	8001a92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d103      	bne.n	8001aa2 <xQueueGenericSend+0x6e>
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <xQueueGenericSend+0x72>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <xQueueGenericSend+0x74>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10a      	bne.n	8001ac2 <xQueueGenericSend+0x8e>
	__asm volatile
 8001aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab0:	f383 8811 	msr	BASEPRI, r3
 8001ab4:	f3bf 8f6f 	isb	sy
 8001ab8:	f3bf 8f4f 	dsb	sy
 8001abc:	623b      	str	r3, [r7, #32]
}
 8001abe:	bf00      	nop
 8001ac0:	e7fe      	b.n	8001ac0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ac2:	f001 f99d 	bl	8002e00 <xTaskGetSchedulerState>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <xQueueGenericSend+0x9e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <xQueueGenericSend+0xa2>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <xQueueGenericSend+0xa4>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10a      	bne.n	8001af2 <xQueueGenericSend+0xbe>
	__asm volatile
 8001adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae0:	f383 8811 	msr	BASEPRI, r3
 8001ae4:	f3bf 8f6f 	isb	sy
 8001ae8:	f3bf 8f4f 	dsb	sy
 8001aec:	61fb      	str	r3, [r7, #28]
}
 8001aee:	bf00      	nop
 8001af0:	e7fe      	b.n	8001af0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001af2:	f001 ff0b 	bl	800390c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d302      	bcc.n	8001b08 <xQueueGenericSend+0xd4>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d129      	bne.n	8001b5c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b0e:	f000 fa07 	bl	8001f20 <prvCopyDataToQueue>
 8001b12:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d010      	beq.n	8001b3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1e:	3324      	adds	r3, #36	; 0x24
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 ffad 	bl	8002a80 <xTaskRemoveFromEventList>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001b2c:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <xQueueGenericSend+0x1f8>)
 8001b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f3bf 8f4f 	dsb	sy
 8001b38:	f3bf 8f6f 	isb	sy
 8001b3c:	e00a      	b.n	8001b54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001b44:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <xQueueGenericSend+0x1f8>)
 8001b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	f3bf 8f4f 	dsb	sy
 8001b50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001b54:	f001 ff0a 	bl	800396c <vPortExitCritical>
				return pdPASS;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e063      	b.n	8001c24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d103      	bne.n	8001b6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001b62:	f001 ff03 	bl	800396c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e05c      	b.n	8001c24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d106      	bne.n	8001b7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 ffe5 	bl	8002b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001b7e:	f001 fef5 	bl	800396c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001b82:	f000 fd5d 	bl	8002640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b86:	f001 fec1 	bl	800390c <vPortEnterCritical>
 8001b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b96:	d103      	bne.n	8001ba0 <xQueueGenericSend+0x16c>
 8001b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ba6:	b25b      	sxtb	r3, r3
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d103      	bne.n	8001bb6 <xQueueGenericSend+0x182>
 8001bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bb6:	f001 fed9 	bl	800396c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001bba:	1d3a      	adds	r2, r7, #4
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 ffd4 	bl	8002b70 <xTaskCheckForTimeOut>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d124      	bne.n	8001c18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001bce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bd0:	f000 fa9e 	bl	8002110 <prvIsQueueFull>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d018      	beq.n	8001c0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	3310      	adds	r3, #16
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fefc 	bl	80029e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bea:	f000 fa29 	bl	8002040 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001bee:	f000 fd35 	bl	800265c <xTaskResumeAll>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f47f af7c 	bne.w	8001af2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <xQueueGenericSend+0x1f8>)
 8001bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	f3bf 8f4f 	dsb	sy
 8001c06:	f3bf 8f6f 	isb	sy
 8001c0a:	e772      	b.n	8001af2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c0e:	f000 fa17 	bl	8002040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c12:	f000 fd23 	bl	800265c <xTaskResumeAll>
 8001c16:	e76c      	b.n	8001af2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c1a:	f000 fa11 	bl	8002040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c1e:	f000 fd1d 	bl	800265c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001c22:	2300      	movs	r3, #0
		}
	}
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3738      	adds	r7, #56	; 0x38
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	e000ed04 	.word	0xe000ed04

08001c30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08e      	sub	sp, #56	; 0x38
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10a      	bne.n	8001c5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4c:	f383 8811 	msr	BASEPRI, r3
 8001c50:	f3bf 8f6f 	isb	sy
 8001c54:	f3bf 8f4f 	dsb	sy
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001c5a:	bf00      	nop
 8001c5c:	e7fe      	b.n	8001c5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d103      	bne.n	8001c6c <xQueueGenericSendFromISR+0x3c>
 8001c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <xQueueGenericSendFromISR+0x40>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <xQueueGenericSendFromISR+0x42>
 8001c70:	2300      	movs	r3, #0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7a:	f383 8811 	msr	BASEPRI, r3
 8001c7e:	f3bf 8f6f 	isb	sy
 8001c82:	f3bf 8f4f 	dsb	sy
 8001c86:	623b      	str	r3, [r7, #32]
}
 8001c88:	bf00      	nop
 8001c8a:	e7fe      	b.n	8001c8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d103      	bne.n	8001c9a <xQueueGenericSendFromISR+0x6a>
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <xQueueGenericSendFromISR+0x6e>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <xQueueGenericSendFromISR+0x70>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10a      	bne.n	8001cba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca8:	f383 8811 	msr	BASEPRI, r3
 8001cac:	f3bf 8f6f 	isb	sy
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	61fb      	str	r3, [r7, #28]
}
 8001cb6:	bf00      	nop
 8001cb8:	e7fe      	b.n	8001cb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001cba:	f001 fee9 	bl	8003a90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001cbe:	f3ef 8211 	mrs	r2, BASEPRI
 8001cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc6:	f383 8811 	msr	BASEPRI, r3
 8001cca:	f3bf 8f6f 	isb	sy
 8001cce:	f3bf 8f4f 	dsb	sy
 8001cd2:	61ba      	str	r2, [r7, #24]
 8001cd4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001cd6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d302      	bcc.n	8001cec <xQueueGenericSendFromISR+0xbc>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d12c      	bne.n	8001d46 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cfc:	f000 f910 	bl	8001f20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001d00:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d112      	bne.n	8001d30 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d016      	beq.n	8001d40 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	3324      	adds	r3, #36	; 0x24
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 feb2 	bl	8002a80 <xTaskRemoveFromEventList>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00e      	beq.n	8001d40 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00b      	beq.n	8001d40 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e007      	b.n	8001d40 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001d30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d34:	3301      	adds	r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	b25a      	sxtb	r2, r3
 8001d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001d40:	2301      	movs	r3, #1
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001d44:	e001      	b.n	8001d4a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001d54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3738      	adds	r7, #56	; 0x38
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10a      	bne.n	8001d90 <xQueueReceive+0x30>
	__asm volatile
 8001d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7e:	f383 8811 	msr	BASEPRI, r3
 8001d82:	f3bf 8f6f 	isb	sy
 8001d86:	f3bf 8f4f 	dsb	sy
 8001d8a:	623b      	str	r3, [r7, #32]
}
 8001d8c:	bf00      	nop
 8001d8e:	e7fe      	b.n	8001d8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <xQueueReceive+0x3e>
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <xQueueReceive+0x42>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <xQueueReceive+0x44>
 8001da2:	2300      	movs	r3, #0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10a      	bne.n	8001dbe <xQueueReceive+0x5e>
	__asm volatile
 8001da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dac:	f383 8811 	msr	BASEPRI, r3
 8001db0:	f3bf 8f6f 	isb	sy
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	61fb      	str	r3, [r7, #28]
}
 8001dba:	bf00      	nop
 8001dbc:	e7fe      	b.n	8001dbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001dbe:	f001 f81f 	bl	8002e00 <xTaskGetSchedulerState>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <xQueueReceive+0x6e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <xQueueReceive+0x72>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <xQueueReceive+0x74>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <xQueueReceive+0x8e>
	__asm volatile
 8001dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	61bb      	str	r3, [r7, #24]
}
 8001dea:	bf00      	nop
 8001dec:	e7fe      	b.n	8001dec <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001dee:	f001 fd8d 	bl	800390c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01f      	beq.n	8001e3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e02:	f000 f8f7 	bl	8001ff4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	1e5a      	subs	r2, r3, #1
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00f      	beq.n	8001e36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e18:	3310      	adds	r3, #16
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fe30 	bl	8002a80 <xTaskRemoveFromEventList>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <xQueueReceive+0x1bc>)
 8001e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f3bf 8f4f 	dsb	sy
 8001e32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001e36:	f001 fd99 	bl	800396c <vPortExitCritical>
				return pdPASS;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e069      	b.n	8001f12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d103      	bne.n	8001e4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e44:	f001 fd92 	bl	800396c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e062      	b.n	8001f12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fe74 	bl	8002b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e60:	f001 fd84 	bl	800396c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e64:	f000 fbec 	bl	8002640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e68:	f001 fd50 	bl	800390c <vPortEnterCritical>
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e72:	b25b      	sxtb	r3, r3
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e78:	d103      	bne.n	8001e82 <xQueueReceive+0x122>
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8e:	d103      	bne.n	8001e98 <xQueueReceive+0x138>
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e98:	f001 fd68 	bl	800396c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e9c:	1d3a      	adds	r2, r7, #4
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fe63 	bl	8002b70 <xTaskCheckForTimeOut>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d123      	bne.n	8001ef8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eb2:	f000 f917 	bl	80020e4 <prvIsQueueEmpty>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d017      	beq.n	8001eec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebe:	3324      	adds	r3, #36	; 0x24
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fd8b 	bl	80029e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ecc:	f000 f8b8 	bl	8002040 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001ed0:	f000 fbc4 	bl	800265c <xTaskResumeAll>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d189      	bne.n	8001dee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <xQueueReceive+0x1bc>)
 8001edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	f3bf 8f4f 	dsb	sy
 8001ee6:	f3bf 8f6f 	isb	sy
 8001eea:	e780      	b.n	8001dee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eee:	f000 f8a7 	bl	8002040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ef2:	f000 fbb3 	bl	800265c <xTaskResumeAll>
 8001ef6:	e77a      	b.n	8001dee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001efa:	f000 f8a1 	bl	8002040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001efe:	f000 fbad 	bl	800265c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f04:	f000 f8ee 	bl	80020e4 <prvIsQueueEmpty>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f43f af6f 	beq.w	8001dee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001f10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3730      	adds	r7, #48	; 0x30
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000ed04 	.word	0xe000ed04

08001f20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10d      	bne.n	8001f5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d14d      	bne.n	8001fe2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 ff76 	bl	8002e3c <xTaskPriorityDisinherit>
 8001f50:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	e043      	b.n	8001fe2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d119      	bne.n	8001f94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6898      	ldr	r0, [r3, #8]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	f001 ffca 	bl	8003f04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	441a      	add	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d32b      	bcc.n	8001fe2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	e026      	b.n	8001fe2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	68d8      	ldr	r0, [r3, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68b9      	ldr	r1, [r7, #8]
 8001fa0:	f001 ffb0 	bl	8003f04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	425b      	negs	r3, r3
 8001fae:	441a      	add	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d207      	bcs.n	8001fd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	425b      	negs	r3, r3
 8001fca:	441a      	add	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d105      	bne.n	8001fe2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001fea:	697b      	ldr	r3, [r7, #20]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	d018      	beq.n	8002038 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	441a      	add	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d303      	bcc.n	8002028 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68d9      	ldr	r1, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	461a      	mov	r2, r3
 8002032:	6838      	ldr	r0, [r7, #0]
 8002034:	f001 ff66 	bl	8003f04 <memcpy>
	}
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002048:	f001 fc60 	bl	800390c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002052:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002054:	e011      	b.n	800207a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3324      	adds	r3, #36	; 0x24
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fd0c 	bl	8002a80 <xTaskRemoveFromEventList>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800206e:	f000 fde1 	bl	8002c34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	3b01      	subs	r3, #1
 8002076:	b2db      	uxtb	r3, r3
 8002078:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207e:	2b00      	cmp	r3, #0
 8002080:	dce9      	bgt.n	8002056 <prvUnlockQueue+0x16>
 8002082:	e000      	b.n	8002086 <prvUnlockQueue+0x46>
					break;
 8002084:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	22ff      	movs	r2, #255	; 0xff
 800208a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800208e:	f001 fc6d 	bl	800396c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002092:	f001 fc3b 	bl	800390c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800209c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800209e:	e011      	b.n	80020c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d012      	beq.n	80020ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3310      	adds	r3, #16
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fce7 	bl	8002a80 <xTaskRemoveFromEventList>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80020b8:	f000 fdbc 	bl	8002c34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80020bc:	7bbb      	ldrb	r3, [r7, #14]
 80020be:	3b01      	subs	r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	dce9      	bgt.n	80020a0 <prvUnlockQueue+0x60>
 80020cc:	e000      	b.n	80020d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80020ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	22ff      	movs	r2, #255	; 0xff
 80020d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80020d8:	f001 fc48 	bl	800396c <vPortExitCritical>
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80020ec:	f001 fc0e 	bl	800390c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80020f8:	2301      	movs	r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e001      	b.n	8002102 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002102:	f001 fc33 	bl	800396c <vPortExitCritical>

	return xReturn;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002118:	f001 fbf8 	bl	800390c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	429a      	cmp	r2, r3
 8002126:	d102      	bne.n	800212e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002128:	2301      	movs	r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e001      	b.n	8002132 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002132:	f001 fc1b 	bl	800396c <vPortExitCritical>

	return xReturn;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	e014      	b.n	800217a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002150:	4a0e      	ldr	r2, [pc, #56]	; (800218c <vQueueAddToRegistry+0x4c>)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10b      	bne.n	8002174 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800215c:	490b      	ldr	r1, [pc, #44]	; (800218c <vQueueAddToRegistry+0x4c>)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <vQueueAddToRegistry+0x4c>)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002172:	e006      	b.n	8002182 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3301      	adds	r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b07      	cmp	r3, #7
 800217e:	d9e7      	bls.n	8002150 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20001580 	.word	0x20001580

08002190 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80021a0:	f001 fbb4 	bl	800390c <vPortEnterCritical>
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021aa:	b25b      	sxtb	r3, r3
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d103      	bne.n	80021ba <vQueueWaitForMessageRestricted+0x2a>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c6:	d103      	bne.n	80021d0 <vQueueWaitForMessageRestricted+0x40>
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021d0:	f001 fbcc 	bl	800396c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d106      	bne.n	80021ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3324      	adds	r3, #36	; 0x24
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68b9      	ldr	r1, [r7, #8]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fc1f 	bl	8002a28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff28 	bl	8002040 <prvUnlockQueue>
	}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08e      	sub	sp, #56	; 0x38
 80021fc:	af04      	add	r7, sp, #16
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10a      	bne.n	8002222 <xTaskCreateStatic+0x2a>
	__asm volatile
 800220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	623b      	str	r3, [r7, #32]
}
 800221e:	bf00      	nop
 8002220:	e7fe      	b.n	8002220 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10a      	bne.n	800223e <xTaskCreateStatic+0x46>
	__asm volatile
 8002228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800222c:	f383 8811 	msr	BASEPRI, r3
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	61fb      	str	r3, [r7, #28]
}
 800223a:	bf00      	nop
 800223c:	e7fe      	b.n	800223c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800223e:	2354      	movs	r3, #84	; 0x54
 8002240:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b54      	cmp	r3, #84	; 0x54
 8002246:	d00a      	beq.n	800225e <xTaskCreateStatic+0x66>
	__asm volatile
 8002248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	61bb      	str	r3, [r7, #24]
}
 800225a:	bf00      	nop
 800225c:	e7fe      	b.n	800225c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002260:	2b00      	cmp	r3, #0
 8002262:	d01e      	beq.n	80022a2 <xTaskCreateStatic+0xaa>
 8002264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01b      	beq.n	80022a2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002272:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800227c:	2300      	movs	r3, #0
 800227e:	9303      	str	r3, [sp, #12]
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	9302      	str	r3, [sp, #8]
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f850 	bl	800233a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800229a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800229c:	f000 f8cc 	bl	8002438 <prvAddNewTaskToReadyList>
 80022a0:	e001      	b.n	80022a6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80022a6:	697b      	ldr	r3, [r7, #20]
	}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08c      	sub	sp, #48	; 0x30
 80022b4:	af04      	add	r7, sp, #16
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f001 fc21 	bl	8003b0c <pvPortMalloc>
 80022ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00e      	beq.n	80022f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80022d2:	2054      	movs	r0, #84	; 0x54
 80022d4:	f001 fc1a 	bl	8003b0c <pvPortMalloc>
 80022d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
 80022e6:	e005      	b.n	80022f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80022e8:	6978      	ldr	r0, [r7, #20]
 80022ea:	f001 fcd3 	bl	8003c94 <vPortFree>
 80022ee:	e001      	b.n	80022f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d017      	beq.n	800232a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	2300      	movs	r3, #0
 8002306:	9303      	str	r3, [sp, #12]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f80e 	bl	800233a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800231e:	69f8      	ldr	r0, [r7, #28]
 8002320:	f000 f88a 	bl	8002438 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002324:	2301      	movs	r3, #1
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	e002      	b.n	8002330 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002330:	69bb      	ldr	r3, [r7, #24]
	}
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b088      	sub	sp, #32
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002352:	3b01      	subs	r3, #1
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f023 0307 	bic.w	r3, r3, #7
 8002360:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <prvInitialiseNewTask+0x48>
	__asm volatile
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	f383 8811 	msr	BASEPRI, r3
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	617b      	str	r3, [r7, #20]
}
 800237e:	bf00      	nop
 8002380:	e7fe      	b.n	8002380 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e012      	b.n	80023ae <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	7819      	ldrb	r1, [r3, #0]
 8002390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	4413      	add	r3, r2
 8002396:	3334      	adds	r3, #52	; 0x34
 8002398:	460a      	mov	r2, r1
 800239a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	3301      	adds	r3, #1
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	2b0f      	cmp	r3, #15
 80023b2:	d9e9      	bls.n	8002388 <prvInitialiseNewTask+0x4e>
 80023b4:	e000      	b.n	80023b8 <prvInitialiseNewTask+0x7e>
		{
			break;
 80023b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d901      	bls.n	80023ca <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023c6:	2306      	movs	r3, #6
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	2200      	movs	r2, #0
 80023da:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	3304      	adds	r3, #4
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff f998 	bl	8001716 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	3318      	adds	r3, #24
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff f993 	bl	8001716 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	f1c3 0207 	rsb	r2, r3, #7
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	2200      	movs	r2, #0
 800240a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	68f9      	ldr	r1, [r7, #12]
 8002418:	69b8      	ldr	r0, [r7, #24]
 800241a:	f001 f983 	bl	8003724 <pxPortInitialiseStack>
 800241e:	4602      	mov	r2, r0
 8002420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002422:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002430:	bf00      	nop
 8002432:	3720      	adds	r7, #32
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002440:	f001 fa64 	bl	800390c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002444:	4b2a      	ldr	r3, [pc, #168]	; (80024f0 <prvAddNewTaskToReadyList+0xb8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <prvAddNewTaskToReadyList+0xb8>)
 800244c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800244e:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <prvAddNewTaskToReadyList+0xbc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002456:	4a27      	ldr	r2, [pc, #156]	; (80024f4 <prvAddNewTaskToReadyList+0xbc>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <prvAddNewTaskToReadyList+0xb8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d110      	bne.n	8002486 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002464:	f000 fc0a 	bl	8002c7c <prvInitialiseTaskLists>
 8002468:	e00d      	b.n	8002486 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <prvAddNewTaskToReadyList+0xc0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <prvAddNewTaskToReadyList+0xbc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	429a      	cmp	r2, r3
 800247e:	d802      	bhi.n	8002486 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002480:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <prvAddNewTaskToReadyList+0xbc>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <prvAddNewTaskToReadyList+0xc4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	4a1b      	ldr	r2, [pc, #108]	; (80024fc <prvAddNewTaskToReadyList+0xc4>)
 800248e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	2201      	movs	r2, #1
 8002496:	409a      	lsls	r2, r3
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <prvAddNewTaskToReadyList+0xc8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4313      	orrs	r3, r2
 800249e:	4a18      	ldr	r2, [pc, #96]	; (8002500 <prvAddNewTaskToReadyList+0xc8>)
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4a15      	ldr	r2, [pc, #84]	; (8002504 <prvAddNewTaskToReadyList+0xcc>)
 80024b0:	441a      	add	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f7ff f938 	bl	800172e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80024be:	f001 fa55 	bl	800396c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <prvAddNewTaskToReadyList+0xc0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00e      	beq.n	80024e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <prvAddNewTaskToReadyList+0xbc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d207      	bcs.n	80024e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <prvAddNewTaskToReadyList+0xd0>)
 80024da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200007dc 	.word	0x200007dc
 80024f4:	200006dc 	.word	0x200006dc
 80024f8:	200007e8 	.word	0x200007e8
 80024fc:	200007f8 	.word	0x200007f8
 8002500:	200007e4 	.word	0x200007e4
 8002504:	200006e0 	.word	0x200006e0
 8002508:	e000ed04 	.word	0xe000ed04

0800250c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d017      	beq.n	800254e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <vTaskDelay+0x60>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <vTaskDelay+0x30>
	__asm volatile
 8002526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252a:	f383 8811 	msr	BASEPRI, r3
 800252e:	f3bf 8f6f 	isb	sy
 8002532:	f3bf 8f4f 	dsb	sy
 8002536:	60bb      	str	r3, [r7, #8]
}
 8002538:	bf00      	nop
 800253a:	e7fe      	b.n	800253a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800253c:	f000 f880 	bl	8002640 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002540:	2100      	movs	r1, #0
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fd00 	bl	8002f48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002548:	f000 f888 	bl	800265c <xTaskResumeAll>
 800254c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d107      	bne.n	8002564 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <vTaskDelay+0x64>)
 8002556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000804 	.word	0x20000804
 8002570:	e000ed04 	.word	0xe000ed04

08002574 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002582:	463a      	mov	r2, r7
 8002584:	1d39      	adds	r1, r7, #4
 8002586:	f107 0308 	add.w	r3, r7, #8
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd fde0 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002590:	6839      	ldr	r1, [r7, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	9202      	str	r2, [sp, #8]
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	2300      	movs	r3, #0
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2300      	movs	r3, #0
 80025a0:	460a      	mov	r2, r1
 80025a2:	4921      	ldr	r1, [pc, #132]	; (8002628 <vTaskStartScheduler+0xb4>)
 80025a4:	4821      	ldr	r0, [pc, #132]	; (800262c <vTaskStartScheduler+0xb8>)
 80025a6:	f7ff fe27 	bl	80021f8 <xTaskCreateStatic>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4a20      	ldr	r2, [pc, #128]	; (8002630 <vTaskStartScheduler+0xbc>)
 80025ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <vTaskStartScheduler+0xbc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80025b8:	2301      	movs	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e001      	b.n	80025c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d102      	bne.n	80025ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80025c8:	f000 fd24 	bl	8003014 <xTimerCreateTimerTask>
 80025cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d116      	bne.n	8002602 <vTaskStartScheduler+0x8e>
	__asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	613b      	str	r3, [r7, #16]
}
 80025e6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <vTaskStartScheduler+0xc0>)
 80025ea:	f04f 32ff 	mov.w	r2, #4294967295
 80025ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <vTaskStartScheduler+0xc4>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <vTaskStartScheduler+0xc8>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80025fc:	f001 f914 	bl	8003828 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002600:	e00e      	b.n	8002620 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d10a      	bne.n	8002620 <vTaskStartScheduler+0xac>
	__asm volatile
 800260a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	60fb      	str	r3, [r7, #12]
}
 800261c:	bf00      	nop
 800261e:	e7fe      	b.n	800261e <vTaskStartScheduler+0xaa>
}
 8002620:	bf00      	nop
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	08003f94 	.word	0x08003f94
 800262c:	08002c4d 	.word	0x08002c4d
 8002630:	20000800 	.word	0x20000800
 8002634:	200007fc 	.word	0x200007fc
 8002638:	200007e8 	.word	0x200007e8
 800263c:	200007e0 	.word	0x200007e0

08002640 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <vTaskSuspendAll+0x18>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	4a03      	ldr	r2, [pc, #12]	; (8002658 <vTaskSuspendAll+0x18>)
 800264c:	6013      	str	r3, [r2, #0]
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000804 	.word	0x20000804

0800265c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <xTaskResumeAll+0x114>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10a      	bne.n	8002688 <xTaskResumeAll+0x2c>
	__asm volatile
 8002672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002676:	f383 8811 	msr	BASEPRI, r3
 800267a:	f3bf 8f6f 	isb	sy
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	603b      	str	r3, [r7, #0]
}
 8002684:	bf00      	nop
 8002686:	e7fe      	b.n	8002686 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002688:	f001 f940 	bl	800390c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800268c:	4b38      	ldr	r3, [pc, #224]	; (8002770 <xTaskResumeAll+0x114>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3b01      	subs	r3, #1
 8002692:	4a37      	ldr	r2, [pc, #220]	; (8002770 <xTaskResumeAll+0x114>)
 8002694:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002696:	4b36      	ldr	r3, [pc, #216]	; (8002770 <xTaskResumeAll+0x114>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d161      	bne.n	8002762 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800269e:	4b35      	ldr	r3, [pc, #212]	; (8002774 <xTaskResumeAll+0x118>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d05d      	beq.n	8002762 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026a6:	e02e      	b.n	8002706 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80026a8:	4b33      	ldr	r3, [pc, #204]	; (8002778 <xTaskResumeAll+0x11c>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3318      	adds	r3, #24
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff f895 	bl	80017e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3304      	adds	r3, #4
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f890 	bl	80017e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	2201      	movs	r2, #1
 80026ca:	409a      	lsls	r2, r3
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <xTaskResumeAll+0x120>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	4a2a      	ldr	r2, [pc, #168]	; (800277c <xTaskResumeAll+0x120>)
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4a27      	ldr	r2, [pc, #156]	; (8002780 <xTaskResumeAll+0x124>)
 80026e4:	441a      	add	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3304      	adds	r3, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	4610      	mov	r0, r2
 80026ee:	f7ff f81e 	bl	800172e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <xTaskResumeAll+0x128>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d302      	bcc.n	8002706 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002700:	4b21      	ldr	r3, [pc, #132]	; (8002788 <xTaskResumeAll+0x12c>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <xTaskResumeAll+0x11c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1cc      	bne.n	80026a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002714:	f000 fb50 	bl	8002db8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <xTaskResumeAll+0x130>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d010      	beq.n	8002746 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002724:	f000 f844 	bl	80027b0 <xTaskIncrementTick>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800272e:	4b16      	ldr	r3, [pc, #88]	; (8002788 <xTaskResumeAll+0x12c>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f1      	bne.n	8002724 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <xTaskResumeAll+0x130>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <xTaskResumeAll+0x12c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800274e:	2301      	movs	r3, #1
 8002750:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <xTaskResumeAll+0x134>)
 8002754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002762:	f001 f903 	bl	800396c <vPortExitCritical>

	return xAlreadyYielded;
 8002766:	68bb      	ldr	r3, [r7, #8]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000804 	.word	0x20000804
 8002774:	200007dc 	.word	0x200007dc
 8002778:	2000079c 	.word	0x2000079c
 800277c:	200007e4 	.word	0x200007e4
 8002780:	200006e0 	.word	0x200006e0
 8002784:	200006dc 	.word	0x200006dc
 8002788:	200007f0 	.word	0x200007f0
 800278c:	200007ec 	.word	0x200007ec
 8002790:	e000ed04 	.word	0xe000ed04

08002794 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <xTaskGetTickCount+0x18>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80027a0:	687b      	ldr	r3, [r7, #4]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	200007e0 	.word	0x200007e0

080027b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ba:	4b51      	ldr	r3, [pc, #324]	; (8002900 <xTaskIncrementTick+0x150>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 808d 	bne.w	80028de <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027c4:	4b4f      	ldr	r3, [pc, #316]	; (8002904 <xTaskIncrementTick+0x154>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80027cc:	4a4d      	ldr	r2, [pc, #308]	; (8002904 <xTaskIncrementTick+0x154>)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d120      	bne.n	800281a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80027d8:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <xTaskIncrementTick+0x158>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80027e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e6:	f383 8811 	msr	BASEPRI, r3
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	603b      	str	r3, [r7, #0]
}
 80027f4:	bf00      	nop
 80027f6:	e7fe      	b.n	80027f6 <xTaskIncrementTick+0x46>
 80027f8:	4b43      	ldr	r3, [pc, #268]	; (8002908 <xTaskIncrementTick+0x158>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <xTaskIncrementTick+0x15c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a41      	ldr	r2, [pc, #260]	; (8002908 <xTaskIncrementTick+0x158>)
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4a41      	ldr	r2, [pc, #260]	; (800290c <xTaskIncrementTick+0x15c>)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b40      	ldr	r3, [pc, #256]	; (8002910 <xTaskIncrementTick+0x160>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	4a3f      	ldr	r2, [pc, #252]	; (8002910 <xTaskIncrementTick+0x160>)
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	f000 facf 	bl	8002db8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <xTaskIncrementTick+0x164>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	429a      	cmp	r2, r3
 8002822:	d34d      	bcc.n	80028c0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002824:	4b38      	ldr	r3, [pc, #224]	; (8002908 <xTaskIncrementTick+0x158>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <xTaskIncrementTick+0x82>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <xTaskIncrementTick+0x84>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002838:	4b36      	ldr	r3, [pc, #216]	; (8002914 <xTaskIncrementTick+0x164>)
 800283a:	f04f 32ff 	mov.w	r2, #4294967295
 800283e:	601a      	str	r2, [r3, #0]
					break;
 8002840:	e03e      	b.n	80028c0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <xTaskIncrementTick+0x158>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	429a      	cmp	r2, r3
 8002858:	d203      	bcs.n	8002862 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800285a:	4a2e      	ldr	r2, [pc, #184]	; (8002914 <xTaskIncrementTick+0x164>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6013      	str	r3, [r2, #0]
						break;
 8002860:	e02e      	b.n	80028c0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3304      	adds	r3, #4
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe ffbc 	bl	80017e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	3318      	adds	r3, #24
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe ffb3 	bl	80017e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	2201      	movs	r2, #1
 8002884:	409a      	lsls	r2, r3
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <xTaskIncrementTick+0x168>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	4a22      	ldr	r2, [pc, #136]	; (8002918 <xTaskIncrementTick+0x168>)
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4a1f      	ldr	r2, [pc, #124]	; (800291c <xTaskIncrementTick+0x16c>)
 800289e:	441a      	add	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	3304      	adds	r3, #4
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f7fe ff41 	bl	800172e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <xTaskIncrementTick+0x170>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d3b4      	bcc.n	8002824 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028be:	e7b1      	b.n	8002824 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028c0:	4b17      	ldr	r3, [pc, #92]	; (8002920 <xTaskIncrementTick+0x170>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c6:	4915      	ldr	r1, [pc, #84]	; (800291c <xTaskIncrementTick+0x16c>)
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d907      	bls.n	80028e8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80028d8:	2301      	movs	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	e004      	b.n	80028e8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <xTaskIncrementTick+0x174>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <xTaskIncrementTick+0x174>)
 80028e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <xTaskIncrementTick+0x178>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80028f0:	2301      	movs	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80028f4:	697b      	ldr	r3, [r7, #20]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000804 	.word	0x20000804
 8002904:	200007e0 	.word	0x200007e0
 8002908:	20000794 	.word	0x20000794
 800290c:	20000798 	.word	0x20000798
 8002910:	200007f4 	.word	0x200007f4
 8002914:	200007fc 	.word	0x200007fc
 8002918:	200007e4 	.word	0x200007e4
 800291c:	200006e0 	.word	0x200006e0
 8002920:	200006dc 	.word	0x200006dc
 8002924:	200007ec 	.word	0x200007ec
 8002928:	200007f0 	.word	0x200007f0

0800292c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002932:	4b26      	ldr	r3, [pc, #152]	; (80029cc <vTaskSwitchContext+0xa0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800293a:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <vTaskSwitchContext+0xa4>)
 800293c:	2201      	movs	r2, #1
 800293e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002940:	e03f      	b.n	80029c2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002942:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <vTaskSwitchContext+0xa4>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <vTaskSwitchContext+0xa8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002956:	7afb      	ldrb	r3, [r7, #11]
 8002958:	f1c3 031f 	rsb	r3, r3, #31
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	491e      	ldr	r1, [pc, #120]	; (80029d8 <vTaskSwitchContext+0xac>)
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10a      	bne.n	8002988 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002976:	f383 8811 	msr	BASEPRI, r3
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	607b      	str	r3, [r7, #4]
}
 8002984:	bf00      	nop
 8002986:	e7fe      	b.n	8002986 <vTaskSwitchContext+0x5a>
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <vTaskSwitchContext+0xac>)
 8002994:	4413      	add	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	3308      	adds	r3, #8
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d104      	bne.n	80029b8 <vTaskSwitchContext+0x8c>
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	4a07      	ldr	r2, [pc, #28]	; (80029dc <vTaskSwitchContext+0xb0>)
 80029c0:	6013      	str	r3, [r2, #0]
}
 80029c2:	bf00      	nop
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000804 	.word	0x20000804
 80029d0:	200007f0 	.word	0x200007f0
 80029d4:	200007e4 	.word	0x200007e4
 80029d8:	200006e0 	.word	0x200006e0
 80029dc:	200006dc 	.word	0x200006dc

080029e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	60fb      	str	r3, [r7, #12]
}
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <vTaskPlaceOnEventList+0x44>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3318      	adds	r3, #24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe feb0 	bl	8001774 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a14:	2101      	movs	r1, #1
 8002a16:	6838      	ldr	r0, [r7, #0]
 8002a18:	f000 fa96 	bl	8002f48 <prvAddCurrentTaskToDelayedList>
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200006dc 	.word	0x200006dc

08002a28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	617b      	str	r3, [r7, #20]
}
 8002a4c:	bf00      	nop
 8002a4e:	e7fe      	b.n	8002a4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <vTaskPlaceOnEventListRestricted+0x54>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3318      	adds	r3, #24
 8002a56:	4619      	mov	r1, r3
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7fe fe68 	bl	800172e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
 8002a68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	68b8      	ldr	r0, [r7, #8]
 8002a6e:	f000 fa6b 	bl	8002f48 <prvAddCurrentTaskToDelayedList>
	}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200006dc 	.word	0x200006dc

08002a80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	60fb      	str	r3, [r7, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	3318      	adds	r3, #24
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fe97 	bl	80017e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <xTaskRemoveFromEventList+0xac>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11c      	bne.n	8002af8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fe8e 	bl	80017e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	2201      	movs	r2, #1
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <xTaskRemoveFromEventList+0xb0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <xTaskRemoveFromEventList+0xb0>)
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <xTaskRemoveFromEventList+0xb4>)
 8002ae8:	441a      	add	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	3304      	adds	r3, #4
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f7fe fe1c 	bl	800172e <vListInsertEnd>
 8002af6:	e005      	b.n	8002b04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	3318      	adds	r3, #24
 8002afc:	4619      	mov	r1, r3
 8002afe:	480e      	ldr	r0, [pc, #56]	; (8002b38 <xTaskRemoveFromEventList+0xb8>)
 8002b00:	f7fe fe15 	bl	800172e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <xTaskRemoveFromEventList+0xbc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d905      	bls.n	8002b1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002b12:	2301      	movs	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <xTaskRemoveFromEventList+0xc0>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e001      	b.n	8002b22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002b22:	697b      	ldr	r3, [r7, #20]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000804 	.word	0x20000804
 8002b30:	200007e4 	.word	0x200007e4
 8002b34:	200006e0 	.word	0x200006e0
 8002b38:	2000079c 	.word	0x2000079c
 8002b3c:	200006dc 	.word	0x200006dc
 8002b40:	200007f0 	.word	0x200007f0

08002b44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <vTaskInternalSetTimeOutState+0x24>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <vTaskInternalSetTimeOutState+0x28>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	605a      	str	r2, [r3, #4]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	200007f4 	.word	0x200007f4
 8002b6c:	200007e0 	.word	0x200007e0

08002b70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	613b      	str	r3, [r7, #16]
}
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	60fb      	str	r3, [r7, #12]
}
 8002bae:	bf00      	nop
 8002bb0:	e7fe      	b.n	8002bb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002bb2:	f000 feab 	bl	800390c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <xTaskCheckForTimeOut+0xbc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d102      	bne.n	8002bd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	e023      	b.n	8002c1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <xTaskCheckForTimeOut+0xc0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d007      	beq.n	8002bf2 <xTaskCheckForTimeOut+0x82>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d302      	bcc.n	8002bf2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002bec:	2301      	movs	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	e015      	b.n	8002c1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d20b      	bcs.n	8002c14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	1ad2      	subs	r2, r2, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ff9b 	bl	8002b44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	e004      	b.n	8002c1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002c1e:	f000 fea5 	bl	800396c <vPortExitCritical>

	return xReturn;
 8002c22:	69fb      	ldr	r3, [r7, #28]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3720      	adds	r7, #32
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	200007e0 	.word	0x200007e0
 8002c30:	200007f4 	.word	0x200007f4

08002c34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <vTaskMissedYield+0x14>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	200007f0 	.word	0x200007f0

08002c4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c54:	f000 f852 	bl	8002cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <prvIdleTask+0x28>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d9f9      	bls.n	8002c54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <prvIdleTask+0x2c>)
 8002c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c70:	e7f0      	b.n	8002c54 <prvIdleTask+0x8>
 8002c72:	bf00      	nop
 8002c74:	200006e0 	.word	0x200006e0
 8002c78:	e000ed04 	.word	0xe000ed04

08002c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c82:	2300      	movs	r3, #0
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	e00c      	b.n	8002ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <prvInitialiseTaskLists+0x60>)
 8002c94:	4413      	add	r3, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fd1e 	bl	80016d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	607b      	str	r3, [r7, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b06      	cmp	r3, #6
 8002ca6:	d9ef      	bls.n	8002c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ca8:	480d      	ldr	r0, [pc, #52]	; (8002ce0 <prvInitialiseTaskLists+0x64>)
 8002caa:	f7fe fd15 	bl	80016d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002cae:	480d      	ldr	r0, [pc, #52]	; (8002ce4 <prvInitialiseTaskLists+0x68>)
 8002cb0:	f7fe fd12 	bl	80016d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cb4:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <prvInitialiseTaskLists+0x6c>)
 8002cb6:	f7fe fd0f 	bl	80016d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cba:	480c      	ldr	r0, [pc, #48]	; (8002cec <prvInitialiseTaskLists+0x70>)
 8002cbc:	f7fe fd0c 	bl	80016d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002cc0:	480b      	ldr	r0, [pc, #44]	; (8002cf0 <prvInitialiseTaskLists+0x74>)
 8002cc2:	f7fe fd09 	bl	80016d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <prvInitialiseTaskLists+0x78>)
 8002cc8:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <prvInitialiseTaskLists+0x64>)
 8002cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <prvInitialiseTaskLists+0x7c>)
 8002cce:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <prvInitialiseTaskLists+0x68>)
 8002cd0:	601a      	str	r2, [r3, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200006e0 	.word	0x200006e0
 8002ce0:	2000076c 	.word	0x2000076c
 8002ce4:	20000780 	.word	0x20000780
 8002ce8:	2000079c 	.word	0x2000079c
 8002cec:	200007b0 	.word	0x200007b0
 8002cf0:	200007c8 	.word	0x200007c8
 8002cf4:	20000794 	.word	0x20000794
 8002cf8:	20000798 	.word	0x20000798

08002cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d02:	e019      	b.n	8002d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d04:	f000 fe02 	bl	800390c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d08:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <prvCheckTasksWaitingTermination+0x50>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe fd65 	bl	80017e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <prvCheckTasksWaitingTermination+0x54>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <prvCheckTasksWaitingTermination+0x54>)
 8002d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <prvCheckTasksWaitingTermination+0x58>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <prvCheckTasksWaitingTermination+0x58>)
 8002d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d2e:	f000 fe1d 	bl	800396c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f810 	bl	8002d58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <prvCheckTasksWaitingTermination+0x58>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e1      	bne.n	8002d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	200007b0 	.word	0x200007b0
 8002d50:	200007dc 	.word	0x200007dc
 8002d54:	200007c4 	.word	0x200007c4

08002d58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d108      	bne.n	8002d7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 ff90 	bl	8003c94 <vPortFree>
				vPortFree( pxTCB );
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 ff8d 	bl	8003c94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d7a:	e018      	b.n	8002dae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d103      	bne.n	8002d8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 ff84 	bl	8003c94 <vPortFree>
	}
 8002d8c:	e00f      	b.n	8002dae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d00a      	beq.n	8002dae <prvDeleteTCB+0x56>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	60fb      	str	r3, [r7, #12]
}
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <prvDeleteTCB+0x54>
	}
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <prvResetNextTaskUnblockTime+0x40>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <prvResetNextTaskUnblockTime+0x14>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <prvResetNextTaskUnblockTime+0x16>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <prvResetNextTaskUnblockTime+0x44>)
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002dda:	e008      	b.n	8002dee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <prvResetNextTaskUnblockTime+0x40>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4a04      	ldr	r2, [pc, #16]	; (8002dfc <prvResetNextTaskUnblockTime+0x44>)
 8002dec:	6013      	str	r3, [r2, #0]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	20000794 	.word	0x20000794
 8002dfc:	200007fc 	.word	0x200007fc

08002e00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <xTaskGetSchedulerState+0x34>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	e008      	b.n	8002e26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <xTaskGetSchedulerState+0x38>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	e001      	b.n	8002e26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002e26:	687b      	ldr	r3, [r7, #4]
	}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	200007e8 	.word	0x200007e8
 8002e38:	20000804 	.word	0x20000804

08002e3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d06e      	beq.n	8002f30 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002e52:	4b3a      	ldr	r3, [pc, #232]	; (8002f3c <xTaskPriorityDisinherit+0x100>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d00a      	beq.n	8002e72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	60fb      	str	r3, [r7, #12]
}
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10a      	bne.n	8002e90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	60bb      	str	r3, [r7, #8]
}
 8002e8c:	bf00      	nop
 8002e8e:	e7fe      	b.n	8002e8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e94:	1e5a      	subs	r2, r3, #1
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d044      	beq.n	8002f30 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d140      	bne.n	8002f30 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fc96 	bl	80017e4 <uxListRemove>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d115      	bne.n	8002eea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec2:	491f      	ldr	r1, [pc, #124]	; (8002f40 <xTaskPriorityDisinherit+0x104>)
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <xTaskPriorityDisinherit+0xae>
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	2201      	movs	r2, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <xTaskPriorityDisinherit+0x108>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <xTaskPriorityDisinherit+0x108>)
 8002ee8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	f1c3 0207 	rsb	r2, r3, #7
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	2201      	movs	r2, #1
 8002f04:	409a      	lsls	r2, r3
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <xTaskPriorityDisinherit+0x108>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <xTaskPriorityDisinherit+0x108>)
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <xTaskPriorityDisinherit+0x104>)
 8002f1e:	441a      	add	r2, r3
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f7fe fc01 	bl	800172e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002f30:	697b      	ldr	r3, [r7, #20]
	}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200006dc 	.word	0x200006dc
 8002f40:	200006e0 	.word	0x200006e0
 8002f44:	200007e4 	.word	0x200007e4

08002f48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002f52:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fc40 	bl	80017e4 <uxListRemove>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10b      	bne.n	8002f82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	2201      	movs	r2, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43da      	mvns	r2, r3
 8002f78:	4b21      	ldr	r3, [pc, #132]	; (8003000 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	4a20      	ldr	r2, [pc, #128]	; (8003000 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002f80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d10a      	bne.n	8002fa0 <prvAddCurrentTaskToDelayedList+0x58>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d007      	beq.n	8002fa0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3304      	adds	r3, #4
 8002f96:	4619      	mov	r1, r3
 8002f98:	481a      	ldr	r0, [pc, #104]	; (8003004 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002f9a:	f7fe fbc8 	bl	800172e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f9e:	e026      	b.n	8002fee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d209      	bcs.n	8002fcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f7fe fbd5 	bl	8001774 <vListInsert>
}
 8002fca:	e010      	b.n	8002fee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	; (800300c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f7fe fbcb 	bl	8001774 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d202      	bcs.n	8002fee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002fe8:	4a09      	ldr	r2, [pc, #36]	; (8003010 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	6013      	str	r3, [r2, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200007e0 	.word	0x200007e0
 8002ffc:	200006dc 	.word	0x200006dc
 8003000:	200007e4 	.word	0x200007e4
 8003004:	200007c8 	.word	0x200007c8
 8003008:	20000798 	.word	0x20000798
 800300c:	20000794 	.word	0x20000794
 8003010:	200007fc 	.word	0x200007fc

08003014 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800301e:	f000 fb41 	bl	80036a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <xTimerCreateTimerTask+0x80>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d021      	beq.n	800306e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003032:	1d3a      	adds	r2, r7, #4
 8003034:	f107 0108 	add.w	r1, r7, #8
 8003038:	f107 030c 	add.w	r3, r7, #12
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd f89f 	bl	8000180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	9202      	str	r2, [sp, #8]
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	2302      	movs	r3, #2
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	2300      	movs	r3, #0
 8003052:	460a      	mov	r2, r1
 8003054:	4910      	ldr	r1, [pc, #64]	; (8003098 <xTimerCreateTimerTask+0x84>)
 8003056:	4811      	ldr	r0, [pc, #68]	; (800309c <xTimerCreateTimerTask+0x88>)
 8003058:	f7ff f8ce 	bl	80021f8 <xTaskCreateStatic>
 800305c:	4603      	mov	r3, r0
 800305e:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <xTimerCreateTimerTask+0x8c>)
 8003060:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <xTimerCreateTimerTask+0x8c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800306a:	2301      	movs	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	613b      	str	r3, [r7, #16]
}
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800308a:	697b      	ldr	r3, [r7, #20]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000838 	.word	0x20000838
 8003098:	08003f9c 	.word	0x08003f9c
 800309c:	080032e1 	.word	0x080032e1
 80030a0:	2000083c 	.word	0x2000083c

080030a4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80030b2:	202c      	movs	r0, #44	; 0x2c
 80030b4:	f000 fd2a 	bl	8003b0c <pvPortMalloc>
 80030b8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00d      	beq.n	80030dc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f846 	bl	8003160 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80030dc:	697b      	ldr	r3, [r7, #20]
	}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b08a      	sub	sp, #40	; 0x28
 80030ea:	af02      	add	r7, sp, #8
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80030f4:	232c      	movs	r3, #44	; 0x2c
 80030f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b2c      	cmp	r3, #44	; 0x2c
 80030fc:	d00a      	beq.n	8003114 <xTimerCreateStatic+0x2e>
	__asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	61bb      	str	r3, [r7, #24]
}
 8003110:	bf00      	nop
 8003112:	e7fe      	b.n	8003112 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <xTimerCreateStatic+0x4a>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	617b      	str	r3, [r7, #20]
}
 800312c:	bf00      	nop
 800312e:	e7fe      	b.n	800312e <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f809 	bl	8003160 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8003156:	69fb      	ldr	r3, [r7, #28]
	}
 8003158:	4618      	mov	r0, r3
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	617b      	str	r3, [r7, #20]
}
 8003186:	bf00      	nop
 8003188:	e7fe      	b.n	8003188 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d015      	beq.n	80031bc <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003190:	f000 fa88 	bl	80036a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	6a3a      	ldr	r2, [r7, #32]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	3304      	adds	r3, #4
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe faad 	bl	8001716 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80031bc:	bf00      	nop
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10a      	bne.n	80031f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80031dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	623b      	str	r3, [r7, #32]
}
 80031ee:	bf00      	nop
 80031f0:	e7fe      	b.n	80031f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <xTimerGenericCommand+0x98>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d02a      	beq.n	8003250 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b05      	cmp	r3, #5
 800320a:	dc18      	bgt.n	800323e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800320c:	f7ff fdf8 	bl	8002e00 <xTaskGetSchedulerState>
 8003210:	4603      	mov	r3, r0
 8003212:	2b02      	cmp	r3, #2
 8003214:	d109      	bne.n	800322a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <xTimerGenericCommand+0x98>)
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	f107 0114 	add.w	r1, r7, #20
 800321e:	2300      	movs	r3, #0
 8003220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003222:	f7fe fc07 	bl	8001a34 <xQueueGenericSend>
 8003226:	6278      	str	r0, [r7, #36]	; 0x24
 8003228:	e012      	b.n	8003250 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800322a:	4b0c      	ldr	r3, [pc, #48]	; (800325c <xTimerGenericCommand+0x98>)
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	f107 0114 	add.w	r1, r7, #20
 8003232:	2300      	movs	r3, #0
 8003234:	2200      	movs	r2, #0
 8003236:	f7fe fbfd 	bl	8001a34 <xQueueGenericSend>
 800323a:	6278      	str	r0, [r7, #36]	; 0x24
 800323c:	e008      	b.n	8003250 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <xTimerGenericCommand+0x98>)
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	f107 0114 	add.w	r1, r7, #20
 8003246:	2300      	movs	r3, #0
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	f7fe fcf1 	bl	8001c30 <xQueueGenericSendFromISR>
 800324e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003252:	4618      	mov	r0, r3
 8003254:	3728      	adds	r7, #40	; 0x28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000838 	.word	0x20000838

08003260 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af02      	add	r7, sp, #8
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800326a:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <prvProcessExpiredTimer+0x7c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	3304      	adds	r3, #4
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe fab3 	bl	80017e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d122      	bne.n	80032cc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	18d1      	adds	r1, r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	6978      	ldr	r0, [r7, #20]
 8003294:	f000 f8c8 	bl	8003428 <prvInsertTimerInActiveList>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800329e:	2300      	movs	r3, #0
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	2300      	movs	r3, #0
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	2100      	movs	r1, #0
 80032a8:	6978      	ldr	r0, [r7, #20]
 80032aa:	f7ff ff8b 	bl	80031c4 <xTimerGenericCommand>
 80032ae:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	60fb      	str	r3, [r7, #12]
}
 80032c8:	bf00      	nop
 80032ca:	e7fe      	b.n	80032ca <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	6978      	ldr	r0, [r7, #20]
 80032d2:	4798      	blx	r3
}
 80032d4:	bf00      	nop
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000830 	.word	0x20000830

080032e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80032e8:	f107 0308 	add.w	r3, r7, #8
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 f857 	bl	80033a0 <prvGetNextExpireTime>
 80032f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4619      	mov	r1, r3
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f803 	bl	8003304 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80032fe:	f000 f8d5 	bl	80034ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003302:	e7f1      	b.n	80032e8 <prvTimerTask+0x8>

08003304 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800330e:	f7ff f997 	bl	8002640 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003312:	f107 0308 	add.w	r3, r7, #8
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f866 	bl	80033e8 <prvSampleTimeNow>
 800331c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d130      	bne.n	8003386 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <prvProcessTimerOrBlockTask+0x3c>
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	429a      	cmp	r2, r3
 8003330:	d806      	bhi.n	8003340 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003332:	f7ff f993 	bl	800265c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003336:	68f9      	ldr	r1, [r7, #12]
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ff91 	bl	8003260 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800333e:	e024      	b.n	800338a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <prvProcessTimerOrBlockTask+0x90>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <prvProcessTimerOrBlockTask+0x94>)
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	f7fe ff13 	bl	8002190 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800336a:	f7ff f977 	bl	800265c <xTaskResumeAll>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <prvProcessTimerOrBlockTask+0x98>)
 8003376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	f3bf 8f6f 	isb	sy
}
 8003384:	e001      	b.n	800338a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003386:	f7ff f969 	bl	800265c <xTaskResumeAll>
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000834 	.word	0x20000834
 8003398:	20000838 	.word	0x20000838
 800339c:	e000ed04 	.word	0xe000ed04

080033a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <prvGetNextExpireTime+0x44>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <prvGetNextExpireTime+0x44>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e001      	b.n	80033d6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80033d6:	68fb      	ldr	r3, [r7, #12]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000830 	.word	0x20000830

080033e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80033f0:	f7ff f9d0 	bl	8002794 <xTaskGetTickCount>
 80033f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <prvSampleTimeNow+0x3c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d205      	bcs.n	800340c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003400:	f000 f8ee 	bl	80035e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e002      	b.n	8003412 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003412:	4a04      	ldr	r2, [pc, #16]	; (8003424 <prvSampleTimeNow+0x3c>)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003418:	68fb      	ldr	r3, [r7, #12]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000840 	.word	0x20000840

08003428 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d812      	bhi.n	8003474 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	1ad2      	subs	r2, r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	429a      	cmp	r2, r3
 800345a:	d302      	bcc.n	8003462 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800345c:	2301      	movs	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e01b      	b.n	800349a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <prvInsertTimerInActiveList+0x7c>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3304      	adds	r3, #4
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f7fe f981 	bl	8001774 <vListInsert>
 8003472:	e012      	b.n	800349a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d206      	bcs.n	800348a <prvInsertTimerInActiveList+0x62>
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d302      	bcc.n	800348a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003484:	2301      	movs	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	e007      	b.n	800349a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800348a:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <prvInsertTimerInActiveList+0x80>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3304      	adds	r3, #4
 8003492:	4619      	mov	r1, r3
 8003494:	4610      	mov	r0, r2
 8003496:	f7fe f96d 	bl	8001774 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800349a:	697b      	ldr	r3, [r7, #20]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000834 	.word	0x20000834
 80034a8:	20000830 	.word	0x20000830

080034ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08c      	sub	sp, #48	; 0x30
 80034b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80034b2:	e081      	b.n	80035b8 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	db7d      	blt.n	80035b6 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	3304      	adds	r3, #4
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe f98a 	bl	80017e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034d0:	1d3b      	adds	r3, r7, #4
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff88 	bl	80033e8 <prvSampleTimeNow>
 80034d8:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b09      	cmp	r3, #9
 80034de:	d86b      	bhi.n	80035b8 <prvProcessReceivedCommands+0x10c>
 80034e0:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <prvProcessReceivedCommands+0x3c>)
 80034e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e6:	bf00      	nop
 80034e8:	08003511 	.word	0x08003511
 80034ec:	08003511 	.word	0x08003511
 80034f0:	08003511 	.word	0x08003511
 80034f4:	080035b9 	.word	0x080035b9
 80034f8:	0800356d 	.word	0x0800356d
 80034fc:	080035a5 	.word	0x080035a5
 8003500:	08003511 	.word	0x08003511
 8003504:	08003511 	.word	0x08003511
 8003508:	080035b9 	.word	0x080035b9
 800350c:	0800356d 	.word	0x0800356d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	18d1      	adds	r1, r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a3a      	ldr	r2, [r7, #32]
 800351c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800351e:	f7ff ff83 	bl	8003428 <prvInsertTimerInActiveList>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d047      	beq.n	80035b8 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800352e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d13f      	bne.n	80035b8 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	441a      	add	r2, r3
 8003540:	2300      	movs	r3, #0
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2300      	movs	r3, #0
 8003546:	2100      	movs	r1, #0
 8003548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800354a:	f7ff fe3b 	bl	80031c4 <xTimerGenericCommand>
 800354e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d130      	bne.n	80035b8 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	61bb      	str	r3, [r7, #24]
}
 8003568:	bf00      	nop
 800356a:	e7fe      	b.n	800356a <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	617b      	str	r3, [r7, #20]
}
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	18d1      	adds	r1, r2, r3
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	6a3a      	ldr	r2, [r7, #32]
 800359c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800359e:	f7ff ff43 	bl	8003428 <prvInsertTimerInActiveList>
					break;
 80035a2:	e009      	b.n	80035b8 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 80035ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035b0:	f000 fb70 	bl	8003c94 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80035b4:	e000      	b.n	80035b8 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80035b6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80035b8:	4b08      	ldr	r3, [pc, #32]	; (80035dc <prvProcessReceivedCommands+0x130>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f107 0108 	add.w	r1, r7, #8
 80035c0:	2200      	movs	r2, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe fbcc 	bl	8001d60 <xQueueReceive>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f47f af72 	bne.w	80034b4 <prvProcessReceivedCommands+0x8>
	}
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	3728      	adds	r7, #40	; 0x28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000838 	.word	0x20000838

080035e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80035e6:	e045      	b.n	8003674 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035e8:	4b2c      	ldr	r3, [pc, #176]	; (800369c <prvSwitchTimerLists+0xbc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035f2:	4b2a      	ldr	r3, [pc, #168]	; (800369c <prvSwitchTimerLists+0xbc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3304      	adds	r3, #4
 8003600:	4618      	mov	r0, r3
 8003602:	f7fe f8ef 	bl	80017e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d12e      	bne.n	8003674 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	429a      	cmp	r2, r3
 8003626:	d90e      	bls.n	8003646 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003634:	4b19      	ldr	r3, [pc, #100]	; (800369c <prvSwitchTimerLists+0xbc>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3304      	adds	r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f7fe f898 	bl	8001774 <vListInsert>
 8003644:	e016      	b.n	8003674 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003646:	2300      	movs	r3, #0
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	2300      	movs	r3, #0
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	2100      	movs	r1, #0
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff fdb7 	bl	80031c4 <xTimerGenericCommand>
 8003656:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <prvSwitchTimerLists+0x94>
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	603b      	str	r3, [r7, #0]
}
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <prvSwitchTimerLists+0xbc>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1b4      	bne.n	80035e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800367e:	4b07      	ldr	r3, [pc, #28]	; (800369c <prvSwitchTimerLists+0xbc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <prvSwitchTimerLists+0xc0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a04      	ldr	r2, [pc, #16]	; (800369c <prvSwitchTimerLists+0xbc>)
 800368a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <prvSwitchTimerLists+0xc0>)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	6013      	str	r3, [r2, #0]
}
 8003692:	bf00      	nop
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000830 	.word	0x20000830
 80036a0:	20000834 	.word	0x20000834

080036a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80036aa:	f000 f92f 	bl	800390c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <prvCheckForValidListAndQueue+0x60>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d120      	bne.n	80036f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80036b6:	4814      	ldr	r0, [pc, #80]	; (8003708 <prvCheckForValidListAndQueue+0x64>)
 80036b8:	f7fe f80e 	bl	80016d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80036bc:	4813      	ldr	r0, [pc, #76]	; (800370c <prvCheckForValidListAndQueue+0x68>)
 80036be:	f7fe f80b 	bl	80016d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80036c2:	4b13      	ldr	r3, [pc, #76]	; (8003710 <prvCheckForValidListAndQueue+0x6c>)
 80036c4:	4a10      	ldr	r2, [pc, #64]	; (8003708 <prvCheckForValidListAndQueue+0x64>)
 80036c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <prvCheckForValidListAndQueue+0x70>)
 80036ca:	4a10      	ldr	r2, [pc, #64]	; (800370c <prvCheckForValidListAndQueue+0x68>)
 80036cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80036ce:	2300      	movs	r3, #0
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <prvCheckForValidListAndQueue+0x74>)
 80036d4:	4a11      	ldr	r2, [pc, #68]	; (800371c <prvCheckForValidListAndQueue+0x78>)
 80036d6:	210c      	movs	r1, #12
 80036d8:	200a      	movs	r0, #10
 80036da:	f7fe f915 	bl	8001908 <xQueueGenericCreateStatic>
 80036de:	4603      	mov	r3, r0
 80036e0:	4a08      	ldr	r2, [pc, #32]	; (8003704 <prvCheckForValidListAndQueue+0x60>)
 80036e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80036e4:	4b07      	ldr	r3, [pc, #28]	; (8003704 <prvCheckForValidListAndQueue+0x60>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <prvCheckForValidListAndQueue+0x60>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	490b      	ldr	r1, [pc, #44]	; (8003720 <prvCheckForValidListAndQueue+0x7c>)
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fd24 	bl	8002140 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036f8:	f000 f938 	bl	800396c <vPortExitCritical>
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000838 	.word	0x20000838
 8003708:	20000808 	.word	0x20000808
 800370c:	2000081c 	.word	0x2000081c
 8003710:	20000830 	.word	0x20000830
 8003714:	20000834 	.word	0x20000834
 8003718:	200008bc 	.word	0x200008bc
 800371c:	20000844 	.word	0x20000844
 8003720:	08003fa4 	.word	0x08003fa4

08003724 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3b04      	subs	r3, #4
 8003734:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800373c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3b04      	subs	r3, #4
 8003742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f023 0201 	bic.w	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3b04      	subs	r3, #4
 8003752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003754:	4a08      	ldr	r2, [pc, #32]	; (8003778 <pxPortInitialiseStack+0x54>)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3b14      	subs	r3, #20
 800375e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3b20      	subs	r3, #32
 800376a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800376c:	68fb      	ldr	r3, [r7, #12]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr
 8003778:	0800377d 	.word	0x0800377d

0800377c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003786:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <prvTaskExitError+0x54>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d00a      	beq.n	80037a6 <prvTaskExitError+0x2a>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	60fb      	str	r3, [r7, #12]
}
 80037a2:	bf00      	nop
 80037a4:	e7fe      	b.n	80037a4 <prvTaskExitError+0x28>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	60bb      	str	r3, [r7, #8]
}
 80037b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80037ba:	bf00      	nop
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0fc      	beq.n	80037bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	2000000c 	.word	0x2000000c
	...

080037e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <pxCurrentTCBConst2>)
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	6808      	ldr	r0, [r1, #0]
 80037e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037ea:	f380 8809 	msr	PSP, r0
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f380 8811 	msr	BASEPRI, r0
 80037fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80037fe:	4770      	bx	lr

08003800 <pxCurrentTCBConst2>:
 8003800:	200006dc 	.word	0x200006dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop

08003808 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003808:	4806      	ldr	r0, [pc, #24]	; (8003824 <prvPortStartFirstTask+0x1c>)
 800380a:	6800      	ldr	r0, [r0, #0]
 800380c:	6800      	ldr	r0, [r0, #0]
 800380e:	f380 8808 	msr	MSP, r0
 8003812:	b662      	cpsie	i
 8003814:	b661      	cpsie	f
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	df00      	svc	0
 8003820:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003822:	bf00      	nop
 8003824:	e000ed08 	.word	0xe000ed08

08003828 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800382e:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <xPortStartScheduler+0xd0>)
 8003830:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	22ff      	movs	r2, #255	; 0xff
 800383e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <xPortStartScheduler+0xd4>)
 8003854:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003856:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <xPortStartScheduler+0xd8>)
 8003858:	2207      	movs	r2, #7
 800385a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800385c:	e009      	b.n	8003872 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800385e:	4b28      	ldr	r3, [pc, #160]	; (8003900 <xPortStartScheduler+0xd8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3b01      	subs	r3, #1
 8003864:	4a26      	ldr	r2, [pc, #152]	; (8003900 <xPortStartScheduler+0xd8>)
 8003866:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b80      	cmp	r3, #128	; 0x80
 800387c:	d0ef      	beq.n	800385e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <xPortStartScheduler+0xd8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1c3 0307 	rsb	r3, r3, #7
 8003886:	2b04      	cmp	r3, #4
 8003888:	d00a      	beq.n	80038a0 <xPortStartScheduler+0x78>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	60bb      	str	r3, [r7, #8]
}
 800389c:	bf00      	nop
 800389e:	e7fe      	b.n	800389e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038a0:	4b17      	ldr	r3, [pc, #92]	; (8003900 <xPortStartScheduler+0xd8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	4a16      	ldr	r2, [pc, #88]	; (8003900 <xPortStartScheduler+0xd8>)
 80038a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <xPortStartScheduler+0xd8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038b2:	4a13      	ldr	r2, [pc, #76]	; (8003900 <xPortStartScheduler+0xd8>)
 80038b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <xPortStartScheduler+0xdc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <xPortStartScheduler+0xdc>)
 80038c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <xPortStartScheduler+0xdc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <xPortStartScheduler+0xdc>)
 80038d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80038d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038d6:	f000 f8b9 	bl	8003a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <xPortStartScheduler+0xe0>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80038e0:	f7ff ff92 	bl	8003808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80038e4:	f7ff f822 	bl	800292c <vTaskSwitchContext>
	prvTaskExitError();
 80038e8:	f7ff ff48 	bl	800377c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000e400 	.word	0xe000e400
 80038fc:	20000904 	.word	0x20000904
 8003900:	20000908 	.word	0x20000908
 8003904:	e000ed20 	.word	0xe000ed20
 8003908:	2000000c 	.word	0x2000000c

0800390c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	607b      	str	r3, [r7, #4]
}
 8003924:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <vPortEnterCritical+0x58>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3301      	adds	r3, #1
 800392c:	4a0d      	ldr	r2, [pc, #52]	; (8003964 <vPortEnterCritical+0x58>)
 800392e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <vPortEnterCritical+0x58>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d10f      	bne.n	8003958 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <vPortEnterCritical+0x5c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <vPortEnterCritical+0x4c>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	603b      	str	r3, [r7, #0]
}
 8003954:	bf00      	nop
 8003956:	e7fe      	b.n	8003956 <vPortEnterCritical+0x4a>
	}
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003972:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <vPortExitCritical+0x4c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <vPortExitCritical+0x24>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	607b      	str	r3, [r7, #4]
}
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <vPortExitCritical+0x4c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3b01      	subs	r3, #1
 8003996:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <vPortExitCritical+0x4c>)
 8003998:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800399a:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <vPortExitCritical+0x4c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <vPortExitCritical+0x42>
 80039a2:	2300      	movs	r3, #0
 80039a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	f383 8811 	msr	BASEPRI, r3
}
 80039ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	2000000c 	.word	0x2000000c
 80039bc:	00000000 	.word	0x00000000

080039c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039c0:	f3ef 8009 	mrs	r0, PSP
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <pxCurrentTCBConst>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039d0:	6010      	str	r0, [r2, #0]
 80039d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80039d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80039da:	f380 8811 	msr	BASEPRI, r0
 80039de:	f7fe ffa5 	bl	800292c <vTaskSwitchContext>
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f380 8811 	msr	BASEPRI, r0
 80039ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80039ee:	6819      	ldr	r1, [r3, #0]
 80039f0:	6808      	ldr	r0, [r1, #0]
 80039f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039f6:	f380 8809 	msr	PSP, r0
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	4770      	bx	lr

08003a00 <pxCurrentTCBConst>:
 8003a00:	200006dc 	.word	0x200006dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop

08003a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	607b      	str	r3, [r7, #4]
}
 8003a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a22:	f7fe fec5 	bl	80027b0 <xTaskIncrementTick>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <SysTick_Handler+0x40>)
 8003a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	2300      	movs	r3, #0
 8003a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f383 8811 	msr	BASEPRI, r3
}
 8003a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <vPortSetupTimerInterrupt+0x30>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <vPortSetupTimerInterrupt+0x34>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a5c:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <vPortSetupTimerInterrupt+0x38>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <vPortSetupTimerInterrupt+0x3c>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	4a08      	ldr	r2, [pc, #32]	; (8003a8c <vPortSetupTimerInterrupt+0x40>)
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a6e:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <vPortSetupTimerInterrupt+0x30>)
 8003a70:	2207      	movs	r2, #7
 8003a72:	601a      	str	r2, [r3, #0]
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	e000e010 	.word	0xe000e010
 8003a80:	e000e018 	.word	0xe000e018
 8003a84:	20000000 	.word	0x20000000
 8003a88:	10624dd3 	.word	0x10624dd3
 8003a8c:	e000e014 	.word	0xe000e014

08003a90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003a96:	f3ef 8305 	mrs	r3, IPSR
 8003a9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	d914      	bls.n	8003acc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003aa2:	4a16      	ldr	r2, [pc, #88]	; (8003afc <vPortValidateInterruptPriority+0x6c>)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003aac:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <vPortValidateInterruptPriority+0x70>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	7afa      	ldrb	r2, [r7, #11]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d20a      	bcs.n	8003acc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	607b      	str	r3, [r7, #4]
}
 8003ac8:	bf00      	nop
 8003aca:	e7fe      	b.n	8003aca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003acc:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <vPortValidateInterruptPriority+0x74>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <vPortValidateInterruptPriority+0x78>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d90a      	bls.n	8003af2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	603b      	str	r3, [r7, #0]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <vPortValidateInterruptPriority+0x60>
	}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	e000e3f0 	.word	0xe000e3f0
 8003b00:	20000904 	.word	0x20000904
 8003b04:	e000ed0c 	.word	0xe000ed0c
 8003b08:	20000908 	.word	0x20000908

08003b0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b18:	f7fe fd92 	bl	8002640 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b1c:	4b58      	ldr	r3, [pc, #352]	; (8003c80 <pvPortMalloc+0x174>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b24:	f000 f910 	bl	8003d48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b28:	4b56      	ldr	r3, [pc, #344]	; (8003c84 <pvPortMalloc+0x178>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 808e 	bne.w	8003c52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01d      	beq.n	8003b78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d014      	beq.n	8003b78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f023 0307 	bic.w	r3, r3, #7
 8003b54:	3308      	adds	r3, #8
 8003b56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <pvPortMalloc+0x6c>
	__asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	617b      	str	r3, [r7, #20]
}
 8003b74:	bf00      	nop
 8003b76:	e7fe      	b.n	8003b76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d069      	beq.n	8003c52 <pvPortMalloc+0x146>
 8003b7e:	4b42      	ldr	r3, [pc, #264]	; (8003c88 <pvPortMalloc+0x17c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d864      	bhi.n	8003c52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b88:	4b40      	ldr	r3, [pc, #256]	; (8003c8c <pvPortMalloc+0x180>)
 8003b8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b8c:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <pvPortMalloc+0x180>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b92:	e004      	b.n	8003b9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d903      	bls.n	8003bb0 <pvPortMalloc+0xa4>
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f1      	bne.n	8003b94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003bb0:	4b33      	ldr	r3, [pc, #204]	; (8003c80 <pvPortMalloc+0x174>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d04b      	beq.n	8003c52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	4413      	add	r3, r2
 8003bc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1ad2      	subs	r2, r2, r3
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d91f      	bls.n	8003c1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <pvPortMalloc+0xf8>
	__asm volatile
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	613b      	str	r3, [r7, #16]
}
 8003c00:	bf00      	nop
 8003c02:	e7fe      	b.n	8003c02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	1ad2      	subs	r2, r2, r3
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c16:	69b8      	ldr	r0, [r7, #24]
 8003c18:	f000 f8f8 	bl	8003e0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <pvPortMalloc+0x17c>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <pvPortMalloc+0x17c>)
 8003c28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c2a:	4b17      	ldr	r3, [pc, #92]	; (8003c88 <pvPortMalloc+0x17c>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <pvPortMalloc+0x184>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d203      	bcs.n	8003c3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c36:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <pvPortMalloc+0x17c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <pvPortMalloc+0x184>)
 8003c3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <pvPortMalloc+0x178>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c52:	f7fe fd03 	bl	800265c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <pvPortMalloc+0x16a>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	60fb      	str	r3, [r7, #12]
}
 8003c72:	bf00      	nop
 8003c74:	e7fe      	b.n	8003c74 <pvPortMalloc+0x168>
	return pvReturn;
 8003c76:	69fb      	ldr	r3, [r7, #28]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3728      	adds	r7, #40	; 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20001514 	.word	0x20001514
 8003c84:	20001520 	.word	0x20001520
 8003c88:	20001518 	.word	0x20001518
 8003c8c:	2000150c 	.word	0x2000150c
 8003c90:	2000151c 	.word	0x2000151c

08003c94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d048      	beq.n	8003d38 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	425b      	negs	r3, r3
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4413      	add	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	4b21      	ldr	r3, [pc, #132]	; (8003d40 <vPortFree+0xac>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <vPortFree+0x44>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	60fb      	str	r3, [r7, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <vPortFree+0x62>
	__asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	60bb      	str	r3, [r7, #8]
}
 8003cf2:	bf00      	nop
 8003cf4:	e7fe      	b.n	8003cf4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <vPortFree+0xac>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d019      	beq.n	8003d38 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d115      	bne.n	8003d38 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <vPortFree+0xac>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	401a      	ands	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d1c:	f7fe fc90 	bl	8002640 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <vPortFree+0xb0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4413      	add	r3, r2
 8003d2a:	4a06      	ldr	r2, [pc, #24]	; (8003d44 <vPortFree+0xb0>)
 8003d2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d2e:	6938      	ldr	r0, [r7, #16]
 8003d30:	f000 f86c 	bl	8003e0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003d34:	f7fe fc92 	bl	800265c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d38:	bf00      	nop
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20001520 	.word	0x20001520
 8003d44:	20001518 	.word	0x20001518

08003d48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <prvHeapInit+0xac>)
 8003d56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00c      	beq.n	8003d7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3307      	adds	r3, #7
 8003d66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0307 	bic.w	r3, r3, #7
 8003d6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <prvHeapInit+0xac>)
 8003d78:	4413      	add	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d80:	4a1d      	ldr	r2, [pc, #116]	; (8003df8 <prvHeapInit+0xb0>)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d86:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <prvHeapInit+0xb0>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	4413      	add	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003d94:	2208      	movs	r2, #8
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0307 	bic.w	r3, r3, #7
 8003da2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <prvHeapInit+0xb4>)
 8003da8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003daa:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <prvHeapInit+0xb4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2200      	movs	r2, #0
 8003db0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <prvHeapInit+0xb4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	1ad2      	subs	r2, r2, r3
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <prvHeapInit+0xb4>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <prvHeapInit+0xb8>)
 8003dd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <prvHeapInit+0xbc>)
 8003dde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <prvHeapInit+0xc0>)
 8003de2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003de6:	601a      	str	r2, [r3, #0]
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	2000090c 	.word	0x2000090c
 8003df8:	2000150c 	.word	0x2000150c
 8003dfc:	20001514 	.word	0x20001514
 8003e00:	2000151c 	.word	0x2000151c
 8003e04:	20001518 	.word	0x20001518
 8003e08:	20001520 	.word	0x20001520

08003e0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e14:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <prvInsertBlockIntoFreeList+0xa8>)
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e002      	b.n	8003e20 <prvInsertBlockIntoFreeList+0x14>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d8f7      	bhi.n	8003e1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	4413      	add	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d108      	bne.n	8003e4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	441a      	add	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	441a      	add	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d118      	bne.n	8003e94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <prvInsertBlockIntoFreeList+0xac>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d00d      	beq.n	8003e8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	441a      	add	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e008      	b.n	8003e9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <prvInsertBlockIntoFreeList+0xac>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e003      	b.n	8003e9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d002      	beq.n	8003eaa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	2000150c 	.word	0x2000150c
 8003eb8:	20001514 	.word	0x20001514

08003ebc <__libc_init_array>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	2600      	movs	r6, #0
 8003ec0:	4d0c      	ldr	r5, [pc, #48]	; (8003ef4 <__libc_init_array+0x38>)
 8003ec2:	4c0d      	ldr	r4, [pc, #52]	; (8003ef8 <__libc_init_array+0x3c>)
 8003ec4:	1b64      	subs	r4, r4, r5
 8003ec6:	10a4      	asrs	r4, r4, #2
 8003ec8:	42a6      	cmp	r6, r4
 8003eca:	d109      	bne.n	8003ee0 <__libc_init_array+0x24>
 8003ecc:	f000 f830 	bl	8003f30 <_init>
 8003ed0:	2600      	movs	r6, #0
 8003ed2:	4d0a      	ldr	r5, [pc, #40]	; (8003efc <__libc_init_array+0x40>)
 8003ed4:	4c0a      	ldr	r4, [pc, #40]	; (8003f00 <__libc_init_array+0x44>)
 8003ed6:	1b64      	subs	r4, r4, r5
 8003ed8:	10a4      	asrs	r4, r4, #2
 8003eda:	42a6      	cmp	r6, r4
 8003edc:	d105      	bne.n	8003eea <__libc_init_array+0x2e>
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee4:	4798      	blx	r3
 8003ee6:	3601      	adds	r6, #1
 8003ee8:	e7ee      	b.n	8003ec8 <__libc_init_array+0xc>
 8003eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eee:	4798      	blx	r3
 8003ef0:	3601      	adds	r6, #1
 8003ef2:	e7f2      	b.n	8003eda <__libc_init_array+0x1e>
 8003ef4:	08003fc4 	.word	0x08003fc4
 8003ef8:	08003fc4 	.word	0x08003fc4
 8003efc:	08003fc4 	.word	0x08003fc4
 8003f00:	08003fc8 	.word	0x08003fc8

08003f04 <memcpy>:
 8003f04:	440a      	add	r2, r1
 8003f06:	4291      	cmp	r1, r2
 8003f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f0c:	d100      	bne.n	8003f10 <memcpy+0xc>
 8003f0e:	4770      	bx	lr
 8003f10:	b510      	push	{r4, lr}
 8003f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f16:	4291      	cmp	r1, r2
 8003f18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f1c:	d1f9      	bne.n	8003f12 <memcpy+0xe>
 8003f1e:	bd10      	pop	{r4, pc}

08003f20 <memset>:
 8003f20:	4603      	mov	r3, r0
 8003f22:	4402      	add	r2, r0
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d100      	bne.n	8003f2a <memset+0xa>
 8003f28:	4770      	bx	lr
 8003f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f2e:	e7f9      	b.n	8003f24 <memset+0x4>

08003f30 <_init>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	bf00      	nop
 8003f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f36:	bc08      	pop	{r3}
 8003f38:	469e      	mov	lr, r3
 8003f3a:	4770      	bx	lr

08003f3c <_fini>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	bf00      	nop
 8003f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f42:	bc08      	pop	{r3}
 8003f44:	469e      	mov	lr, r3
 8003f46:	4770      	bx	lr
